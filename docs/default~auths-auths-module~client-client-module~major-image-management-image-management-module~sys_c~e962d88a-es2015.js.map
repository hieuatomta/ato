{"version":3,"sources":["./src/app/shares/directives/inline-message/inline-message.component.ts","./src/app/shares/directives/inline-message/inline-message.component.html","./node_modules/rxjs/_esm2015/internal/observable/dom/ajax.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-item.component.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-item.component.html","./src/app/shares/directives/tree-picker/ngx-treeview/dropdown-toggle.directive.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-custom/dropdown-treeview-select-i18n.ts","./node_modules/rxjs/_esm2015/internal/observable/fromIterable.js","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-i18n.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-item.ts","./node_modules/rxjs/_esm2015/internal/util/applyMixins.js","./src/app/shares/directives/confirm-dialog/confirm-dialog.component.ts","./src/app/shares/directives/confirm-dialog/confirm-dialog.component.html","./node_modules/rxjs/_esm2015/internal/observable/dom/AjaxObservable.js","./src/app/shares/directives/tree-picker/ngx-treeview/treeview.pipe.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-config.ts","./node_modules/rxjs/_esm2015/internal/util/errorObject.js","./src/app/shares/directives/tree-picker/ngx-treeview/treeview.module.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-event-parser.ts","./node_modules/@swimlane/ngx-datatable/__ivy_ngcc__/fesm2015/swimlane-ngx-datatable.js","./node_modules/rxjs/_esm2015/internal/observable/dom/webSocket.js","./node_modules/rxjs/_esm2015/internal/util/tryCatch.js","./src/app/shares/directives/tree-picker/ngx-treeview/dropdown.directive.ts","./src/app/shares/directives/tree-picker/ngx-treeview/index.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-custom/treeview-custom.component.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-custom/treeview-custom.component.html","./src/app/shares/directives/tree-picker/ngx-treeview/treeview.component.ts","./src/app/shares/directives/tree-picker/ngx-treeview/treeview.component.html","./src/app/shares/directives/tree-picker/tree-picker.component.ts","./src/app/shares/directives/tree-picker/tree-picker.component.html","./src/app/shares/directives/tree-picker/ngx-treeview/dropdown-menu.directive.ts","./src/app/shares/directives/tree-picker/ngx-treeview/dropdown-treeview.component.ts","./src/app/shares/directives/tree-picker/ngx-treeview/dropdown-treeview.component.html","./src/app/shares/shared.module.ts","./node_modules/rxjs/_esm2015/internal-compatibility/index.js","./node_modules/rxjs/_esm2015/internal/observable/dom/WebSocketSubject.js","./node_modules/rxjs/_esm2015/internal/observable/fromPromise.js","./src/app/shares/directives/tree-picker/ngx-treeview/treeview-helper.ts","./node_modules/rxjs/_esm2015/internal/util/root.js"],"names":[],"mappings":"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;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B,WAAW,EAaV;AACD;AACA;AACA,UAAU;AACV;AACA,oCAAoC,6FAA+B,EAAE,gBAAgB;AACrF;AACA;AACA,UAAU;AACV;AACA,mCAAmC,6FAA+B,EAAE,iBAAiB;AACrF;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAOV;AACD;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC,WAAW,EAGV;AACD;AACA;AACA;AACA;AACA,kBAAkB;AAClB,WAAW,EAKV;AACD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA,wCAAwC,iDAAY;AACpD;AACA;AACA;AACA,sCAAsC,iDAAY;AAClD;AACA;AACA;AACA,mCAAmC,iDAAY;AAC/C;AACA;AACA;AACA,mCAAmC,iDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,4BAA4B,4CAAO;AACnC;AACA;AACA;AACA,yBAAyB,4CAAO;AAChC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,yFAAyF,EAAE;AAC3F,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,0DAA0D,kBAAkB,GAAG,kBAAkB;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,kBAAkB,2EAAa;AAC/B,oBAAoB,EAAE;AACtB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa;AACrC,oCAAoC,EAAE;AACtC,4BAA4B,EAAE;AAC9B,4BAA4B,EAAE,oDAAoD,EAAE;AACpF;AACA,8DAA8D,EAAE;AAChE,+DAA+D,EAAE;AACjE,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE,iDAAiD,2EAAa;AACpF,oBAAoB,EAAE;AACtB;AACA,wBAAwB,EAAE,8CAA8C,EAAE;AAC1E;AACA;AACA,wBAAwB;AACxB;AACA,8BAA8B,EAAE;AAChC;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE,gCAAgC;AACtD,oBAAoB,EAAE;AACtB,oBAAoB,EAAE;AACtB,yBAAyB,EAAE;AAC3B,wBAAwB,EAAE;AAC1B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,EAAE;AACjE;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uCAAuC,EAAE;AACzC,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,wEAAwE,EAAE;AAC1E,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,gEAAS;AAC/E,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,0CAA0C,aAAa;AACvD;AACA,mBAAmB,EAAE;AACrB;AACA,uCAAuC;AACvC,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,0CAA0C,EAAE;AAC5C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gCAAgC,OAAO;AACvC;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,kCAAkC,oCAAoC,EAAE,4BAA4B;AACpG,4BAA4B,EAAE;AAC9B;AACA,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C,8CAA8C,EAAE;AAChD,iBAAiB;AACjB,aAAa;AACb;AACA,oBAAoB,EAAE;AACtB,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB,wCAAwC,EAAE,mFAAmF,EAAE;AAC/H;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B,4CAA4C,EAAE;AAC9C,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,uDAAuD,EAAE;AACzD;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+CAA+C,EAAE,2FAA2F,EAAE;AAC9I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yBAAyB;AAC5C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,4CAA4C,EAAE;AAC9C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,OAAO;AACtB,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oBAAoB;AACpB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAwVV;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,0BAA0B,cAAc,MAAM,cAAc;AAC5D;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB,8BAA8B,EAAE;AAChC,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,+BAA+B;AACtD,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,4BAA4B,iBAAiB;AAC7C,6BAA6B,kBAAkB;AAC/C;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,WAAW,EAgBV;AACD;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EAKV;AACD,WAAW,OAAO;AAClB;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,iCAAiC,4CAAO;AACxC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iDAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,4CAAO;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,YAAY,qDAAQ,IAAI,4DAAuB;AAC/C,sBAAsB,gEAAS;AAC/B;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB,2EAAa;AACpC;AACA;AACA;AACA;AACA;AACA,0EAA0E,EAAE;AAC5E,qBAAqB,EAAE;AACvB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,wBAAwB,EAAE;AAC1B;AACA;AACA;AACA,YAAY,2EAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAA+D;AAC1F;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,oDAAoD,EAAE;AACtD,wBAAwB,EAAE;AAC1B,wBAAwB,EAAE;AAC1B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,oBAAoB,EAAE;AACtB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,cAAc;AACd,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa,aAAa,EAAE;AACpD;AACA;AACA,oBAAoB,EAAE;AACtB;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,2BAA2B;AAC5F;AACA;AACA;AACA,oEAAoE,2BAA2B;AAC/F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G,EAAE;AAChH;AACA,6CAA6C,EAAE;AAC/C;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,gBAAgB;AACnC,uBAAuB,EAAE;AACzB,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mDAAmD;AACpF;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,oBAAoB;AACpB,SAAS;AACT,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,uBAAuB,2EAAa;AACpC,qBAAqB,EAAE;AACvB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,mBAAmB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,2CAA2C,EAAE;AAC7C,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,aAAa;AACvB;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,6CAA6C,EAAE;AAC/C;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,8BAA8B,2EAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2CAA2C,EAAE;AAC7C,2BAA2B,EAAE;AAC7B;AACA;AACA,+BAA+B,EAAE;AACjC;AACA,+BAA+B,EAAE;AACjC;AACA;AACA,mCAAmC,EAAE;AACrC,2DAA2D,EAAE;AAC7D;AACA;AACA;AACA;AACA,8CAA8C,EAAE;AAChD,+CAA+C,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mDAAmD,2EAAa;AAChE;AACA;AACA;AACA;AACA,WAAW,EAgNV;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,0CAA0C;AACrD,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,2BAA2B;AACtC;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA,qBAAqB,EAAE;AACvB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,sBAAsB;AACjC,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,WAAW,qBAAqB;AAChC,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,QAAQ,gFAAkB;AAC1B,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA,oCAAoC,6FAA+B;AACnE;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAO;AACtC;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA,0BAA0B,4CAAO;AACjC;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,yDAAyD,EAAE;AAC3D;AACA,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,uDAAuD,EAAE;AACzD;AACA,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACj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EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,yBAAyB,+CAAU;AACnC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,0DAA0D,0DAAG;AAC7D,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB;AACxB;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAI,KAAK,gEAAS;AACpC;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uCAAuC,gEAAS;AAChD;AACA,YAAY,0DAAG;AACf,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,aAAa;AACb;AACA,YAAY,gEAAS;AACrB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,mCAAmC,EAAE,KAAK,kDAAK;AAC/C,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA,mDAAmD,gEAAS;AAC5D,iBAAiB;AACjB,aAAa,IAAI,gEAAS;AAC1B,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,0CAA0C,qBAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,2EAAa;AACrC,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qCAAqC,kFAAoB;AACzD;AACA;AACA;AACA;AACA;AAC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AyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,oBAAoB,uBAAuB;AAC3C;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,mFAAqB;AAC9C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,wBAAwB,+DAAwB,EAAE,6EAA6E,qDAAqD,kCAAkC;AACtN;AACA,gBAAgB,OAAO,mDAAK,uCAAuC;AACnE;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB;AACA,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAaV;;AAED;AACA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,mFAAqB;AAC3E;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,qHAAqH,aAAa;AAClI;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,sBAAsB,gEAAS,mBAAmB,gEAAS;AAC3D;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,6BAA6B,yEAAW;AACxC,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,gCAAgC,EAAE;AAClC,+BAA+B,EAAE;AACjC,gCAAgC;AAChC;AACA;AACA,aAAa;AACb;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,kCAAkC,mFAAqB;AACvD,qCAAqC,mFAAqB;AAC1D;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,uFAAuF;AACtG;AACA;AA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AAa;;6FDHrF,sBAAsB;cALlC,uDAAS;eAAC;gBACT,QAAQ,EAAE,oBAAoB;gBAC9B,WAAW,EAAE,iCAAiC;gBAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;aAC/C;;kBAEE,mDAAK;;kBACL,mDAAK;;kBACL,mDAAK;;kBACL,mDAAK;;kBACL,mDAAK;;;;;;;;;;;;;;AEbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACO;AACA;AACJ;AAC1C;AACA,QAAQ,+CAAI;AACZ,mBAAmB,+CAAI;AACvB;AACA,eAAe,+CAAI;AACnB,mBAAmB,+CAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,+CAAI;AACZ,mBAAmB,+CAAI;AACvB;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA,4BAA4B,+CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,+CAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACO;AACP,+BAA+B,8BAA8B;AAC7D;AACO;AACP,+BAA+B,qCAAqC;AACpE;AACO;AACP,+BAA+B,iCAAiC;AAChE;AACO;AACP,+BAA+B,oCAAoC;AACnE;AACO;AACP,+BAA+B,sCAAsC;AACrE;AACA,oBAAoB,0DAAG;AAChB;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,6BAA6B,sDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM,6BAA6B,sDAAU;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,+CAAI,qCAAqC,+CAAI;AACjF,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB,oDAAoD,EAAE;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+CAAI,6BAA6B,+CAAI;AACtD;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wBAAwB,GAAG,8BAA8B;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA,oBAAoB,+CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAA0C;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,0C;;;;;;;;;;;;ACtWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoD;AACrB;AACgB;;AAKxC,MAAM,YAAY;IACrB,SAAS,CAAC,OAAc,EAAE,SAAiB;QACvC,IAAI,oDAAK,CAAC,OAAO,CAAC,EAAE;YAChB,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,2DAAY,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IAC/F,CAAC;;wEAPQ,YAAY;6GAAZ,YAAY;6FAAZ,YAAY;cAHxB,kDAAI;eAAC;gBACF,IAAI,EAAE,aAAa;aACtB;;;;;;;;;;;;;;ACND;AAAA;AAAA;AAA2C;;AAGpC,MAAM,cAAc;IAD3B;QAEI,mBAAc,GAAG,IAAI,CAAC;QACtB,cAAS,GAAG,KAAK,CAAC;QAClB,sBAAiB,GAAG,KAAK,CAAC;QAC1B,4BAAuB,GAAG,KAAK,CAAC;QAChC,cAAS,GAAG,GAAG,CAAC;KAiBnB;IAfG,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,iBAAiB,CAAC;IAC3E,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,MAMpB;QACG,MAAM,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;QACpC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC9B,OAAO,MAAM,CAAC;IAClB,CAAC;;4EArBQ,cAAc;iGAAd,cAAc,WAAd,cAAc;6FAAd,cAAc;cAD1B,wDAAU;;;;;;;;;;;;;;ACFX;AAAA;AAAO,qBAAqB,MAAM;AAClC,uC;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8D;AACjB;AACE;AACU;AACS;AACI;AACI;AACjB;AACS;AACnB;AACqB;AACjB;AACuC;AACyB;AAC9B;AAC/B;;AA6B/C,MAAM,cAAc;IACvB,MAAM,CAAC,OAAO;QACV,OAAO;YACH,QAAQ,EAAE,cAAc;YACxB,SAAS,EAAE;gBACP,gEAAc;gBACd,EAAE,OAAO,EAAE,4DAAY,EAAE,QAAQ,EAAE,mEAAmB,EAAE;gBACxD,EAAE,OAAO,EAAE,2EAAmB,EAAE,QAAQ,EAAE,kFAA0B,EAAE;aACzE;SACJ,CAAC;IACN,CAAC;;6FAVQ,cAAc;sJAAd,cAAc,kBA1Bd;YACL,0DAAW;YACX,4DAAY;YACZ,8DAAc;YACd,+DAAe;YACf,+DAAe;YACf,4DAAY;YACZ,mEAAmB;YACnB,sEAAc;SACjB;mIAiBQ,cAAc,mBAfnB,qEAAiB;QACjB,8EAAqB;QACrB,2DAAY;QACZ,qEAAiB;QACjB,8EAAqB;QACrB,kFAAuB;QACvB,sFAAyB;QACzB,mGAAuB,aAjBvB,0DAAW;QACX,4DAAY;QACZ,8DAAc;QACd,+DAAe;QACf,+DAAe;QACf,4DAAY;QACZ,mEAAmB;QACnB,sEAAc,aAYd,qEAAiB;QACjB,2DAAY;QACZ,sFAAyB;QACzB,mGAAuB;6FAGlB,cAAc;cA3B1B,sDAAQ;eAAC;gBACN,OAAO,EAAE;oBACL,0DAAW;oBACX,4DAAY;oBACZ,8DAAc;oBACd,+DAAe;oBACf,+DAAe;oBACf,4DAAY;oBACZ,mEAAmB;oBACnB,sEAAc;iBACjB;gBACD,YAAY,EAAE;oBACV,qEAAiB;oBACjB,8EAAqB;oBACrB,2DAAY;oBACZ,qEAAiB;oBACjB,8EAAqB;oBACrB,kFAAuB;oBACvB,sFAAyB;oBACzB,mGAAuB;iBAC1B,EAAE,OAAO,EAAE;oBACR,qEAAiB;oBACjB,2DAAY;oBACZ,sFAAyB;oBACzB,mGAAuB;iBAC1B;aACJ;;;;;;;;;;;;;;AC3CD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACZ;;AAKxB,MAAe,mBAAmB;;sFAAnB,mBAAmB;sGAAnB,mBAAmB,WAAnB,mBAAmB;6FAAnB,mBAAmB;cADxC,wDAAU;;AAMJ,MAAM,0BAA2B,SAAQ,mBAAmB;IAC/D,iBAAiB,CAAC,SAA4B;QAC1C,MAAM,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC;QACtD,IAAI,CAAC,oDAAK,CAAC,YAAY,CAAC,EAAE;YACtB,+CAA+C;YAC/C,OAAO,YAAY,CAAC;SACvB;QAED,OAAO,EAAE,CAAC;IACd,CAAC;;uIATQ,0BAA0B;6GAA1B,0BAA0B,WAA1B,0BAA0B;oHAA1B,0BAA0B;6FAA1B,0BAA0B;cADtC,wDAAU;;AAmBJ,MAAM,2BAA4B,SAAQ,mBAAmB;IAChE,iBAAiB,CAAC,SAA4B;QAC1C,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,oDAAK,CAAC,KAAK,CAAC,EAAE;YACf,IAAI,MAAM,GAA2B,EAAE,CAAC;YACxC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACjB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACxC,IAAI,CAAC,oDAAK,CAAC,KAAK,CAAC,EAAE;oBACf,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;SACjB;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAEO,QAAQ,CAAC,IAAkB,EAAE,MAA4B;QAC7D,IAAI,CAAC,oDAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACvB,MAAM,IAAI,GAAG;gBACT,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,MAAM;aACjB,CAAC;YACF,IAAI,MAAM,GAA2B,EAAE,CAAC;YACxC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACzC,IAAI,CAAC,oDAAK,CAAC,KAAK,CAAC,EAAE;oBACf,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACjC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;SACjB;QAED,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,CAAC;oBACJ,IAAI,EAAE,IAAI;oBACV,MAAM,EAAE,MAAM;iBACjB,CAAC,CAAC;SACN;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;;0IA3CQ,2BAA2B;8GAA3B,2BAA2B,WAA3B,2BAA2B;qHAA3B,2BAA2B;6FAA3B,2BAA2B;cADvC,wDAAU;;AAgDJ,MAAM,gCAAiC,SAAQ,mBAAmB;IADzE;;QAEY,qBAAgB,GAA2B,EAAE,CAAC;QAC9C,WAAM,GAAG,IAAI,2BAA2B,EAAE,CAAC;KA6BtD;IA3BG,iBAAiB,CAAC,SAA4B;QAC1C,MAAM,YAAY,GAA2B,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACtF,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE;YACpC,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC;SACxC;aAAM;YACH,MAAM,kBAAkB,GAA2B,EAAE,CAAC;YACtD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBACrC,IAAI,UAAU,GAAG,CAAC,CAAC,CAAC;gBACpB,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;gBACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC7B,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE;wBACpD,UAAU,GAAG,CAAC,CAAC;wBACf,MAAM;qBACT;iBACJ;gBAED,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;oBACnB,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;oBAClD,YAAY,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;iBACtC;YACL,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SACnE;QAED,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;;yJA9BQ,gCAAgC;mHAAhC,gCAAgC,WAAhC,gCAAgC;0HAAhC,gCAAgC;6FAAhC,gCAAgC;cAD5C,wDAAU;;;;;;;;;;;;;;AC3EX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuV;AAC9R;AACE;AAChB;AACI;;AAE/C;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACwC;AACE;;AAE1C;AACA,wEAAwE;AACxE,IAAI,uDAAgB;AACpB,CAAC;AACD,gGAAgG;AAChG,IAAI,uDAAgB;AACpB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,qHAAqH;AACrH,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,sKAAsK,CAAC,2DAAoB,QAAQ,oBAAoB,2DAAoB,aAAa,kBAAkB,2DAAoB,IAAI,0CAA0C,EAAE,yKAAyK,CAAC,2DAAoB,QAAQ,gBAAgB,2DAAoB,SAAS,kBAAkB,2DAAoB,IAAI,eAAe,yDAAkB,IAAI,kEAAkE,EAAE;AACzuB,IAAI,0DAAmB;AACvB,CAAC;AACD,uBAAuB,2DAAoB;AAC3C,qBAAqB,2DAAoB;AACzC,kBAAkB,yDAAkB;AACpC,IAAI,wDAAiB;AACrB,CAAC;AACD,mIAAmI;AACnI,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,sLAAsL,CAAC,2DAAoB,QAAQ,0BAA0B,CAAC,2DAAoB,IAAI,eAAe,yDAAkB,IAAI,yCAAyC,EAAE;AAC3W,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,uBAAuB,2DAAoB;AAC3C,qBAAqB,2DAAoB;AACzC,kBAAkB,yDAAkB;AACpC,IAAI,wDAAiB;AACrB,CAAC;AACD,8GAA8G;AAC9G,IAAI,wDAAiB;AACrB,CAAC;AACD,uBAAuB,2DAAoB;AAC3C,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,gGAAgG;AAChG,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,kKAAkK,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,6CAA6C,EAAE;AAC7S,IAAI,wDAAiB;AACrB,IAAI,wDAAiB,+HAA+H,oEAA6B;AACjL,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA;AACA,kBAAkB,yDAAkB;AACpC,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,gGAAgG;AAChG,IAAI,uDAAgB;AACpB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,wEAAwE;AACxE,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,uHAAuH,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,sCAAsC,EAAE;AAC1P,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,yDAAyD;AACzD,IAAI,uDAAgB;AACpB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB,qCAAqC,4DAAqB;AAC/E,CAAC;AACD,mFAAmF;AACnF,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,qIAAqI,CAAC,2DAAoB,QAAQ,mCAAmC,kBAAkB,2DAAoB,IAAI,sDAAsD,EAAE,sJAAsJ,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,0CAA0C,EAAE,kJAAkJ,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,wCAAwC,EAAE,kIAAkI,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,gCAAgC,EAAE,sIAAsI,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,qCAAqC,EAAE,4JAA4J,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,gDAAgD,EAAE;AAC5jD,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,2DAA2D;AAC3D,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,kEAAkE;AAClE,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,2GAA2G,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,sCAAsC,EAAE,gHAAgH,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,wCAAwC,EAAE,kHAAkH,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,yCAAyC,EAAE,gHAAgH,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,wCAAwC,EAAE,sIAAsI,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,6CAA6C,EAAE;AAC5oC,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB,2IAA2I,yDAAkB;AAClL,CAAC;AACD,kEAAkE;AAClE,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,2GAA2G,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,sCAAsC,EAAE;AAC9O,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,yEAAyE;AACzE,2DAA2D;AAC3D,IAAI,wDAAiB;AACrB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,iEAAiE;AACjE,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,6FAA6F,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,wDAAwD,EAAE;AAClP,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,gEAAgE;AAChE,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,yFAAyF,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,0BAA0B,EAAE;AAChN,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB,6BAA6B,4DAAqB;AACvE,CAAC;AACD,yEAAyE;AACzE,2DAA2D;AAC3D,IAAI,wDAAiB;AACrB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,qEAAqE;AACrE,2CAA2C,SAAS,0EAA0E;AAC9H,uDAAuD;AACvD,IAAI,wDAAiB;AACrB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB,kFAAkF,6DAAsB;AAC7H,CAAC;AACD,kEAAkE;AAClE,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,uDAAgB;AACpB,IAAI,gEAAyB;AAC7B,CAAC;AACD,2DAA2D;AAC3D,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,gEAAyB;AAC7B,CAAC;AACD,uEAAuE;AACvE,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,mHAAmH,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,mCAAmC,EAAE;AACnP,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,2BAA2B,SAAS,wBAAwB;AAC5D,yDAAyD;AACzD,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,+EAA+E,CAAC,2DAAoB,QAAQ,+BAA+B,kBAAkB,2DAAoB,GAAG,4CAA4C,EAAE;AACvP,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,qBAAqB,2DAAoB;AACzC,IAAI,yDAAkB;AACtB,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,gEAAyB;AAC7B,CAAC;AACD,kFAAkF;AAClF,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,sIAAsI,CAAC,2DAAoB,QAAQ,2BAA2B,kBAAkB,2DAAoB,IAAI,6CAA6C,EAAE,qIAAqI,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,gCAAgC,EAAE;AAC1hB,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,4DAA4D;AAC5D,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD;AACA,qBAAqB,2DAAoB;AACzC,IAAI,oEAA6B;AACjC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,+EAA+E;AAC/E,iEAAiE;AACjE,IAAI,wDAAiB;AACrB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,+DAA+D;AAC/D,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,2DAA2D;AAC3D,IAAI,0DAAmB;AACvB,CAAC;AACD,+EAA+E;AAC/E,iEAAiE;AACjE,IAAI,wDAAiB;AACrB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,+DAA+D;AAC/D,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,yDAAkB;AACtB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD;AACA,+DAA+D;AAC/D,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,+FAA+F,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,GAAG,0CAA0C,EAAE;AACtO,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,mFAAmF;AACnF,IAAI,uDAAgB;AACpB,CAAC;AACD,mFAAmF;AACnF,IAAI,uDAAgB;AACpB,CAAC;AACD,mFAAmF;AACnF,IAAI,uDAAgB;AACpB,CAAC;AACD,+EAA+E;AAC/E,kBAAkB,8DAAuB;AACzC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,0GAA0G,CAAC,2DAAoB,QAAQ,kBAAkB,2DAAoB,IAAI,gCAAgC,EAAE;AACxO,IAAI,4DAAqB;AACzB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,sFAAsF;AACtF,2BAA2B,SAAS,mBAAmB;AACvD,wEAAwE;AACxE,IAAI,wDAAiB;AACrB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB,oFAAoF,6DAAsB;AAC/H,CAAC;AACD,sEAAsE;AACtE,IAAI,qEAA8B;AAClC,IAAI,wDAAiB;AACrB,IAAI,wDAAiB;AACrB,IAAI,mEAA4B;AAChC,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,wDAAiB;AACrB,CAAC;AACD,8DAA8D;AAC9D,IAAI,uDAAgB;AACpB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB,gEAAgE,4DAAqB;AAC1G,CAAC;AACD,uEAAuE;AACvE,yDAAyD;AACzD,IAAI,wDAAiB,sFAAsF,oEAA6B;AACxI,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD,8EAA8E;AAC9E,IAAI,uDAAgB;AACpB,CAAC;AACD,qBAAqB,2DAAoB;AACzC,IAAI,wDAAiB;AACrB,CAAC;AACD;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,sDAAe,CAAC,wDAAQ,GAAG;AAC1H,wBAAwB,gEAAyB,EAAE,wDAAwD;AAC3G;AACA;AACA,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA,WAAW,EAQV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,8DAA8D,sCAAsC;AACpG,yBAAyB,gEAAyB,EAAE,0DAA0D;;AAE9G;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,4CAAO;AAC7C;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,sEAAsE,0CAA0C;AAChH,6BAA6B,gEAAyB,EAAE,kEAAkE;AAC1H,WAAW,EAMV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,8FAA8F,oDAAoD,+DAAwB,CAAC,yDAAkB,GAAG;AAChM,wCAAwC,+DAAwB,EAAE,iGAAiG;AACnK;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,WAAW,EAGV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,oDAAa,GAAG;AACjM,2BAA2B,+DAAwB,EAAE,wJAAwJ;AAC7M,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,YAAY,qBAAqB,EAAE;AAC1C;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,oDAAM;AAClB;AACA;AACA,iBAAiB,OAAO,yDAAW,4BAA4B;AAC/D,eAAe,OAAO,oDAAM,EAAE;AAC9B;AACA,WAAW,EAiBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC,4BAA4B,0DAAY;AACxC,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,kCAAkC;AAClC,uBAAuB,EAAE;AACzB,4BAA4B,sDAAS;AACrC;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB,iCAAiC,sDAAS;AAC1C,sBAAsB,gEAAS;AAC/B;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,yCAAyC,EAAE;AAC3C;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,CAAC,wDAAiB,GAAG;AACrJ,0BAA0B,+DAAwB,EAAE,wEAAwE,6FAA6F,YAAY,mEAAmE,aAAa,kEAA2B,KAAK;AACrV;AACA;AACA,KAAK,OAAO,wDAAU;AACtB;AACA;AACA,uBAAuB,OAAO,mDAAK,EAAE;AACrC,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,aAAa,OAAO,mDAAK,EAAE;AAC3B,aAAa,OAAO,mDAAK,EAAE;AAC3B,iBAAiB,OAAO,oDAAM,EAAE;AAChC,gBAAgB,OAAO,oDAAM,EAAE;AAC/B,eAAe,OAAO,oDAAM,EAAE;AAC9B;AACA,WAAW,EAqBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,+BAA+B,EAAE,mBAAmB,EAAE,kEAAkE,EAAE;AAC1H;AACA,WAAW,EAAE;AACb,kCAAkC,EAAE,mBAAmB,EAAE,kEAAkE,EAAE;AAC7H;AACA,WAAW,EAAE;AACb,0BAA0B,EAAE,mBAAmB,EAAE,kEAAkE,EAAE;;AAErH;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,sCAAsC,EAAE;AACxC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,sDAAS;AACrC;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB,iCAAiC,sDAAS;AAC1C,sBAAsB,gEAAS;AAC/B;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,uCAAuC,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,uDAAgB,GAAG;AACpM,2BAA2B,+DAAwB,EAAE,gJAAgJ;AACrM,QAAQ,wDAAiB,iFAAiF,gCAAgC,EAAE;AAC5I,KAAK;AACL,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,6EAA6E,YAAY,mBAAmB,EAAE;AAChI;AACA;AACA,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,qBAAqB,OAAO,mDAAK,EAAE;AACnC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,cAAc,OAAO,oDAAM,EAAE;AAC7B,mBAAmB,OAAO,0DAAY,oCAAoC;AAC1E;AACA,WAAW,EAoBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC,iCAAiC,0DAAY;AAC7C,qCAAqC;AACrC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,cAAc,8BAA8B;AAC5C,6BAA6B,gBAAgB;AAC7C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gBAAgB,wBAAwB;AACxC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,eAAe,wBAAwB;AACvC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS,KAAK;AACd;AACA;AACA,kEAAkE,sCAAsC,+DAAwB,CAAC,6DAAsB,GAAG,+DAAwB,CAAC,wDAAQ,GAAG;AAC9L,0BAA0B,+DAAwB,EAAE,8IAA8I;AAClM,QAAQ,4DAAqB;AAC7B,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,YAAY,qDAAqD,EAAE;AAC1E;AACA;AACA,KAAK,OAAO,6DAAe,EAAE;AAC7B,KAAK,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AACvE;AACA;AACA,eAAe,OAAO,oDAAM,EAAE;AAC9B,qBAAqB,OAAO,oDAAM,EAAE;AACpC,kBAAkB,OAAO,6DAAe,8BAA8B,oBAAoB,IAAI;AAC9F;AACA,WAAW,EAkBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C,gCAAgC,0DAAY;AAC5C,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB,sDAAS;AACjC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kCAAkC,sDAAS;AAC3C,sBAAsB,gEAAS;AAC/B;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,wCAAwC;AAC1G,0BAA0B,+DAAwB,EAAE,8IAA8I;AAClM,QAAQ,wDAAiB,gFAAgF,gCAAgC,EAAE;AAC3I,KAAK;AACL,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,+EAA+E,YAAY,+FAA+F,EAAE;AAC9M;AACA,oBAAoB,OAAO,mDAAK,EAAE;AAClC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,sBAAsB,OAAO,oDAAM,EAAE;AACrC,oBAAoB,OAAO,oDAAM,EAAE;AACnC,oBAAoB,OAAO,oDAAM,EAAE;AACnC,aAAa,OAAO,yDAAW,0BAA0B;AACzD,mBAAmB,OAAO,yDAAW,8BAA8B;AACnE,mBAAmB,OAAO,0DAAY,oCAAoC;AAC1E;AACA,WAAW,EAyBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB,gCAAgC,EAAE;AAClC;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,+DAAwB,CAAC,oDAAa,GAAG,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,uDAAgB,GAAG;AACvO,yBAAyB,+DAAwB,EAAE,gLAAgL;AACnO,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,+GAA+G,YAAY,mBAAmB,sGAAsG;AACtQ,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C;AACA;AACA,KAAK,OAAO,oDAAM,EAAE;AACpB,KAAK,OAAO,wDAAU,EAAE;AACxB,KAAK,OAAO,uDAAS;AACrB;AACA;AACA,kBAAkB,OAAO,mDAAK,EAAE;AAChC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,oBAAoB,OAAO,yDAAW,8BAA8B,GAAG,OAAO,mDAAK,EAAE;AACrF,mBAAmB,OAAO,yDAAW,6BAA6B,GAAG,OAAO,mDAAK,EAAE;AACnF,cAAc,OAAO,oDAAM,EAAE;AAC7B;AACA,WAAW,EAwCV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,wGAAwG,yDAAyD,+DAAwB,CAAC,yDAAkB,GAAG;AAC/M,6CAA6C,+DAAwB,EAAE,4GAA4G;AACnL;AACA;AACA,KAAK,OAAO,yDAAW;AACvB;AACA,WAAW,EAGV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wFAAwF,mDAAmD;AAC3I,qCAAqC,+DAAwB,EAAE,6KAA6K;AAC5O,QAAQ,kEAA2B,wDAAwD,yDAAW;AACtG,KAAK;AACL;AACA,QAAQ,4DAAqB,MAAM,yDAAkB;AACrD,KAAK,EAAE,WAAW,yEAAyE,YAAY,mBAAmB,EAAE;AAC5H;AACA,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,sBAAsB,OAAO,mDAAK,uBAAuB;AACzD,sBAAsB,OAAO,0DAAY,iDAAiD,OAAO,yDAAW,gBAAgB,IAAI;AAChI,cAAc,OAAO,oDAAM,EAAE;AAC7B;AACA,WAAW,EAeV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,GAAG;AACd,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,qCAAqC;AACrC;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAOV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,iBAAiB,MAAM;AACvB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;A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ACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,uBAAuB,2CAA2C;AAClE,uBAAuB,+CAA+C;AACtE,uBAAuB,6CAA6C;AACpE;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,yFAAyF;AACxG,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,2CAA2C,UAAU;AACrD;AACA;AACA;AACA;AACA,2CAA2C,gBAAgB;AAC3D;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,+CAA+C,WAAW,cAAc,YAAY;AACpF;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,8CAA8C,QAAQ;AACtD;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,wCAAwC,iBAAiB;AACzD,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EASV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA,+CAA+C,EAAE,MAAM,EAAE;AACzD;AACA;AACA;AACA,wDAAwD,EAAE,MAAM,EAAE;AAClE;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,yBAAyB,EAAE;AAC3B;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC,wBAAwB,0DAAY;AACpC,4BAA4B,0DAAY;AACxC,0BAA0B,0DAAY;AACtC,gCAAgC,0DAAY;AAC5C,kCAAkC,0DAAY;AAC9C,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB,mBAAmB,GAAG;AACtB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,0FAA0F,EAAE;AAC5F,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,cAAc;AAC7B,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,+BAA+B,4BAA4B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,8CAA8C;AAC9C,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,wBAAwB;AACxB,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAA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B,0DAAY;AACpC,2BAA2B,0DAAY;AACvC,0BAA0B,0DAAY;AACtC,0BAA0B,0DAAY;AACtC,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA,oBAAoB;AACpB,sBAAsB;AACtB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,oCAAoC,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,eAAe;AACnC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,uBAAuB,6BAA6B;AACpD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,oCAAoC;AACzD;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,YAAY,8BAA8B;AAC1C;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mCAAmC;AAC3D;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,4CAA4C,+DAAwB,CAAC,+DAAwB,GAAG;AAC9K,gCAAgC,+DAAwB,EAAE,4LAA4L;AACtP,QAAQ,yDAAkB;AAC1B,KAAK,EAAE,WAAW,maAAma,YAAY,+GAA+G,knCAAknC;AAClqD,QAAQ,4DAAqB;AAC7B,QAAQ,wDAAiB,uFAAuF,sCAAsC,EAAE,oGAAoG,oCAAoC,EAAE;AAClS,QAAQ,wDAAiB;AACzB,QAAQ,0DAAmB;AAC3B,KAAK;AACL,QAAQ,yDAAkB;AAC1B,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,KAAK,EAAE,2BAA2B,6BAA6B,uDAAc,EAAE,uDAAc;AAC7F;AACA;AACA,4BAA4B,EAAE,wCAAwC;AACtE;AACA;AACA,KAAK,OAAO,+DAAiB;AAC7B;AACA;AACA,yBAAyB,OAAO,mDAAK,EAAE;AACvC,0BAA0B,OAAO,mDAAK,EAAE;AACxC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,4BAA4B,OAAO,mDAAK,EAAE;AAC1C,kBAAkB,OAAO,mDAAK,EAAE;AAChC,aAAa,OAAO,mDAAK,EAAE;AAC3B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,uBAAuB,OAAO,mDAAK,EAAE;AACrC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,oBAAoB,OAAO,yDAAW,2BAA2B,GAAG,OAAO,mDAAK,EAAE;AAClF,eAAe,OAAO,mDAAK,EAAE;AAC7B,eAAe,OAAO,mDAAK,EAAE;AAC7B,YAAY,OAAO,oDAAM,EAAE;AAC3B,eAAe,OAAO,oDAAM,EAAE;AAC9B,cAAc,OAAO,oDAAM,EAAE;AAC7B,cAAc,OAAO,oDAAM,EAAE;AAC7B,yBAAyB,OAAO,oDAAM,EAAE;AACxC,mBAAmB,OAAO,yDAAW,0BAA0B;AAC/D;AACA,WAAW,EAsDV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,KAAK;AACV;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA,oCAAoC,0DAAY;AAChD;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA,4BAA4B,oDAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,8DAA8D,EAAE;AAChE;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,kEAAkE,EAAE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,yBAAyB,gBAAgB;AACzC,oCAAoC,uDAAuD;AAC3F;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB,aAAa;AACnC,oCAAoC,kDAAkD;AACtF;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,qBAAqB,8BAA8B;AACnD,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mCAAmC;AACnC,SAAS;AACT;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,uCAAuC,cAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA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AG,EAAE,EAAE;AAChB,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,eAAe;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,+DAAwB,EAAE,EAAE,EAAE,GAAG;AACvE,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,yDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,yDAAW;AAC7B;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACv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,gBAAgB;AACjE,SAAS;AACT,kBAAkB,0DAAY;AAC9B,mDAAmD,gBAAgB;AACnE,SAAS;AACT,kBAAkB,0DAAY;AAC9B,8CAA8C,gBAAgB;AAC9D,SAAS;AACT,kBAAkB,uDAAS;AAC3B,4CAA4C,gBAAgB;AAC5D,SAAS;AACT,kBAAkB,uDAAS;AAC3B,8CAA8C,gBAAgB;AAC9D,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAoWV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,wBAAwB,0DAAY;AACpC,0BAA0B,0DAAY;AACtC,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAA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C,uBAAuB,OAAO,mDAAK,EAAE;AACrC,YAAY,OAAO,oDAAM,EAAE;AAC3B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,kBAAkB,oCAAoC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,yCAAyC,mCAAmC,GAAG,mBAAmB;AAClG,UAAU,8BAA8B,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,iCAAiC,qEAAuB;AACxD,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EA2BV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA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vB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAmBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,sEAAsE,0CAA0C;AAChH,4BAA4B,+DAAwB,EAAE,uOAAuO;AAC7R,QAAQ,4DAAqB;AAC7B,QAAQ,4DAAqB;AAC7B,QAAQ,uDAAgB;AACxB,QAAQ,0DAAmB;AAC3B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC,8BAA8B,0DAAY;AAC1C;AACA,oBAAoB;AACpB,sBAAsB;AACtB;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,IAAI;AAC/B;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,sBAAsB,cAAc;AACpC;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AAC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iC,qEAAuB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,UAAU,OAAO,+DAAwB,EAAE,GAAG,OAAO,6DAAsB,EAAE,EAAE,EAAE,GAAG;AACzG,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EA8CV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA,4BAA4B,0DAAY;AACxC,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,kFAAkF,8CAA8C,+DAAwB,CAAC,wDAAiB,GAAG,+DAAwB,CAAC,+DAAwB,GAAG;AACjO,kCAAkC,+DAAwB,EA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SAAS;AACT,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,uDAAS;AAC3B,oCAAoC,OAAO,8DAAgB,gBAAgB;AAC3E,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EA8EV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,mBAAmB,iBAAiB;AACpC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,kBAAkB;AAClB,WAAW,EAaV;AACD;AACA;AACA,4BAA4B,0DAAY;AACxC,0BAA0B,0DAAY;AACtC;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,mBAAmB;AAClC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,UAAU,eAAe,EAAE;AAC1C,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA,oFAAoF,iDAAiD;AACrI,mCAAmC,+DAAwB,EAAE,mFAAmF,6JAA6J,YAAY,yCAAyC,gHAAgH;AACld,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,KAAK,EAAE,wCAAwC;AAC/C;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,qBAAqB,OAAO,mDAAK,EAAE;AACnC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,gBAAgB,OAAO,oDAAM,EAAE;AAC/B,cAAc,OAAO,oDAAM,EAAE;AAC7B;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA,iCAAiC,qEAAuB;AACxD,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,oDAAM;AACxB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAmBV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,WAAW,EASV;AACD;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,gCAAgC,QAAQ,oCAAoC;AAC5E;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,kDAAkD;AACxI,oCAAoC,+DAAwB,EAAE,+HAA+H,yGAAyG,aAAa,kEAA2B,sSAAsS;AACpnB,QAAQ,wDAAiB;AACzB,KAAK;AACL,QAAQ,wDAAiB;AACzB,KAAK,EAAE,eAAe,oDAAW,gDAAgD;AACjF;AACA,YAAY,OAAO,mDAAK,EAAE;AAC1B,eAAe,OAAO,mDAAK,EAAE;AAC7B,iBAAiB,OAAO,mDAAK,EAAE;AAC/B,eAAe,OAAO,mDAAK,EAAE;AAC7B,kBAAkB,OAAO,mDAAK,EAAE;AAChC;AACA,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,uDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;AAChB,WAAW,EAeV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,yBAAyB,oDAAoD;AAC7E;AACA;AACA;AACA,0BAA0B,8DAAuB,EAAE,2BAA2B;AAC9E,0BAA0B,8DAAuB,EAAE,kDAAkD,wCAAwC,EAAE,mFAAmF,4DAAY,IAAI;AAClP,cAAc,oDAAoD,gEAAyB,sBAAsB,4BAA4B;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,EAAE,wBAAwB,SAAS,4DAAY,EAAE,EAAE,wBAAwB;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE,EAAE,EAAE,EAAE;AACvD,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA,0BAA0B,4DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;AACtB;AACA;AACA;AACA;AACA,gCAAgC;AAChC,WAAW,EAGV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EA8MV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA,wBAAwB;AACxB,WAAW,EAKV;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0CAA0C,k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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAa;AAChD;AACA,2BAA2B,gDAAO;AAClC;AACA;AACA;AACA,mBAAmB,sDAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,2CAA2C;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA,mBAAmB,eAAe;AAClC;AACA;AACA;AACA;AACA,+BAA+B,sDAAU;AACzC;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,0CAA0C,4DAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;AChNA;AA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","file":"default~auths-auths-module~client-client-module~major-image-management-image-management-module~sys_c~e962d88a-es2015.js","sourcesContent":["import {Component, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\n@Component({\n  selector: 'ngx-inline-message',\n  templateUrl: './inline-message.component.html',\n  styleUrls: ['./inline-message.component.scss']\n})\nexport class InlineMessageComponent implements OnInit {\n  @Input() formName: FormControl;\n  @Input() message;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div *ngIf=\"formName.invalid&&formName.touched\">\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.required\">\n    {{'validation.required' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.minlength\">\n    {{'validation.minLength' | translate:{field: (message|translate) , value: formName.errors.minlength.requiredLength} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.maxlength\">\n    {{'validation.maxLength' | translate:{field: (message|translate) , value: formName.errors.maxlength.requiredLength} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.pattern\">\n    {{'validation.pattern' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.onlyNaturalNumber\">\n    {{'validation.onlyNaturalNumber' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.space\">\n    {{'validation.space' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.onlyNumber\">\n    {{'validation.onlyNumber' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.onlyDoubleNumber\">\n    {{'validation.onlyDoubleNumber' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.onlyCharacter\">\n    {{'validation.onlyCharacter' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.mustMatch\">\n    {{'validation.mustMatch' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.passwordMustMatchChange\">\n    {{'validation.mustMatch' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.email\">\n    {{'validation.email' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.existCheck\">\n    {{'validation.existCheck' | translate:{field: (message|translate)} }}\n  </small>\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.date\">\n    {{'validation.date' | translate:{field: (message|translate)} }}\n  </small>\n</div>\n<div *ngIf=\"formName.invalid\">\n  <small class=\"form-text text-danger\" *ngIf=\"formName.errors.mustSameUnit\">\n    {{'validation.mustSameUnit' | translate:{field: (message|translate)} }}\n  </small>\n</div>\n","import { AjaxObservable } from './AjaxObservable';\nexport const ajax = (() => AjaxObservable.create)();\n//# sourceMappingURL=ajax.js.map","import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _supportsShadowDom } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Template that can be used to create a drag preview element.\n * @record\n * @template T\n */\nfunction DragPreviewTemplate() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragPreviewTemplate.prototype.matchSize;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     * @return {?}\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n            this._initialContainer = this._dropContainer;\n            this._initialIndex = this._dropContainer.getItemIndex(this);\n        }\n        else {\n            this._initialContainer = this._initialIndex = (/** @type {?} */ (undefined));\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        /** @type {?} */\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y, \n                // If we're re-entering the initial container,\n                // put item the into its starting index to begin with.\n                newContainer === this._initialContainer ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if ((/** @type {?} */ (previewConfig)).matchSize) {\n                matchElementSize(preview, this._rootElement);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Index at which the item started in its initial container.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialIndex;\n    /**\n     * Cached scroll position on the page when the element was picked up.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollPosition;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        /** @type {?} */\n        const wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return (/** @type {?} */ (rootNode));\n}\n/**\n * Matches the target element's size to the source's size.\n * @param {?} target Element that needs to be resized.\n * @param {?} source Element whose size needs to be matched.\n * @return {?}\n */\nfunction matchElementSize(target, source) {\n    /** @type {?} */\n    const sourceRect = source.getBoundingClientRect();\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Cached positions of the scrollable parent elements.\n         */\n        this._parentPositions = new Map();\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || ((/** @type {?} */ (styles))).scrollSnapType || '';\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?=} index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 11.0.0 `previousIndex` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @param {?=} previousIndex Index of the item when dragging started.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} elements Elements that can be scrolled.\n     * @return {THIS}\n     */\n    withScrollableParents(elements) {\n        /** @type {?} */\n        const element = coerceElement((/** @type {?} */ (this)).element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        (/** @type {?} */ (this))._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !isPointerNearClientRect(this._clientRect, pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.forEach((/**\n         * @param {?} position\n         * @param {?} element\n         * @return {?}\n         */\n        (position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections((/** @type {?} */ (element)), position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = (/** @type {?} */ (element));\n                }\n            }\n        }));\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the positions of the configured scrollable parents.\n     * @private\n     * @return {?}\n     */\n    _cacheParentPositions() {\n        this._parentPositions.clear();\n        this._parentPositions.set(this._document, {\n            scrollPosition: (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition(),\n        });\n        this._scrollableElements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => {\n            /** @type {?} */\n            const clientRect = getMutableClientRect(element);\n            // We keep the ClientRect cached in two properties, because it's referenced in a lot of\n            // performance-sensitive places and we want to avoid the extra lookups. The `element` is\n            // guaranteed to always be in the `_scrollableElements` so this should always match.\n            if (element === this.element) {\n                this._clientRect = clientRect;\n            }\n            this._parentPositions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect\n            });\n        }));\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrolledParent Element that was scrolled.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @return {?}\n     */\n    _updateAfterScroll(scrolledParent, newTop, newLeft) {\n        /** @type {?} */\n        const scrollPosition = (/** @type {?} */ (this._parentPositions.get(scrolledParent))).scrollPosition;\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this._parentPositions.forEach((/**\n         * @param {?} position\n         * @param {?} node\n         * @return {?}\n         */\n        (position, node) => {\n            if (position.clientRect && scrolledParent !== node && scrolledParent.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        }));\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const target = (/** @type {?} */ (event.target));\n                /** @type {?} */\n                const position = this._parentPositions.get(target);\n                if (position) {\n                    /** @type {?} */\n                    let newTop;\n                    /** @type {?} */\n                    let newLeft;\n                    if (target === this._document) {\n                        /** @type {?} */\n                        const scrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                        newTop = scrollPosition.top;\n                        newLeft = scrollPosition.left;\n                    }\n                    else {\n                        newTop = ((/** @type {?} */ (target))).scrollTop;\n                        newLeft = ((/** @type {?} */ (target))).scrollLeft;\n                    }\n                    this._updateAfterScroll(target, newTop, newLeft);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            this._cachedShadowRoot = getShadowRoot(coerceElement(this.element)) || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Cached positions of the scrollable parent elements.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._parentPositions;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Elements that can be scrolled while the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollableElements;\n    /**\n     * Initial value for the element's `scroll-snap-type` style.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._initialScrollSnap;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param {?} rect ClientRect to check against.\n * @param {?} pointerX Coordinates along the X axis.\n * @param {?} pointerY Coordinates along the Y axis.\n * @return {?}\n */\nfunction isPointerNearClientRect(rect, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    /** @type {?} */\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    /** @type {?} */\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * Gets the shadow root of an element, if any.\n * @param {?} element\n * @return {?}\n */\nfunction getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        if (rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /**\n     * Whether the preview should preserve the same size as the item that is being dragged.\n     * @return {?}\n     */\n    get matchSize() { return this._matchSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" } });\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragPreview.ngAcceptInputType_matchSize;\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragPreview.prototype._matchSize;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n * @record\n */\nfunction DragDropConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.lockAxis;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.dragStartDelay;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.constrainPosition;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.previewClass;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.boundaryElement;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.rootElementSelector;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.draggingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.sortingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listAutoScrollDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listOrientation;\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     * @param {?=} _scrollDispatcher\n     * @param {?=} config\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group, _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n        if (this._scrollDispatcher) {\n            /** @type {?} */\n            const scrollableParents = this._scrollDispatcher\n                .getAncestorScrollContainers(this.element)\n                .map((/**\n             * @param {?} scrollable\n             * @return {?}\n             */\n            scrollable => scrollable.getElementRef().nativeElement));\n            this._dropListRef.withScrollableParents(scrollableParents);\n        }\n    }\n    /**\n     * Registers an items with the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Removes an item from the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Gets the registered items in the list, sorted by their position in the DOM.\n     * @return {?}\n     */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            /** @type {?} */\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /**\n     * Syncs up the registered drag items with underlying drop list ref.\n     * @private\n     * @return {?}\n     */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._dragRef)));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._unsortedItems;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * \\@breaking-change 11.0.0\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import {Component, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\nimport {isNil} from 'lodash';\nimport {TreeviewItem} from './treeview-item';\nimport {TreeviewConfig} from './treeview-config';\nimport {TreeviewItemTemplateContext} from './treeview-item-template-context';\nimport {CdkDragEnter} from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'ngx-treeview-item',\n  templateUrl: './treeview-item.component.html',\n  styleUrls: ['./treeview-item.component.scss']\n})\nexport class TreeviewItemComponent {\n  @Input() config: TreeviewConfig;\n  @Input() template: TemplateRef<TreeviewItemTemplateContext>;\n  @Input() item: TreeviewItem;\n  @Output() checkedChange = new EventEmitter<boolean>();\n  @Output() dropChange = new EventEmitter<any>();\n\n  constructor(\n    private defaultConfig: TreeviewConfig\n  ) {\n    this.config = this.defaultConfig;\n  }\n\n  onCollapseExpand = () => {\n    this.item.collapsed = !this.item.collapsed;\n  }\n\n  onCheckedChange = () => {\n    const checked = this.item.checked;\n    if (!isNil(this.item.children) && !this.config.decoupleChildFromParent) {\n      this.item.children.forEach(child => child.setCheckedRecursive(checked));\n    }\n    this.checkedChange.emit(checked);\n  }\n  @Input() hasDrag: boolean;\n\n  onChildCheckedChange(child: TreeviewItem, checked: boolean) {\n    if (!this.config.decoupleChildFromParent) {\n      let itemChecked: boolean = null;\n      for (const childItem of this.item.children) {\n        if (itemChecked === null) {\n          itemChecked = childItem.checked;\n        } else if (itemChecked !== childItem.checked) {\n          itemChecked = undefined;\n          break;\n        }\n      }\n\n      if (itemChecked === null) {\n        itemChecked = false;\n      }\n\n      if (this.item.checked !== itemChecked) {\n        this.item.checked = itemChecked;\n      }\n\n    }\n\n    this.checkedChange.emit(checked);\n  }\n\n  drop(event: any) {\n    if (event.container.data  === event.item.data || !event.container.data) return\n    else {\n      const data = {\n        dragData: event.item.data.value,\n        dropListData: event.container.data.value\n      }\n      this.dropChange.emit(data)\n    }\n  }\n\n  onDrop($event: any) {\n    this.dropChange.emit($event)\n  }\n}\n","<div *ngIf=\"item\" class=\"treeview-item\"  cdkDropList (cdkDropListDropped)=\"drop($event)\"  [cdkDropListData]=\"item\"  >\n  <div cdkDrag [cdkDragData]=\"item\"   [cdkDragDisabled]=\"item?.value?.isDefault || !hasDrag\">\n    <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\">\n    </ng-template>\n    <div class=\"example-custom-placeholder\" *cdkDragPlaceholder>\n      <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\">\n      </ng-template>\n    </div>\n  </div>\n\n</div>\n<div *ngIf=\"!item.collapsed\" style=\"margin-left: 20px\">\n  <ngx-treeview-item [hasDrag]=\"hasDrag\" (dropChange)=\"onDrop($event)\" [config]=\"config\" *ngFor=\"let child of item.children\" [item]=\"child\" [template]=\"template\" (checkedChange)=\"onChildCheckedChange(child, $event)\">\n  </ngx-treeview-item>\n</div>\n","import { Directive, ElementRef } from '@angular/core';\nimport { DropdownDirective } from './dropdown.directive';\n\n@Directive({\n    selector: '[ngxDropdownToggle]',\n    // tslint:disable-next-line:use-host-property-decorator\n    host: {\n        'class': 'dropdown-toggle',\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'dropdown.isOpen',\n        '(click)': 'dropdown.toggle()'\n    }\n})\nexport class DropdownToggleDirective {\n    constructor(\n        public dropdown: DropdownDirective,\n        elementRef: ElementRef\n    ) {\n        dropdown.toggleElement = elementRef.nativeElement;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { TreeviewItem, TreeviewSelection } from 'ngx-treeview';\n\n@Injectable()\nexport class DropdownTreeviewSelectI18n  {\n  private internalSelectedItem: TreeviewItem;\n\n  set selectedItem(value: TreeviewItem) {\n    this.internalSelectedItem = value;\n  }\n\n  get selectedItem(): TreeviewItem {\n    return this.internalSelectedItem;\n  }\n\n  getText(selection: TreeviewSelection): string {\n    return this.internalSelectedItem ? this.internalSelectedItem.text : 'Chọn giá trị';\n  }\n  getAllCheckboxText(): string {\n    return 'Tất cả';\n  }\n\n  getFilterPlaceholder(): string {\n    return 'Gõ để tìm kiếm';\n  }\n\n  getFilterNoItemsFoundText(): string {\n    return 'Không tìm thấy dữ liệu phù hợp';\n  }\n}\n","import { Observable } from '../Observable';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nimport { scheduleIterable } from '../scheduled/scheduleIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return scheduleIterable(input, scheduler);\n    }\n}\n//# sourceMappingURL=fromIterable.js.map","import { Injectable } from '@angular/core';\nimport { TreeviewItem, TreeviewSelection } from './treeview-item';\n\n@Injectable()\nexport abstract class TreeviewI18n {\n    abstract getText(selection: TreeviewSelection): string;\n    abstract getAllCheckboxText(): string;\n    abstract getFilterPlaceholder(): string;\n    abstract getFilterNoItemsFoundText(): string;\n    abstract getTooltipCollapseExpandText(isCollapse: boolean): string;\n}\n\n@Injectable()\nexport class TreeviewI18nDefault extends TreeviewI18n {\n    getText(selection: TreeviewSelection): string {\n    if (selection.uncheckedItems.length === 0) {\n      return this.getAllCheckboxText();\n    }\n\n    switch (selection.checkedItems.length) {\n      case 0:\n        return 'Chọn để tìm kiếm';\n      case 1:\n        return selection.checkedItems[0].text;\n      default:\n        return `${selection.checkedItems.length} giá trị được chọn`;\n    }\n  }\n\n    getAllCheckboxText(): string {\n        return 'Tất cả';\n    }\n\n    getFilterPlaceholder(): string {\n        return 'Gõ để tìm kiếm';\n    }\n\n    getFilterNoItemsFoundText(): string {\n        return 'Không tìm thấy dữ liệu phù hợp';\n    }\n\n    getTooltipCollapseExpandText(isCollapse: boolean): string {\n        return isCollapse ? 'Expand' : 'Collapse';\n    }\n}\n","import {isBoolean, isNil, isString} from 'lodash';\nimport {TreeviewHelper} from './treeview-helper';\n\nexport interface TreeviewSelection {\n  checkedItems: TreeviewItem[];\n  uncheckedItems: TreeviewItem[];\n}\n\nexport interface TreeItem {\n  text: string;\n  value: any;\n  disabled?: boolean;\n  checked?: boolean;\n  collapsed?: boolean;\n  children?: TreeItem[];\n}\n\n\nexport class TreeviewItem {\n  private internalDisabled = false;\n  private internalChecked = true;\n  private internalCollapsed = false;\n  private internalChildren: TreeviewItem[];\n  text: string;\n  value: any;\n\n  constructor(item: TreeItem, autoCorrectChecked = false) {\n    if (isNil(item)) {\n      throw new Error('Item must be defined');\n    }\n    if (isString(item.text)) {\n      this.text = item.text;\n    } else {\n      throw new Error('A text of item must be string object');\n    }\n    this.value = item.value;\n    if (isBoolean(item.checked)) {\n      this.checked = item.checked;\n    }\n    if (isBoolean(item.collapsed)) {\n      this.collapsed = item.collapsed;\n    }\n    if (isBoolean(item.disabled)) {\n      this.disabled = item.disabled;\n    }\n    if (!isNil(item.children) && item.children.length > 0) {\n      this.children = item.children.map(child => {\n        if (this.disabled === true) {\n          child.disabled = true;\n        }\n\n        return new TreeviewItem(child);\n      });\n    }\n\n    if (autoCorrectChecked) {\n      this.correctChecked();\n    }\n  }\n\n  get checked(): boolean {\n    return this.internalChecked;\n  }\n\n  set checked(value: boolean) {\n    if (!this.internalDisabled) {\n      if (this.internalChecked !== value) {\n        this.internalChecked = value;\n      }\n    }\n  }\n\n  get indeterminate(): boolean {\n    return this.checked === undefined;\n  }\n\n  setCheckedRecursive(value: boolean) {\n    if (!this.internalDisabled) {\n      this.internalChecked = value;\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(child => child.setCheckedRecursive(value));\n      }\n    }\n  }\n\n  get disabled(): boolean {\n    return this.internalDisabled;\n  }\n\n  set disabled(value: boolean) {\n    if (this.internalDisabled !== value) {\n      this.internalDisabled = value;\n      if (!isNil(this.internalChildren)) {\n        this.internalChildren.forEach(child => child.disabled = value);\n      }\n    }\n  }\n\n  get collapsed(): boolean {\n    return this.internalCollapsed;\n  }\n\n  set collapsed(value: boolean) {\n    if (this.internalCollapsed !== value) {\n      this.internalCollapsed = value;\n    }\n  }\n\n  setCollapsedRecursive(value: boolean) {\n    this.internalCollapsed = value;\n    if (!isNil(this.internalChildren)) {\n      this.internalChildren.forEach(child => child.setCollapsedRecursive(value));\n    }\n  }\n\n  get children(): TreeviewItem[] {\n    return this.internalChildren;\n  }\n\n  set children(value: TreeviewItem[]) {\n    if (this.internalChildren !== value) {\n      if (!isNil(value) && value.length === 0) {\n        throw new Error('Children must be not an empty array');\n      }\n      this.internalChildren = value;\n      if (!isNil(this.internalChildren)) {\n        let checked = null;\n        this.internalChildren.forEach(child => {\n          if (checked === null) {\n            checked = child.checked;\n          } else {\n            if (child.checked !== checked) {\n              checked = undefined;\n              return;\n            }\n          }\n        });\n        this.internalChecked = checked;\n      }\n    }\n  }\n\n  getSelection(): TreeviewSelection {\n    let checkedItems: TreeviewItem[] = [];\n    let uncheckedItems: TreeviewItem[] = [];\n    if (isNil(this.internalChildren)) {\n      if (this.internalChecked) {\n        checkedItems.push(this);\n      } else {\n        uncheckedItems.push(this);\n      }\n    } else {\n      const selection = TreeviewHelper.concatSelection(this.internalChildren, checkedItems, uncheckedItems);\n      checkedItems = selection.checked;\n      uncheckedItems = selection.unchecked;\n    }\n\n    return {\n      checkedItems: checkedItems,\n      uncheckedItems: uncheckedItems\n    };\n  }\n\n  correctChecked() {\n    this.internalChecked = this.getCorrectChecked();\n  }\n\n  private getCorrectChecked(): boolean {\n    let checked: boolean = null;\n    if (!isNil(this.internalChildren)) {\n      for (const child of this.internalChildren) {\n        child.internalChecked = child.getCorrectChecked();\n        if (checked === null) {\n          checked = child.internalChecked;\n        } else if (checked !== child.internalChecked) {\n          checked = undefined;\n          break;\n        }\n      }\n    } else {\n      checked = this.checked;\n    }\n\n    return checked;\n  }\n}\n","export function applyMixins(derivedCtor, baseCtors) {\n    for (let i = 0, len = baseCtors.length; i < len; i++) {\n        const baseCtor = baseCtors[i];\n        const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            const name = propertyKeys[j];\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        }\n    }\n}\n//# sourceMappingURL=applyMixins.js.map","import {AfterViewInit, Component, Input, OnInit} from '@angular/core';\nimport {NbDialogRef} from '@nebular/theme';\n\n@Component({\n  selector: 'ngx-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent implements OnInit, AfterViewInit {\n  @Input() title?: string = 'Thông báo'\n  @Input() message: string\n  @Input() okTitle?: string = 'Đồng ý'\n  @Input() cancelTitle?: string = 'Huỷ';\n  @Input() hideCancel?;\n\n  constructor(protected ref: NbDialogRef<ConfirmDialogComponent>) {\n  }\n\n  ngOnInit() {\n  }\n\n  ngAfterViewInit() {\n    const cancelBtn = document.getElementById('dialogCancelBtn');\n    if (cancelBtn) {\n      cancelBtn.focus();\n    }\n  }\n\n  close() {\n    this.ref.close()\n  }\n\n  save() {\n    this.ref.close('confirm');\n  }\n}\n","<nb-card>\n  <nb-card-header><h5>{{ title }}</h5></nb-card-header>\n  <nb-card-body>\n    <div>\n      <h6 style=\"font-weight: 400\">{{message}}</h6>\n    </div>\n  </nb-card-body>\n  <nb-card-footer>\n    <div class=\"text-right\">\n      <button *ngIf=\"!hideCancel\" nbButton type=\"button\" status=\"warning\" (click)=\"close()\"\n              id=\"dialogCancelBtn\">{{ cancelTitle }}</button>\n      <button  type=\"button\" status=\"success\" nbButton (click)=\"save()\" class=\"ml-2\">{{ okTitle }}</button>\n    </div>\n  </nb-card-footer>\n</nb-card>\n","import { root } from '../../util/root';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { map } from '../../operators/map';\nfunction getCORSRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else if (!!root.XDomainRequest) {\n        return new root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root.XMLHttpRequest) {\n        return new root.XMLHttpRequest();\n    }\n    else {\n        let progId;\n        try {\n            const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (let i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nexport function ajaxGet(url, headers = null) {\n    return new AjaxObservable({ method: 'GET', url, headers });\n}\nexport function ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url, body, headers });\n}\nexport function ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url, headers });\n}\nexport function ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url, body, headers });\n}\nexport function ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url, body, headers });\n}\nconst mapResponse = map((x, index) => x.response);\nexport function ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url,\n        responseType: 'json',\n        headers\n    }));\n}\nexport class AjaxObservable extends Observable {\n    constructor(urlOrRequest) {\n        super();\n        const request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest() : getXMLHttpRequest();\n            },\n            crossDomain: true,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (const prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    _subscribe(subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    }\n}\nAjaxObservable.create = (() => {\n    const create = (urlOrRequest) => {\n        return new AjaxObservable(urlOrRequest);\n    };\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n    return create;\n})();\nexport class AjaxSubscriber extends Subscriber {\n    constructor(destination, request) {\n        super(destination);\n        this.request = request;\n        this.done = false;\n        const headers = request.headers = request.headers || {};\n        if (!request.crossDomain && !this.getHeader(headers, 'X-Requested-With')) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        let contentTypeHeader = this.getHeader(headers, 'Content-Type');\n        if (!contentTypeHeader && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        request.body = this.serializeBody(request.body, this.getHeader(request.headers, 'Content-Type'));\n        this.send();\n    }\n    next(e) {\n        this.done = true;\n        const { xhr, request, destination } = this;\n        let result;\n        try {\n            result = new AjaxResponse(e, xhr, request);\n        }\n        catch (err) {\n            return destination.error(err);\n        }\n        destination.next(result);\n    }\n    send() {\n        const { request, request: { user, method, url, async, password, headers, body } } = this;\n        try {\n            const xhr = this.xhr = request.createXHR();\n            this.setupEvents(xhr, request);\n            if (user) {\n                xhr.open(method, url, async, user, password);\n            }\n            else {\n                xhr.open(method, url, async);\n            }\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            this.setHeaders(xhr, headers);\n            if (body) {\n                xhr.send(body);\n            }\n            else {\n                xhr.send();\n            }\n        }\n        catch (err) {\n            this.error(err);\n        }\n    }\n    serializeBody(body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root.FormData && body instanceof root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            const splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    }\n    setHeaders(xhr, headers) {\n        for (let key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    }\n    getHeader(headers, headerName) {\n        for (let key in headers) {\n            if (key.toLowerCase() === headerName.toLowerCase()) {\n                return headers[key];\n            }\n        }\n        return undefined;\n    }\n    setupEvents(xhr, request) {\n        const progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            const { subscriber, progressSubscriber, request } = xhrTimeout;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            let error;\n            try {\n                error = new AjaxTimeoutError(this, request);\n            }\n            catch (err) {\n                error = err;\n            }\n            subscriber.error(error);\n        }\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                let xhrProgress;\n                xhrProgress = function (e) {\n                    const { progressSubscriber } = xhrProgress;\n                    progressSubscriber.next(e);\n                };\n                if (root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress;\n                }\n                xhrProgress.progressSubscriber = progressSubscriber;\n            }\n            let xhrError;\n            xhrError = function (e) {\n                const { progressSubscriber, subscriber, request } = xhrError;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                let error;\n                try {\n                    error = new AjaxError('ajax error', this, request);\n                }\n                catch (err) {\n                    error = err;\n                }\n                subscriber.error(error);\n            };\n            xhr.onerror = xhrError;\n            xhrError.request = request;\n            xhrError.subscriber = this;\n            xhrError.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            return;\n        }\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n        function xhrLoad(e) {\n            const { subscriber, progressSubscriber, request } = xhrLoad;\n            if (this.readyState === 4) {\n                let status = this.status === 1223 ? 204 : this.status;\n                let response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                if (status === 0) {\n                    status = response ? 200 : 0;\n                }\n                if (status < 400) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    let error;\n                    try {\n                        error = new AjaxError('ajax error ' + status, this, request);\n                    }\n                    catch (err) {\n                        error = err;\n                    }\n                    subscriber.error(error);\n                }\n            }\n        }\n        xhr.onload = xhrLoad;\n        xhrLoad.subscriber = this;\n        xhrLoad.progressSubscriber = progressSubscriber;\n        xhrLoad.request = request;\n    }\n    unsubscribe() {\n        const { done, xhr } = this;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        super.unsubscribe();\n    }\n}\nexport class AjaxResponse {\n    constructor(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n}\nconst AjaxErrorImpl = (() => {\n    function AjaxErrorImpl(message, xhr, request) {\n        Error.call(this);\n        this.message = message;\n        this.name = 'AjaxError';\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n        return this;\n    }\n    AjaxErrorImpl.prototype = Object.create(Error.prototype);\n    return AjaxErrorImpl;\n})();\nexport const AjaxError = AjaxErrorImpl;\nfunction parseJson(xhr) {\n    if ('response' in xhr) {\n        return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n    }\n    else {\n        return JSON.parse(xhr.responseText || 'null');\n    }\n}\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            return parseJson(xhr);\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\nfunction AjaxTimeoutErrorImpl(xhr, request) {\n    AjaxError.call(this, 'ajax timeout', xhr, request);\n    this.name = 'AjaxTimeoutError';\n    return this;\n}\nexport const AjaxTimeoutError = AjaxTimeoutErrorImpl;\n//# sourceMappingURL=AjaxObservable.js.map","import { Pipe, PipeTransform } from '@angular/core';\nimport { isNil } from 'lodash';\nimport { TreeviewItem } from './treeview-item';\n\n@Pipe({\n    name: 'ngxTreeview'\n})\nexport class TreeviewPipe implements PipeTransform {\n    transform(objects: any[], textField: string): TreeviewItem[] {\n        if (isNil(objects)) {\n            return undefined;\n        }\n\n        return objects.map(object => new TreeviewItem({ text: object[textField], value: object }));\n    }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TreeviewConfig {\n    hasAllCheckBox = true;\n    hasFilter = false;\n    hasCollapseExpand = false;\n    decoupleChildFromParent = false;\n    maxHeight = 500;\n\n    get hasDivider(): boolean {\n        return this.hasFilter || this.hasAllCheckBox || this.hasCollapseExpand;\n    }\n\n    public static create(fields?: {\n        hasAllCheckBox?: boolean,\n        hasFilter?: boolean,\n        hasCollapseExpand?: boolean,\n        decoupleChildFromParent?: boolean\n        maxHeight?: number,\n    }): TreeviewConfig {\n        const config = new TreeviewConfig();\n        Object.assign(config, fields);\n        return config;\n    }\n}\n","export const errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { DropdownDirective } from './dropdown.directive';\nimport { DropdownMenuDirective } from './dropdown-menu.directive';\nimport { DropdownToggleDirective } from './dropdown-toggle.directive';\nimport { DropdownTreeviewComponent } from './dropdown-treeview.component';\nimport { TreeviewComponent } from './treeview.component';\nimport { TreeviewItemComponent } from './treeview-item.component';\nimport { TreeviewPipe } from './treeview.pipe';\nimport { TreeviewI18n, TreeviewI18nDefault } from './treeview-i18n';\nimport { TreeviewConfig } from './treeview-config';\nimport { TreeviewEventParser, DefaultTreeviewEventParser } from './treeview-event-parser';\nimport {NbButtonModule, NbContextMenuModule, NbIconModule, NbPopoverModule, NbTooltipModule} from '@nebular/theme';\nimport { TreeviewCustomComponent } from './treeview-custom/treeview-custom.component'\nimport {DragDropModule} from '@angular/cdk/drag-drop';\n\n@NgModule({\n    imports: [\n        FormsModule,\n        CommonModule,\n        NbButtonModule,\n        NbPopoverModule,\n        NbTooltipModule,\n        NbIconModule,\n        NbContextMenuModule,\n        DragDropModule\n    ],\n    declarations: [\n        TreeviewComponent,\n        TreeviewItemComponent,\n        TreeviewPipe,\n        DropdownDirective,\n        DropdownMenuDirective,\n        DropdownToggleDirective,\n        DropdownTreeviewComponent,\n        TreeviewCustomComponent\n    ], exports: [\n        TreeviewComponent,\n        TreeviewPipe,\n        DropdownTreeviewComponent,\n        TreeviewCustomComponent\n    ]\n})\nexport class TreeviewModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: TreeviewModule,\n            providers: [\n                TreeviewConfig,\n                { provide: TreeviewI18n, useClass: TreeviewI18nDefault },\n                { provide: TreeviewEventParser, useClass: DefaultTreeviewEventParser }\n            ]\n        };\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { isNil } from 'lodash';\nimport { TreeviewItem } from './treeview-item';\nimport {TreeviewComponent} from './treeview.component';\n\n@Injectable()\nexport abstract class TreeviewEventParser {\n    abstract getSelectedChange(component: TreeviewComponent): any[];\n}\n\n@Injectable()\nexport class DefaultTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component: TreeviewComponent): any[] {\n        const checkedItems = component.selection.checkedItems;\n        if (!isNil(checkedItems)) {\n            // return checkedItems.map(item => item.value);\n            return checkedItems;\n        }\n\n        return [];\n    }\n}\n\nexport interface DownlineTreeviewItem {\n    item: TreeviewItem;\n    parent: DownlineTreeviewItem;\n}\n\n@Injectable()\nexport class DownlineTreeviewEventParser extends TreeviewEventParser {\n    getSelectedChange(component: TreeviewComponent): any[] {\n        const items = component.items;\n        if (!isNil(items)) {\n            let result: DownlineTreeviewItem[] = [];\n            items.forEach(item => {\n                const links = this.getLinks(item, null);\n                if (!isNil(links)) {\n                    result = result.concat(links);\n                }\n            });\n\n            return result;\n        }\n\n        return [];\n    }\n\n    private getLinks(item: TreeviewItem, parent: DownlineTreeviewItem): DownlineTreeviewItem[] {\n        if (!isNil(item.children)) {\n            const link = {\n                item: item,\n                parent: parent\n            };\n            let result: DownlineTreeviewItem[] = [];\n            item.children.forEach(child => {\n                const links = this.getLinks(child, link);\n                if (!isNil(links)) {\n                    result = result.concat(links);\n                }\n            });\n\n            return result;\n        }\n\n        if (item.checked) {\n            return [{\n                item: item,\n                parent: parent\n            }];\n        }\n\n        return null;\n    }\n}\n\n@Injectable()\nexport class OrderDownlineTreeviewEventParser extends TreeviewEventParser {\n    private currentDownlines: DownlineTreeviewItem[] = [];\n    private parser = new DownlineTreeviewEventParser();\n\n    getSelectedChange(component: TreeviewComponent): any[] {\n        const newDownlines: DownlineTreeviewItem[] = this.parser.getSelectedChange(component);\n        if (this.currentDownlines.length === 0) {\n            this.currentDownlines = newDownlines;\n        } else {\n            const intersectDownlines: DownlineTreeviewItem[] = [];\n            this.currentDownlines.forEach(downline => {\n                let foundIndex = -1;\n                const length = newDownlines.length;\n                for (let i = 0; i < length; i++) {\n                    if (downline.item.value === newDownlines[i].item.value) {\n                        foundIndex = i;\n                        break;\n                    }\n                }\n\n                if (foundIndex !== -1) {\n                    intersectDownlines.push(newDownlines[foundIndex]);\n                    newDownlines.splice(foundIndex, 1);\n                }\n            });\n\n            this.currentDownlines = intersectDownlines.concat(newDownlines);\n        }\n\n        return this.currentDownlines;\n    }\n}\n","import { Injectable, Inject, Directive, TemplateRef, EventEmitter, ElementRef, NgZone, HostBinding, Output, Input, Renderer2, HostListener, KeyValueDiffers, ContentChildren, Component, ChangeDetectionStrategy, ContentChild, ChangeDetectorRef, ViewChild, ViewEncapsulation, SkipSelf, Optional, ViewContainerRef, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { __decorate, __metadata } from 'tslib';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"*\"];\nfunction DataTableBodyComponent_datatable_progress_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"datatable-progress\");\n} }\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"datatable-summary-row\", 9);\n} if (rf & 2) {\n    const ctx_r239 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"rowHeight\", ctx_r239.summaryHeight)(\"offsetX\", ctx_r239.offsetX)(\"innerWidth\", ctx_r239.innerWidth)(\"rows\", ctx_r239.rows)(\"columns\", ctx_r239.columns);\n} }\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template(rf, ctx) { if (rf & 1) {\n    const _r249 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-body-row\", 13);\n    ɵngcc0.ɵɵlistener(\"treeAction\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_treeAction_0_listener() { ɵngcc0.ɵɵrestoreView(_r249); const group_r242 = ɵngcc0.ɵɵnextContext().$implicit; const ctx_r247 = ɵngcc0.ɵɵnextContext(2); return ctx_r247.onTreeAction(group_r242); })(\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r249); const i_r243 = ɵngcc0.ɵɵnextContext().index; const ctx_r250 = ɵngcc0.ɵɵnextContext(2); const _r235 = ɵngcc0.ɵɵreference(1); return _r235.onActivate($event, ctx_r250.indexes.first + i_r243); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const group_r242 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r244 = ɵngcc0.ɵɵnextContext(2);\n    const _r235 = ɵngcc0.ɵɵreference(1);\n    ɵngcc0.ɵɵproperty(\"isSelected\", _r235.getRowSelected(group_r242))(\"innerWidth\", ctx_r244.innerWidth)(\"offsetX\", ctx_r244.offsetX)(\"columns\", ctx_r244.columns)(\"rowHeight\", ctx_r244.getRowHeight(group_r242))(\"row\", group_r242)(\"rowIndex\", ctx_r244.getRowIndex(group_r242))(\"expanded\", ctx_r244.getRowExpanded(group_r242))(\"rowClass\", ctx_r244.rowClass)(\"displayCheck\", ctx_r244.displayCheck)(\"treeStatus\", group_r242.treeStatus);\n} }\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template(rf, ctx) { if (rf & 1) {\n    const _r257 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-body-row\", 15);\n    ɵngcc0.ɵɵlistener(\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template_datatable_body_row_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r257); const i_r255 = ctx.index; ɵngcc0.ɵɵnextContext(4); const _r235 = ɵngcc0.ɵɵreference(1); return _r235.onActivate($event, i_r255); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const row_r254 = ctx.$implicit;\n    const group_r242 = ɵngcc0.ɵɵnextContext(2).$implicit;\n    const ctx_r253 = ɵngcc0.ɵɵnextContext(2);\n    const _r235 = ɵngcc0.ɵɵreference(1);\n    ɵngcc0.ɵɵproperty(\"isSelected\", _r235.getRowSelected(row_r254))(\"innerWidth\", ctx_r253.innerWidth)(\"offsetX\", ctx_r253.offsetX)(\"columns\", ctx_r253.columns)(\"rowHeight\", ctx_r253.getRowHeight(row_r254))(\"row\", row_r254)(\"group\", group_r242.value)(\"rowIndex\", ctx_r253.getRowIndex(row_r254))(\"expanded\", ctx_r253.getRowExpanded(row_r254))(\"rowClass\", ctx_r253.rowClass);\n} }\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template, 1, 10, \"datatable-body-row\", 14);\n} if (rf & 2) {\n    const group_r242 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r246 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", group_r242.value)(\"ngForTrackBy\", ctx_r246.rowTrackingFn);\n} }\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template(rf, ctx) { if (rf & 1) {\n    const _r261 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-row-wrapper\", 10);\n    ɵngcc0.ɵɵlistener(\"rowContextmenu\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template_datatable_row_wrapper_rowContextmenu_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r261); const ctx_r260 = ɵngcc0.ɵɵnextContext(2); return ctx_r260.rowContextmenu.emit($event); });\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template, 1, 11, \"datatable-body-row\", 11);\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template, 1, 2, \"ng-template\", null, 12, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const group_r242 = ctx.$implicit;\n    const i_r243 = ctx.index;\n    const _r245 = ɵngcc0.ɵɵreference(3);\n    const ctx_r240 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"groupedRows\", ctx_r240.groupedRows)(\"innerWidth\", ctx_r240.innerWidth)(\"ngStyle\", ctx_r240.getRowsStyles(group_r242))(\"rowDetail\", ctx_r240.rowDetail)(\"groupHeader\", ctx_r240.groupHeader)(\"offsetX\", ctx_r240.offsetX)(\"detailRowHeight\", ctx_r240.getDetailRowHeight(group_r242[i_r243], i_r243))(\"row\", group_r242)(\"expanded\", ctx_r240.getRowExpanded(group_r242))(\"rowIndex\", ctx_r240.getRowIndex(group_r242[i_r243]));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r240.groupedRows)(\"ngIfElse\", _r245);\n} }\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"datatable-summary-row\", 16);\n} if (rf & 2) {\n    const ctx_r241 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r241.getBottomSummaryRowStyles())(\"rowHeight\", ctx_r241.summaryHeight)(\"offsetX\", ctx_r241.offsetX)(\"innerWidth\", ctx_r241.innerWidth)(\"rows\", ctx_r241.rows)(\"columns\", ctx_r241.columns);\n} }\nfunction DataTableBodyComponent_datatable_scroller_3_Template(rf, ctx) { if (rf & 1) {\n    const _r263 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-scroller\", 5);\n    ɵngcc0.ɵɵlistener(\"scroll\", function DataTableBodyComponent_datatable_scroller_3_Template_datatable_scroller_scroll_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r263); const ctx_r262 = ɵngcc0.ɵɵnextContext(); return ctx_r262.onBodyScroll($event); });\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template, 1, 5, \"datatable-summary-row\", 6);\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template, 4, 12, \"datatable-row-wrapper\", 7);\n    ɵngcc0.ɵɵtemplate(3, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template, 1, 6, \"datatable-summary-row\", 8);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r237 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"scrollbarV\", ctx_r237.scrollbarV)(\"scrollbarH\", ctx_r237.scrollbarH)(\"scrollHeight\", ctx_r237.scrollHeight)(\"scrollWidth\", ctx_r237.columnGroupWidths == null ? null : ctx_r237.columnGroupWidths.total);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r237.summaryRow && ctx_r237.summaryPosition === \"top\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r237.temp)(\"ngForTrackBy\", ctx_r237.rowTrackingFn);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r237.summaryRow && ctx_r237.summaryPosition === \"bottom\");\n} }\nfunction DataTableBodyComponent_div_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 17);\n} if (rf & 2) {\n    const ctx_r238 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r238.emptyMessage, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DataTableHeaderComponent_div_1_datatable_header_cell_1_Template(rf, ctx) { if (rf & 1) {\n    const _r269 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-header-cell\", 4);\n    ɵngcc0.ɵɵlistener(\"resize\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_resize_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r269); const column_r267 = ctx.$implicit; const ctx_r268 = ɵngcc0.ɵɵnextContext(2); return ctx_r268.onColumnResized($event, column_r267); })(\"longPressStart\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressStart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r269); const ctx_r270 = ɵngcc0.ɵɵnextContext(2); return ctx_r270.onLongPressStart($event); })(\"longPressEnd\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressEnd_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r269); const ctx_r271 = ɵngcc0.ɵɵnextContext(2); return ctx_r271.onLongPressEnd($event); })(\"sort\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_sort_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r269); const ctx_r272 = ɵngcc0.ɵɵnextContext(2); return ctx_r272.onSort($event); })(\"select\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r269); const ctx_r273 = ɵngcc0.ɵɵnextContext(2); return ctx_r273.select.emit($event); })(\"columnContextmenu\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_columnContextmenu_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r269); const ctx_r274 = ɵngcc0.ɵɵnextContext(2); return ctx_r274.columnContextmenu.emit($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r267 = ctx.$implicit;\n    const ctx_r266 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"resizeEnabled\", column_r267.resizeable)(\"pressModel\", column_r267)(\"pressEnabled\", ctx_r266.reorderable && column_r267.draggable)(\"dragX\", ctx_r266.reorderable && column_r267.draggable && column_r267.dragging)(\"dragY\", false)(\"dragModel\", column_r267)(\"dragEventTarget\", ctx_r266.dragEventTarget)(\"headerHeight\", ctx_r266.headerHeight)(\"isTarget\", column_r267.isTarget)(\"targetMarkerTemplate\", ctx_r266.targetMarkerTemplate)(\"targetMarkerContext\", column_r267.targetMarkerContext)(\"column\", column_r267)(\"sortType\", ctx_r266.sortType)(\"sorts\", ctx_r266.sorts)(\"selectionType\", ctx_r266.selectionType)(\"sortAscendingIcon\", ctx_r266.sortAscendingIcon)(\"sortDescendingIcon\", ctx_r266.sortDescendingIcon)(\"allRowsSelected\", ctx_r266.allRowsSelected);\n} }\nfunction DataTableHeaderComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵtemplate(1, DataTableHeaderComponent_div_1_datatable_header_cell_1_Template, 1, 18, \"datatable-header-cell\", 3);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const colGroup_r265 = ctx.$implicit;\n    const ctx_r264 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(\"datatable-row-\" + colGroup_r265.type);\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r264._styleByGroup[colGroup_r265.type]);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", colGroup_r265.columns)(\"ngForTrackBy\", ctx_r264.columnTrackingFn);\n} }\nfunction DatatableComponent_datatable_header_1_Template(rf, ctx) { if (rf & 1) {\n    const _r278 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-header\", 4);\n    ɵngcc0.ɵɵlistener(\"sort\", function DatatableComponent_datatable_header_1_Template_datatable_header_sort_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r278); const ctx_r277 = ɵngcc0.ɵɵnextContext(); return ctx_r277.onColumnSort($event); })(\"resize\", function DatatableComponent_datatable_header_1_Template_datatable_header_resize_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r278); const ctx_r279 = ɵngcc0.ɵɵnextContext(); return ctx_r279.onColumnResize($event); })(\"reorder\", function DatatableComponent_datatable_header_1_Template_datatable_header_reorder_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r278); const ctx_r280 = ɵngcc0.ɵɵnextContext(); return ctx_r280.onColumnReorder($event); })(\"select\", function DatatableComponent_datatable_header_1_Template_datatable_header_select_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r278); const ctx_r281 = ɵngcc0.ɵɵnextContext(); return ctx_r281.onHeaderSelect($event); })(\"columnContextmenu\", function DatatableComponent_datatable_header_1_Template_datatable_header_columnContextmenu_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r278); const ctx_r282 = ɵngcc0.ɵɵnextContext(); return ctx_r282.onColumnContextmenu($event); });\n    ɵngcc0.ɵɵpipe(1, \"async\");\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r275 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"sorts\", ctx_r275.sorts)(\"sortType\", ctx_r275.sortType)(\"scrollbarH\", ctx_r275.scrollbarH)(\"innerWidth\", ctx_r275._innerWidth)(\"offsetX\", ɵngcc0.ɵɵpipeBind1(1, 14, ctx_r275._offsetX))(\"dealsWithGroup\", ctx_r275.groupedRows !== undefined)(\"columns\", ctx_r275._internalColumns)(\"headerHeight\", ctx_r275.headerHeight)(\"reorderable\", ctx_r275.reorderable)(\"targetMarkerTemplate\", ctx_r275.targetMarkerTemplate)(\"sortAscendingIcon\", ctx_r275.cssClasses.sortAscending)(\"sortDescendingIcon\", ctx_r275.cssClasses.sortDescending)(\"allRowsSelected\", ctx_r275.allRowsSelected)(\"selectionType\", ctx_r275.selectionType);\n} }\nfunction DatatableComponent_datatable_footer_4_Template(rf, ctx) { if (rf & 1) {\n    const _r284 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-footer\", 5);\n    ɵngcc0.ɵɵlistener(\"page\", function DatatableComponent_datatable_footer_4_Template_datatable_footer_page_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r284); const ctx_r283 = ɵngcc0.ɵɵnextContext(); return ctx_r283.onFooterPage($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r276 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"rowCount\", ctx_r276.rowCount)(\"pageSize\", ctx_r276.pageSize)(\"offset\", ctx_r276.offset)(\"footerHeight\", ctx_r276.footerHeight)(\"footerTemplate\", ctx_r276.footer)(\"totalMessage\", ctx_r276.messages.totalMessage)(\"pagerLeftArrowIcon\", ctx_r276.cssClasses.pagerLeftArrow)(\"pagerRightArrowIcon\", ctx_r276.cssClasses.pagerRightArrow)(\"pagerPreviousIcon\", ctx_r276.cssClasses.pagerPrevious)(\"selectedCount\", ctx_r276.selected.length)(\"selectedMessage\", !!ctx_r276.selectionType && ctx_r276.messages.selectedMessage)(\"pagerNextIcon\", ctx_r276.cssClasses.pagerNext);\n} }\nfunction DataTableHeaderCellComponent_1_ng_template_0_Template(rf, ctx) { }\nfunction DataTableHeaderCellComponent_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableHeaderCellComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n} if (rf & 2) {\n    const ctx_r285 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r285.targetMarkerTemplate)(\"ngTemplateOutletContext\", ctx_r285.targetMarkerContext);\n} }\nfunction DataTableHeaderCellComponent_label_2_Template(rf, ctx) { if (rf & 1) {\n    const _r291 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 6);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 7);\n    ɵngcc0.ɵɵlistener(\"change\", function DataTableHeaderCellComponent_label_2_Template_input_change_1_listener() { ɵngcc0.ɵɵrestoreView(_r291); const ctx_r290 = ɵngcc0.ɵɵnextContext(); return ctx_r290.select.emit(!ctx_r290.allRowsSelected); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r286 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r286.allRowsSelected);\n} }\nfunction DataTableHeaderCellComponent_span_3_Template(rf, ctx) { if (rf & 1) {\n    const _r293 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵelementStart(1, \"span\", 9);\n    ɵngcc0.ɵɵlistener(\"click\", function DataTableHeaderCellComponent_span_3_Template_span_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r293); const ctx_r292 = ɵngcc0.ɵɵnextContext(); return ctx_r292.onSort(); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r287 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r287.name, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DataTableHeaderCellComponent_4_ng_template_0_Template(rf, ctx) { }\nfunction DataTableHeaderCellComponent_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableHeaderCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n} if (rf & 2) {\n    const ctx_r288 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r288.column.headerTemplate)(\"ngTemplateOutletContext\", ctx_r288.cellContext);\n} }\nfunction DataTableFooterComponent_1_ng_template_0_Template(rf, ctx) { }\nconst _c1 = function (a0, a1, a2, a3, a4) { return { rowCount: a0, pageSize: a1, selectedCount: a2, curPage: a3, offset: a4 }; };\nfunction DataTableFooterComponent_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableFooterComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n} if (rf & 2) {\n    const ctx_r295 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r295.footerTemplate.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction5(2, _c1, ctx_r295.rowCount, ctx_r295.pageSize, ctx_r295.selectedCount, ctx_r295.curPage, ctx_r295.offset));\n} }\nfunction DataTableFooterComponent_div_2_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r299 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ctx_r299.selectedCount == null ? null : ctx_r299.selectedCount.toLocaleString(), \" \", ctx_r299.selectedMessage, \" / \");\n} }\nfunction DataTableFooterComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵtemplate(1, DataTableFooterComponent_div_2_span_1_Template, 2, 2, \"span\", 1);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r296 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r296.selectedMessage);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate2(\" \", ctx_r296.rowCount == null ? null : ctx_r296.rowCount.toLocaleString(), \" \", ctx_r296.totalMessage, \" \");\n} }\nfunction DataTableFooterComponent_datatable_pager_3_Template(rf, ctx) { if (rf & 1) {\n    const _r301 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-pager\", 6);\n    ɵngcc0.ɵɵlistener(\"change\", function DataTableFooterComponent_datatable_pager_3_Template_datatable_pager_change_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r301); const ctx_r300 = ɵngcc0.ɵɵnextContext(); return ctx_r300.page.emit($event); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r297 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"pagerLeftArrowIcon\", ctx_r297.pagerLeftArrowIcon)(\"pagerRightArrowIcon\", ctx_r297.pagerRightArrowIcon)(\"pagerPreviousIcon\", ctx_r297.pagerPreviousIcon)(\"pagerNextIcon\", ctx_r297.pagerNextIcon)(\"page\", ctx_r297.curPage)(\"size\", ctx_r297.pageSize)(\"count\", ctx_r297.rowCount)(\"hidden\", !ctx_r297.isVisible);\n} }\nconst _c2 = function (a0) { return { \"selected-count\": a0 }; };\nfunction DataTablePagerComponent_li_7_Template(rf, ctx) { if (rf & 1) {\n    const _r305 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"li\", 6);\n    ɵngcc0.ɵɵelementStart(1, \"a\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_li_7_Template_a_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r305); const pg_r303 = ctx.$implicit; const ctx_r304 = ɵngcc0.ɵɵnextContext(); return ctx_r304.selectPage(pg_r303.number); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const pg_r303 = ctx.$implicit;\n    const ctx_r302 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"active\", pg_r303.number === ctx_r302.page);\n    ɵngcc0.ɵɵattribute(\"aria-label\", \"page \" + pg_r303.number);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", pg_r303.text, \" \");\n} }\nfunction DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template(rf, ctx) { if (rf & 1) {\n    const _r313 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"datatable-body-cell\", 3);\n    ɵngcc0.ɵɵlistener(\"activate\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_activate_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r313); const ii_r311 = ctx.index; const ctx_r312 = ɵngcc0.ɵɵnextContext(2); return ctx_r312.onActivate($event, ii_r311); })(\"treeAction\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_treeAction_0_listener() { ɵngcc0.ɵɵrestoreView(_r313); const ctx_r314 = ɵngcc0.ɵɵnextContext(2); return ctx_r314.onTreeAction(); });\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const column_r310 = ctx.$implicit;\n    const ctx_r309 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"row\", ctx_r309.row)(\"group\", ctx_r309.group)(\"expanded\", ctx_r309.expanded)(\"isSelected\", ctx_r309.isSelected)(\"rowIndex\", ctx_r309.rowIndex)(\"column\", column_r310)(\"rowHeight\", ctx_r309.rowHeight)(\"displayCheck\", ctx_r309.displayCheck)(\"treeStatus\", ctx_r309.treeStatus);\n} }\nfunction DataTableBodyRowComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template, 1, 9, \"datatable-body-cell\", 2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const colGroup_r307 = ctx.$implicit;\n    const ctx_r306 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMapInterpolate1(\"datatable-row-\", colGroup_r307.type, \" datatable-row-group\");\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r306._groupStyles[colGroup_r307.type]);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", colGroup_r307.columns)(\"ngForTrackBy\", ctx_r306.columnTrackingFn);\n} }\nfunction DataTableRowWrapperComponent_div_0_1_ng_template_0_Template(rf, ctx) { }\nfunction DataTableRowWrapperComponent_div_0_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_0_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n} if (rf & 2) {\n    const ctx_r318 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r318.groupHeader.template)(\"ngTemplateOutletContext\", ctx_r318.groupContext);\n} }\nfunction DataTableRowWrapperComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵtemplate(1, DataTableRowWrapperComponent_div_0_1_Template, 1, 2, undefined, 1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r315 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r315.getGroupHeaderStyle());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r315.groupHeader && ctx_r315.groupHeader.template);\n} }\nfunction DataTableRowWrapperComponent_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\"]);\n} }\nfunction DataTableRowWrapperComponent_div_2_1_ng_template_0_Template(rf, ctx) { }\nfunction DataTableRowWrapperComponent_div_2_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_2_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n} if (rf & 2) {\n    const ctx_r320 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r320.rowDetail.template)(\"ngTemplateOutletContext\", ctx_r320.rowContext);\n} }\nfunction DataTableRowWrapperComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵtemplate(1, DataTableRowWrapperComponent_div_2_1_Template, 1, 2, undefined, 1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r317 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r317.detailRowHeight, \"px\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r317.rowDetail && ctx_r317.rowDetail.template);\n} }\nconst _c3 = [\"cellTemplate\"];\nfunction DataTableBodyCellComponent_label_1_Template(rf, ctx) { if (rf & 1) {\n    const _r327 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function DataTableBodyCellComponent_label_1_Template_input_click_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r327); const ctx_r326 = ɵngcc0.ɵɵnextContext(); return ctx_r326.onCheckboxChange($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r322 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r322.isSelected);\n} }\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 11);\n} }\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 12);\n} }\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"i\", 13);\n} }\nfunction DataTableBodyCellComponent_ng_container_2_button_1_Template(rf, ctx) { if (rf & 1) {\n    const _r334 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function DataTableBodyCellComponent_ng_container_2_button_1_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r334); const ctx_r333 = ɵngcc0.ɵɵnextContext(2); return ctx_r333.onTreeAction(); });\n    ɵngcc0.ɵɵelementStart(1, \"span\");\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template, 1, 0, \"i\", 8);\n    ɵngcc0.ɵɵtemplate(3, DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template, 1, 0, \"i\", 9);\n    ɵngcc0.ɵɵtemplate(4, DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template, 1, 0, \"i\", 10);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r328 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r328.treeStatus === \"disabled\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r328.treeStatus === \"loading\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r328.treeStatus === \"collapsed\");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r328.treeStatus === \"expanded\" || ctx_r328.treeStatus === \"disabled\");\n} }\nfunction DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template(rf, ctx) { }\nconst _c4 = function (a0) { return { cellContext: a0 }; };\nfunction DataTableBodyCellComponent_ng_container_2_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template, 0, 0, \"ng-template\", 14);\n} if (rf & 2) {\n    const ctx_r329 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r329.column.treeToggleTemplate)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c4, ctx_r329.cellContext));\n} }\nfunction DataTableBodyCellComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, DataTableBodyCellComponent_ng_container_2_button_1_Template, 5, 4, \"button\", 6);\n    ɵngcc0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_2_Template, 1, 4, undefined, 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const ctx_r323 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r323.column.treeToggleTemplate);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r323.column.treeToggleTemplate);\n} }\nfunction DataTableBodyCellComponent_span_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 15);\n} if (rf & 2) {\n    const ctx_r324 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"title\", ctx_r324.sanitizedValue)(\"innerHTML\", ctx_r324.value, ɵngcc0.ɵɵsanitizeHtml);\n} }\nfunction DataTableBodyCellComponent_4_ng_template_0_Template(rf, ctx) { }\nfunction DataTableBodyCellComponent_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, DataTableBodyCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 14, 16, ɵngcc0.ɵɵtemplateRefExtractor);\n} if (rf & 2) {\n    const ctx_r325 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r325.column.cellTemplate)(\"ngTemplateOutletContext\", ctx_r325.cellContext);\n} }\nfunction DataTableSummaryRowComponent_datatable_body_row_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"datatable-body-row\", 1);\n} if (rf & 2) {\n    const ctx_r338 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"innerWidth\", ctx_r338.innerWidth)(\"offsetX\", ctx_r338.offsetX)(\"columns\", ctx_r338._internalColumns)(\"rowHeight\", ctx_r338.rowHeight)(\"row\", ctx_r338.summaryRow)(\"rowIndex\", 0 - 1);\n} }\nclass ScrollbarHelper {\n    /**\n     * @param {?} document\n     */\n    constructor(document) {\n        this.document = document;\n        this.width = this.getWidth();\n    }\n    /**\n     * @return {?}\n     */\n    getWidth() {\n        /** @type {?} */\n        const outer = this.document.createElement('div');\n        outer.style.visibility = 'hidden';\n        outer.style.width = '100px';\n        outer.style.msOverflowStyle = 'scrollbar';\n        this.document.body.appendChild(outer);\n        /** @type {?} */\n        const widthNoScroll = outer.offsetWidth;\n        outer.style.overflow = 'scroll';\n        /** @type {?} */\n        const inner = this.document.createElement('div');\n        inner.style.width = '100%';\n        outer.appendChild(inner);\n        /** @type {?} */\n        const widthWithScroll = inner.offsetWidth;\n        outer.parentNode.removeChild(outer);\n        return widthNoScroll - widthWithScroll;\n    }\n}\nScrollbarHelper.ɵfac = function ScrollbarHelper_Factory(t) { return new (t || ScrollbarHelper)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollbarHelper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ScrollbarHelper, factory: ScrollbarHelper.ɵfac });\n/** @nocollapse */\nScrollbarHelper.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nif (false) {\n    /** @type {?} */\n    ScrollbarHelper.prototype.width;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollbarHelper.prototype.document;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nclass DimensionsHelper {\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    getDimensions(element) {\n        return element.getBoundingClientRect();\n    }\n}\nDimensionsHelper.ɵfac = function DimensionsHelper_Factory(t) { return new (t || DimensionsHelper)(); };\nDimensionsHelper.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DimensionsHelper, factory: DimensionsHelper.ɵfac });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * service to make DatatableComponent aware of changes to\n * input bindings of DataTableColumnDirective\n */\nclass ColumnChangesService {\n    constructor() {\n        this.columnInputChanges = new Subject();\n    }\n    /**\n     * @return {?}\n     */\n    get columnInputChanges$() {\n        return this.columnInputChanges.asObservable();\n    }\n    /**\n     * @return {?}\n     */\n    onInputChange() {\n        this.columnInputChanges.next();\n    }\n}\nColumnChangesService.ɵfac = function ColumnChangesService_Factory(t) { return new (t || ColumnChangesService)(); };\nColumnChangesService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ColumnChangesService, factory: ColumnChangesService.ɵfac });\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    ColumnChangesService.prototype.columnInputChanges;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableFooterTemplateDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableFooterTemplateDirective.ɵfac = function DataTableFooterTemplateDirective_Factory(t) { return new (t || DataTableFooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nDataTableFooterTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableFooterTemplateDirective, selectors: [[\"\", \"ngx-datatable-footer-template\", \"\"]] });\n/** @nocollapse */\nDataTableFooterTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableFooterTemplateDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Visibility Observer Directive\n *\n * Usage:\n *\n * \t\t<div\n * \t\t\tvisibilityObserver\n * \t\t\t(visible)=\"onVisible($event)\">\n * \t\t</div>\n *\n */\nclass VisibilityDirective {\n    /**\n     * @param {?} element\n     * @param {?} zone\n     */\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.isVisible = false;\n        this.visible = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.runCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        clearTimeout(this.timeout);\n    }\n    /**\n     * @return {?}\n     */\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run((/**\n         * @return {?}\n         */\n        () => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    runCheck() {\n        /** @type {?} */\n        const check = (/**\n         * @return {?}\n         */\n        () => {\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular((/**\n                 * @return {?}\n                 */\n                () => {\n                    this.timeout = setTimeout((/**\n                     * @return {?}\n                     */\n                    () => check()), 50);\n                }));\n            }\n        });\n        this.timeout = setTimeout((/**\n         * @return {?}\n         */\n        () => check()));\n    }\n}\nVisibilityDirective.ɵfac = function VisibilityDirective_Factory(t) { return new (t || VisibilityDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nVisibilityDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: VisibilityDirective, selectors: [[\"\", \"visibilityObserver\", \"\"]], hostVars: 2, hostBindings: function VisibilityDirective_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"visible\", ctx.isVisible);\n    } }, outputs: { visible: \"visible\" } });\n/** @nocollapse */\nVisibilityDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nVisibilityDirective.propDecorators = {\n    isVisible: [{ type: HostBinding, args: ['class.visible',] }],\n    visible: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    VisibilityDirective.prototype.isVisible;\n    /** @type {?} */\n    VisibilityDirective.prototype.visible;\n    /** @type {?} */\n    VisibilityDirective.prototype.timeout;\n    /**\n     * @type {?}\n     * @private\n     */\n    VisibilityDirective.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    VisibilityDirective.prototype.zone;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\nclass DraggableDirective {\n    /**\n     * @param {?} element\n     */\n    constructor(element) {\n        this.dragX = true;\n        this.dragY = true;\n        this.dragStart = new EventEmitter();\n        this.dragging = new EventEmitter();\n        this.dragEnd = new EventEmitter();\n        this.isDragging = false;\n        this.element = element.nativeElement;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n            this.onMousedown(changes['dragEventTarget'].currentValue);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseup(event) {\n        if (!this.isDragging)\n            return;\n        this.isDragging = false;\n        this.element.classList.remove('dragging');\n        if (this.subscription) {\n            this._destroySubscription();\n            this.dragEnd.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMousedown(event) {\n        // we only want to drag the inner header text\n        /** @type {?} */\n        const isDragElm = ((/** @type {?} */ (event.target))).classList.contains('draggable');\n        if (isDragElm && (this.dragX || this.dragY)) {\n            event.preventDefault();\n            this.isDragging = true;\n            /** @type {?} */\n            const mouseDownPos = { x: event.clientX, y: event.clientY };\n            /** @type {?} */\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((/**\n             * @param {?} ev\n             * @return {?}\n             */\n            (ev) => this.onMouseup(ev)));\n            /** @type {?} */\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((/**\n             * @param {?} ev\n             * @return {?}\n             */\n            (ev) => this.move(ev, mouseDownPos)));\n            this.subscription.add(mouseMoveSub);\n            this.dragStart.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @param {?} mouseDownPos\n     * @return {?}\n     */\n    move(event, mouseDownPos) {\n        if (!this.isDragging)\n            return;\n        /** @type {?} */\n        const x = event.clientX - mouseDownPos.x;\n        /** @type {?} */\n        const y = event.clientY - mouseDownPos.y;\n        if (this.dragX)\n            this.element.style.left = `${x}px`;\n        if (this.dragY)\n            this.element.style.top = `${y}px`;\n        this.element.classList.add('dragging');\n        this.dragging.emit({\n            event,\n            element: this.element,\n            model: this.dragModel\n        });\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nDraggableDirective.ɵfac = function DraggableDirective_Factory(t) { return new (t || DraggableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDraggableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DraggableDirective, selectors: [[\"\", \"draggable\", \"\"]], inputs: { dragX: \"dragX\", dragY: \"dragY\", dragEventTarget: \"dragEventTarget\", dragModel: \"dragModel\" }, outputs: { dragStart: \"dragStart\", dragging: \"dragging\", dragEnd: \"dragEnd\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nDraggableDirective.ctorParameters = () => [\n    { type: ElementRef }\n];\nDraggableDirective.propDecorators = {\n    dragEventTarget: [{ type: Input }],\n    dragModel: [{ type: Input }],\n    dragX: [{ type: Input }],\n    dragY: [{ type: Input }],\n    dragStart: [{ type: Output }],\n    dragging: [{ type: Output }],\n    dragEnd: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    DraggableDirective.prototype.dragEventTarget;\n    /** @type {?} */\n    DraggableDirective.prototype.dragModel;\n    /** @type {?} */\n    DraggableDirective.prototype.dragX;\n    /** @type {?} */\n    DraggableDirective.prototype.dragY;\n    /** @type {?} */\n    DraggableDirective.prototype.dragStart;\n    /** @type {?} */\n    DraggableDirective.prototype.dragging;\n    /** @type {?} */\n    DraggableDirective.prototype.dragEnd;\n    /** @type {?} */\n    DraggableDirective.prototype.element;\n    /** @type {?} */\n    DraggableDirective.prototype.isDragging;\n    /** @type {?} */\n    DraggableDirective.prototype.subscription;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/* tslint:disable */\n/** @type {?} */\nconst MouseEvent = (/** @type {?} */ ((((/** @type {?} */ ((typeof window !== 'undefined' && window)))) || ((/** @type {?} */ (global))))\n    .MouseEvent));\n/** @type {?} */\nconst KeyboardEvent = (/** @type {?} */ ((((/** @type {?} */ ((typeof window !== 'undefined' && window)))) || ((/** @type {?} */ (global))))\n    .KeyboardEvent));\n/** @type {?} */\nconst Event = (/** @type {?} */ ((((/** @type {?} */ ((typeof window !== 'undefined' && window)))) || ((/** @type {?} */ (global)))).Event));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ResizeableDirective {\n    /**\n     * @param {?} element\n     * @param {?} renderer\n     */\n    constructor(element, renderer) {\n        this.renderer = renderer;\n        this.resizeEnabled = true;\n        this.resize = new EventEmitter();\n        this.resizing = false;\n        this.element = element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        /** @type {?} */\n        const renderer2 = this.renderer;\n        /** @type {?} */\n        const node = renderer2.createElement('span');\n        if (this.resizeEnabled) {\n            renderer2.addClass(node, 'resize-handle');\n        }\n        else {\n            renderer2.addClass(node, 'resize-handle--not-resizable');\n        }\n        renderer2.appendChild(this.element, node);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    /**\n     * @return {?}\n     */\n    onMouseup() {\n        this.resizing = false;\n        if (this.subscription && !this.subscription.closed) {\n            this._destroySubscription();\n            this.resize.emit(this.element.clientWidth);\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMousedown(event) {\n        /** @type {?} */\n        const isHandle = ((/** @type {?} */ (event.target))).classList.contains('resize-handle');\n        /** @type {?} */\n        const initialWidth = this.element.clientWidth;\n        /** @type {?} */\n        const mouseDownScreenX = event.screenX;\n        if (isHandle) {\n            event.stopPropagation();\n            this.resizing = true;\n            /** @type {?} */\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((/**\n             * @param {?} ev\n             * @return {?}\n             */\n            (ev) => this.onMouseup()));\n            /** @type {?} */\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((/**\n             * @param {?} e\n             * @return {?}\n             */\n            (e) => this.move(e, initialWidth, mouseDownScreenX)));\n            this.subscription.add(mouseMoveSub);\n        }\n    }\n    /**\n     * @param {?} event\n     * @param {?} initialWidth\n     * @param {?} mouseDownScreenX\n     * @return {?}\n     */\n    move(event, initialWidth, mouseDownScreenX) {\n        /** @type {?} */\n        const movementX = event.screenX - mouseDownScreenX;\n        /** @type {?} */\n        const newWidth = initialWidth + movementX;\n        /** @type {?} */\n        const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n        /** @type {?} */\n        const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n        if (overMinWidth && underMaxWidth) {\n            this.element.style.width = `${newWidth}px`;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nResizeableDirective.ɵfac = function ResizeableDirective_Factory(t) { return new (t || ResizeableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nResizeableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResizeableDirective, selectors: [[\"\", \"resizeable\", \"\"]], hostVars: 2, hostBindings: function ResizeableDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function ResizeableDirective_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"resizeable\", ctx.resizeEnabled);\n    } }, inputs: { resizeEnabled: \"resizeEnabled\", minWidth: \"minWidth\", maxWidth: \"maxWidth\" }, outputs: { resize: \"resize\" } });\n/** @nocollapse */\nResizeableDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nResizeableDirective.propDecorators = {\n    resizeEnabled: [{ type: Input }],\n    minWidth: [{ type: Input }],\n    maxWidth: [{ type: Input }],\n    resize: [{ type: Output }],\n    onMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    ResizeableDirective.prototype.resizeEnabled;\n    /** @type {?} */\n    ResizeableDirective.prototype.minWidth;\n    /** @type {?} */\n    ResizeableDirective.prototype.maxWidth;\n    /** @type {?} */\n    ResizeableDirective.prototype.resize;\n    /** @type {?} */\n    ResizeableDirective.prototype.element;\n    /** @type {?} */\n    ResizeableDirective.prototype.subscription;\n    /** @type {?} */\n    ResizeableDirective.prototype.resizing;\n    /**\n     * @type {?}\n     * @private\n     */\n    ResizeableDirective.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass OrderableDirective {\n    /**\n     * @param {?} differs\n     * @param {?} document\n     */\n    constructor(differs, document) {\n        this.document = document;\n        this.reorder = new EventEmitter();\n        this.targetChanged = new EventEmitter();\n        this.differ = differs.find({}).create();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // HACK: Investigate Better Way\n        this.updateSubscriptions();\n        this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.draggables.forEach((/**\n         * @param {?} d\n         * @return {?}\n         */\n        d => {\n            d.dragStart.unsubscribe();\n            d.dragging.unsubscribe();\n            d.dragEnd.unsubscribe();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    updateSubscriptions() {\n        /** @type {?} */\n        const diffs = this.differ.diff(this.createMapDiffs());\n        if (diffs) {\n            /** @type {?} */\n            const subscribe = (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ currentValue, previousValue }) => {\n                unsubscribe({ previousValue });\n                if (currentValue) {\n                    currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n                    currentValue.dragging.subscribe(this.onDragging.bind(this));\n                    currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n                }\n            });\n            /** @type {?} */\n            const unsubscribe = (/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ previousValue }) => {\n                if (previousValue) {\n                    previousValue.dragStart.unsubscribe();\n                    previousValue.dragging.unsubscribe();\n                    previousValue.dragEnd.unsubscribe();\n                }\n            });\n            diffs.forEachAddedItem(subscribe);\n            // diffs.forEachChangedItem(subscribe.bind(this));\n            diffs.forEachRemovedItem(unsubscribe);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onDragStart() {\n        this.positions = {};\n        /** @type {?} */\n        let i = 0;\n        for (const dragger of this.draggables.toArray()) {\n            /** @type {?} */\n            const elm = dragger.element;\n            /** @type {?} */\n            const left = parseInt(elm.offsetLeft.toString(), 0);\n            this.positions[dragger.dragModel.prop] = {\n                left,\n                right: left + parseInt(elm.offsetWidth.toString(), 0),\n                index: i++,\n                element: elm\n            };\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onDragging({ element, model, event }) {\n        /** @type {?} */\n        const prevPos = this.positions[model.prop];\n        /** @type {?} */\n        const target = this.isTarget(model, event);\n        if (target) {\n            if (this.lastDraggingIndex !== target.i) {\n                this.targetChanged.emit({\n                    prevIndex: this.lastDraggingIndex,\n                    newIndex: target.i,\n                    initialIndex: prevPos.index\n                });\n                this.lastDraggingIndex = target.i;\n            }\n        }\n        else if (this.lastDraggingIndex !== prevPos.index) {\n            this.targetChanged.emit({\n                prevIndex: this.lastDraggingIndex,\n                initialIndex: prevPos.index\n            });\n            this.lastDraggingIndex = prevPos.index;\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onDragEnd({ element, model, event }) {\n        /** @type {?} */\n        const prevPos = this.positions[model.prop];\n        /** @type {?} */\n        const target = this.isTarget(model, event);\n        if (target) {\n            this.reorder.emit({\n                prevIndex: prevPos.index,\n                newIndex: target.i,\n                model\n            });\n        }\n        this.lastDraggingIndex = undefined;\n        element.style.left = 'auto';\n    }\n    /**\n     * @param {?} model\n     * @param {?} event\n     * @return {?}\n     */\n    isTarget(model, event) {\n        /** @type {?} */\n        let i = 0;\n        /** @type {?} */\n        const x = event.x || event.clientX;\n        /** @type {?} */\n        const y = event.y || event.clientY;\n        /** @type {?} */\n        const targets = this.document.elementsFromPoint(x, y);\n        for (const prop in this.positions) {\n            // current column position which throws event.\n            /** @type {?} */\n            const pos = this.positions[prop];\n            // since we drag the inner span, we need to find it in the elements at the cursor\n            if (model.prop !== prop && targets.find((/**\n             * @param {?} el\n             * @return {?}\n             */\n            (el) => el === pos.element))) {\n                return {\n                    pos,\n                    i\n                };\n            }\n            i++;\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    createMapDiffs() {\n        return this.draggables.toArray().reduce((/**\n         * @param {?} acc\n         * @param {?} curr\n         * @return {?}\n         */\n        (acc, curr) => {\n            acc[curr.dragModel.$$id] = curr;\n            return acc;\n        }), {});\n    }\n}\nOrderableDirective.ɵfac = function OrderableDirective_Factory(t) { return new (t || OrderableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nOrderableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: OrderableDirective, selectors: [[\"\", \"orderable\", \"\"]], contentQueries: function OrderableDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DraggableDirective, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.draggables = _t);\n    } }, outputs: { reorder: \"reorder\", targetChanged: \"targetChanged\" } });\n/** @nocollapse */\nOrderableDirective.ctorParameters = () => [\n    { type: KeyValueDiffers },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nOrderableDirective.propDecorators = {\n    reorder: [{ type: Output }],\n    targetChanged: [{ type: Output }],\n    draggables: [{ type: ContentChildren, args: [DraggableDirective, { descendants: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    OrderableDirective.prototype.reorder;\n    /** @type {?} */\n    OrderableDirective.prototype.targetChanged;\n    /** @type {?} */\n    OrderableDirective.prototype.draggables;\n    /** @type {?} */\n    OrderableDirective.prototype.positions;\n    /** @type {?} */\n    OrderableDirective.prototype.differ;\n    /** @type {?} */\n    OrderableDirective.prototype.lastDraggingIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    OrderableDirective.prototype.document;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass LongPressDirective {\n    constructor() {\n        this.pressEnabled = true;\n        this.duration = 500;\n        this.longPressStart = new EventEmitter();\n        this.longPressing = new EventEmitter();\n        this.longPressEnd = new EventEmitter();\n        this.mouseX = 0;\n        this.mouseY = 0;\n    }\n    /**\n     * @return {?}\n     */\n    get press() {\n        return this.pressing;\n    }\n    /**\n     * @return {?}\n     */\n    get isLongPress() {\n        return this.isLongPressing;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseDown(event) {\n        // don't do right/middle clicks\n        if (event.which !== 1 || !this.pressEnabled)\n            return;\n        // don't start drag if its on resize handle\n        /** @type {?} */\n        const target = (/** @type {?} */ (event.target));\n        if (target.classList.contains('resize-handle'))\n            return;\n        this.mouseX = event.clientX;\n        this.mouseY = event.clientY;\n        this.pressing = true;\n        this.isLongPressing = false;\n        /** @type {?} */\n        const mouseup = fromEvent(document, 'mouseup');\n        this.subscription = mouseup.subscribe((/**\n         * @param {?} ev\n         * @return {?}\n         */\n        (ev) => this.onMouseup()));\n        this.timeout = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this.isLongPressing = true;\n            this.longPressStart.emit({\n                event,\n                model: this.pressModel\n            });\n            this.subscription.add(fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((/**\n             * @param {?} mouseEvent\n             * @return {?}\n             */\n            (mouseEvent) => this.onMouseMove(mouseEvent))));\n            this.loop(event);\n        }), this.duration);\n        this.loop(event);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseMove(event) {\n        if (this.pressing && !this.isLongPressing) {\n            /** @type {?} */\n            const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n            /** @type {?} */\n            const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n            if (xThres || yThres) {\n                this.endPress();\n            }\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    loop(event) {\n        if (this.isLongPressing) {\n            this.timeout = setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                this.longPressing.emit({\n                    event,\n                    model: this.pressModel\n                });\n                this.loop(event);\n            }), 50);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    endPress() {\n        clearTimeout(this.timeout);\n        this.isLongPressing = false;\n        this.pressing = false;\n        this._destroySubscription();\n        this.longPressEnd.emit({\n            model: this.pressModel\n        });\n    }\n    /**\n     * @return {?}\n     */\n    onMouseup() {\n        this.endPress();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nLongPressDirective.ɵfac = function LongPressDirective_Factory(t) { return new (t || LongPressDirective)(); };\nLongPressDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LongPressDirective, selectors: [[\"\", \"long-press\", \"\"]], hostVars: 4, hostBindings: function LongPressDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mousedown\", function LongPressDirective_mousedown_HostBindingHandler($event) { return ctx.onMouseDown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"press\", ctx.press)(\"longpress\", ctx.isLongPress);\n    } }, inputs: { pressEnabled: \"pressEnabled\", duration: \"duration\", pressModel: \"pressModel\" }, outputs: { longPressStart: \"longPressStart\", longPressing: \"longPressing\", longPressEnd: \"longPressEnd\" } });\nLongPressDirective.propDecorators = {\n    pressEnabled: [{ type: Input }],\n    pressModel: [{ type: Input }],\n    duration: [{ type: Input }],\n    longPressStart: [{ type: Output }],\n    longPressing: [{ type: Output }],\n    longPressEnd: [{ type: Output }],\n    press: [{ type: HostBinding, args: ['class.press',] }],\n    isLongPress: [{ type: HostBinding, args: ['class.longpress',] }],\n    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]\n};\nif (false) {\n    /** @type {?} */\n    LongPressDirective.prototype.pressEnabled;\n    /** @type {?} */\n    LongPressDirective.prototype.pressModel;\n    /** @type {?} */\n    LongPressDirective.prototype.duration;\n    /** @type {?} */\n    LongPressDirective.prototype.longPressStart;\n    /** @type {?} */\n    LongPressDirective.prototype.longPressing;\n    /** @type {?} */\n    LongPressDirective.prototype.longPressEnd;\n    /** @type {?} */\n    LongPressDirective.prototype.pressing;\n    /** @type {?} */\n    LongPressDirective.prototype.isLongPressing;\n    /** @type {?} */\n    LongPressDirective.prototype.timeout;\n    /** @type {?} */\n    LongPressDirective.prototype.mouseX;\n    /** @type {?} */\n    LongPressDirective.prototype.mouseY;\n    /** @type {?} */\n    LongPressDirective.prototype.subscription;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollerComponent {\n    /**\n     * @param {?} ngZone\n     * @param {?} element\n     * @param {?} renderer\n     */\n    constructor(ngZone, element, renderer) {\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.scrollbarV = false;\n        this.scrollbarH = false;\n        this.scroll = new EventEmitter();\n        this.scrollYPos = 0;\n        this.scrollXPos = 0;\n        this.prevScrollYPos = 0;\n        this.prevScrollXPos = 0;\n        this._scrollEventListener = null;\n        this.element = element.nativeElement;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // manual bind so we don't always listen\n        if (this.scrollbarV || this.scrollbarH) {\n            /** @type {?} */\n            const renderer = this.renderer;\n            this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n            this._scrollEventListener = this.onScrolled.bind(this);\n            this.parentElement.addEventListener('scroll', this._scrollEventListener);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this._scrollEventListener) {\n            this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n            this._scrollEventListener = null;\n        }\n    }\n    /**\n     * @param {?} offsetY\n     * @return {?}\n     */\n    setOffset(offsetY) {\n        if (this.parentElement) {\n            this.parentElement.scrollTop = offsetY;\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onScrolled(event) {\n        /** @type {?} */\n        const dom = (/** @type {?} */ (event.currentTarget));\n        requestAnimationFrame((/**\n         * @return {?}\n         */\n        () => {\n            this.scrollYPos = dom.scrollTop;\n            this.scrollXPos = dom.scrollLeft;\n            this.updateOffset();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    updateOffset() {\n        /** @type {?} */\n        let direction;\n        if (this.scrollYPos < this.prevScrollYPos) {\n            direction = 'down';\n        }\n        else if (this.scrollYPos > this.prevScrollYPos) {\n            direction = 'up';\n        }\n        this.scroll.emit({\n            direction,\n            scrollYPos: this.scrollYPos,\n            scrollXPos: this.scrollXPos\n        });\n        this.prevScrollYPos = this.scrollYPos;\n        this.prevScrollXPos = this.scrollXPos;\n    }\n}\nScrollerComponent.ɵfac = function ScrollerComponent_Factory(t) { return new (t || ScrollerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nScrollerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ScrollerComponent, selectors: [[\"datatable-scroller\"]], hostAttrs: [1, \"datatable-scroll\"], hostVars: 4, hostBindings: function ScrollerComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx.scrollHeight, \"px\")(\"width\", ctx.scrollWidth, \"px\");\n    } }, inputs: { scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", scrollHeight: \"scrollHeight\", scrollWidth: \"scrollWidth\" }, outputs: { scroll: \"scroll\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ScrollerComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nScrollerComponent.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\nScrollerComponent.propDecorators = {\n    scrollbarV: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    scrollHeight: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],\n    scrollWidth: [{ type: HostBinding, args: ['style.width.px',] }, { type: Input }],\n    scroll: [{ type: Output }]\n};\nif (false) {\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollbarV;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollbarH;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollHeight;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollWidth;\n    /** @type {?} */\n    ScrollerComponent.prototype.scroll;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollYPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.scrollXPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.prevScrollYPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.prevScrollXPos;\n    /** @type {?} */\n    ScrollerComponent.prototype.element;\n    /** @type {?} */\n    ScrollerComponent.prototype.parentElement;\n    /** @type {?} */\n    ScrollerComponent.prototype.onScrollListener;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollerComponent.prototype._scrollEventListener;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollerComponent.prototype.ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    ScrollerComponent.prototype.renderer;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableGroupHeaderTemplateDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableGroupHeaderTemplateDirective.ɵfac = function DatatableGroupHeaderTemplateDirective_Factory(t) { return new (t || DatatableGroupHeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nDatatableGroupHeaderTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DatatableGroupHeaderTemplateDirective, selectors: [[\"\", \"ngx-datatable-group-header-template\", \"\"]] });\n/** @nocollapse */\nDatatableGroupHeaderTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DatatableGroupHeaderTemplateDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableGroupHeaderDirective {\n    constructor() {\n        /**\n         * Row height is required when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Track toggling of group visibility\n         */\n        this.toggle = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of a group\n     * @param {?} group\n     * @return {?}\n     */\n    toggleExpandGroup(group) {\n        this.toggle.emit({\n            type: 'group',\n            value: group\n        });\n    }\n    /**\n     * Expand all groups\n     * @return {?}\n     */\n    expandAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * Collapse all groups\n     * @return {?}\n     */\n    collapseAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableGroupHeaderDirective.ɵfac = function DatatableGroupHeaderDirective_Factory(t) { return new (t || DatatableGroupHeaderDirective)(); };\nDatatableGroupHeaderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DatatableGroupHeaderDirective, selectors: [[\"ngx-datatable-group-header\"]], contentQueries: function DatatableGroupHeaderDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DatatableGroupHeaderTemplateDirective, true, TemplateRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\n    } }, inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" } });\nDatatableGroupHeaderDirective.propDecorators = {\n    rowHeight: [{ type: Input }],\n    _templateInput: [{ type: Input, args: ['template',] }],\n    _templateQuery: [{ type: ContentChild, args: [DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true },] }],\n    toggle: [{ type: Output }]\n};\nif (false) {\n    /**\n     * Row height is required when virtual scroll is enabled.\n     * @type {?}\n     */\n    DatatableGroupHeaderDirective.prototype.rowHeight;\n    /** @type {?} */\n    DatatableGroupHeaderDirective.prototype._templateInput;\n    /** @type {?} */\n    DatatableGroupHeaderDirective.prototype._templateQuery;\n    /**\n     * Track toggling of group visibility\n     * @type {?}\n     */\n    DatatableGroupHeaderDirective.prototype.toggle;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Always returns the empty string ''\n * @return {?}\n */\nfunction emptyStringGetter() {\n    return '';\n}\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n * @param {?} prop\n * @return {?}\n */\nfunction getterForProp(prop) {\n    if (prop == null) {\n        return emptyStringGetter;\n    }\n    if (typeof prop === 'number') {\n        return numericIndexGetter;\n    }\n    else {\n        // deep or simple\n        if (prop.indexOf('.') !== -1) {\n            return deepValueGetter;\n        }\n        else {\n            return shallowValueGetter;\n        }\n    }\n}\n/**\n * Returns the value at this numeric index.\n * @param {?} row array of values\n * @param {?} index numeric index\n * @return {?} any or '' if invalid index\n */\nfunction numericIndexGetter(row, index) {\n    if (row == null) {\n        return '';\n    }\n    // mimic behavior of deepValueGetter\n    if (!row || index == null) {\n        return row;\n    }\n    /** @type {?} */\n    const value = row[index];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param {?} obj object containing the field\n * @param {?} fieldName field name string\n * @return {?}\n */\nfunction shallowValueGetter(obj, fieldName) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !fieldName) {\n        return obj;\n    }\n    /** @type {?} */\n    const value = obj[fieldName];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns a deep object given a string. zoo['animal.type']\n * @param {?} obj\n * @param {?} path\n * @return {?}\n */\nfunction deepValueGetter(obj, path) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !path) {\n        return obj;\n    }\n    // check if path matches a root-level field\n    // { \"a.b.c\": 123 }\n    /** @type {?} */\n    let current = obj[path];\n    if (current !== undefined) {\n        return current;\n    }\n    current = obj;\n    /** @type {?} */\n    const split = path.split('.');\n    if (split.length) {\n        for (let i = 0; i < split.length; i++) {\n            current = current[split[i]];\n            // if found undefined, return empty string\n            if (current === undefined || current === null) {\n                return '';\n            }\n        }\n    }\n    return current;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction optionalGetterForProp(prop) {\n    return prop && ((/**\n     * @param {?} row\n     * @return {?}\n     */\n    row => getterForProp(prop)(row, prop)));\n}\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param {?} rows\n *\n * @param {?=} from\n * @param {?=} to\n * @return {?}\n */\nfunction groupRowsByParents(rows, from, to) {\n    if (from && to) {\n        /** @type {?} */\n        const nodeById = {};\n        /** @type {?} */\n        const l = rows.length;\n        /** @type {?} */\n        let node = null;\n        nodeById[0] = new TreeNode(); // that's the root node\n        // that's the root node\n        /** @type {?} */\n        const uniqIDs = rows.reduce((/**\n         * @param {?} arr\n         * @param {?} item\n         * @return {?}\n         */\n        (arr, item) => {\n            /** @type {?} */\n            const toValue = to(item);\n            if (arr.indexOf(toValue) === -1) {\n                arr.push(toValue);\n            }\n            return arr;\n        }), []);\n        for (let i = 0; i < l; i++) {\n            // make TreeNode objects for each item\n            nodeById[to(rows[i])] = new TreeNode(rows[i]);\n        }\n        for (let i = 0; i < l; i++) {\n            // link all TreeNode objects\n            node = nodeById[to(rows[i])];\n            /** @type {?} */\n            let parent = 0;\n            /** @type {?} */\n            const fromValue = from(node.row);\n            if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n                parent = fromValue;\n            }\n            node.parent = nodeById[parent];\n            node.row['level'] = node.parent.row['level'] + 1;\n            node.parent.children.push(node);\n        }\n        /** @type {?} */\n        let resolvedRows = [];\n        nodeById[0].flatten((/**\n         * @return {?}\n         */\n        function () {\n            resolvedRows = [...resolvedRows, this.row];\n        }), true);\n        return resolvedRows;\n    }\n    else {\n        return rows;\n    }\n}\nclass TreeNode {\n    /**\n     * @param {?=} row\n     */\n    constructor(row = null) {\n        if (!row) {\n            row = {\n                level: -1,\n                treeStatus: 'expanded'\n            };\n        }\n        this.row = row;\n        this.parent = null;\n        this.children = [];\n    }\n    /**\n     * @param {?} f\n     * @param {?} recursive\n     * @return {?}\n     */\n    flatten(f, recursive) {\n        if (this.row['treeStatus'] === 'expanded') {\n            for (let i = 0, l = this.children.length; i < l; i++) {\n                /** @type {?} */\n                const child = this.children[i];\n                f.apply(child, Array.prototype.slice.call(arguments, 2));\n                if (recursive)\n                    child.flatten.apply(child, arguments);\n            }\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    TreeNode.prototype.row;\n    /** @type {?} */\n    TreeNode.prototype.parent;\n    /** @type {?} */\n    TreeNode.prototype.children;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n * @param {?} str\n * @return {?}\n */\nfunction camelCase(str) {\n    // Replace special characters with a space\n    str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n    // put a space before an uppercase letter\n    str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n    // Lower case first character and some other stuff\n    str = str\n        .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\n        .trim()\n        .toLowerCase();\n    // uppercase characters preceded by a space or number\n    str = str.replace(/([ 0-9]+)([a-zA-Z])/g, (/**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} c\n     * @return {?}\n     */\n    function (a, b, c) {\n        return b.trim() + c.toUpperCase();\n    }));\n    return str;\n}\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n * @param {?} str\n * @return {?}\n */\nfunction deCamelCase(str) {\n    return str.replace(/([A-Z])/g, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    match => ` ${match}`)).replace(/^./, (/**\n     * @param {?} match\n     * @return {?}\n     */\n    match => match.toUpperCase()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n * @return {?}\n */\nfunction id() {\n    return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Sets the column defaults\n * @param {?} columns\n * @return {?}\n */\nfunction setColumnDefaults(columns) {\n    if (!columns)\n        return;\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    /** @type {?} */\n    let treeColumnFound = false;\n    for (const column of columns) {\n        if (!column.$$id) {\n            column.$$id = id();\n        }\n        // prop can be numeric; zero is valid not a missing prop\n        // translate name => prop\n        if (isNullOrUndefined(column.prop) && column.name) {\n            column.prop = camelCase(column.name);\n        }\n        if (!column.$$valueGetter) {\n            column.$$valueGetter = getterForProp(column.prop);\n        }\n        // format props if no name passed\n        if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = deCamelCase(String(column.prop));\n        }\n        if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = ''; // Fixes IE and Edge displaying `null`\n        }\n        if (!column.hasOwnProperty('resizeable')) {\n            column.resizeable = true;\n        }\n        if (!column.hasOwnProperty('sortable')) {\n            column.sortable = true;\n        }\n        if (!column.hasOwnProperty('draggable')) {\n            column.draggable = true;\n        }\n        if (!column.hasOwnProperty('canAutoResize')) {\n            column.canAutoResize = true;\n        }\n        if (!column.hasOwnProperty('width')) {\n            column.width = 150;\n        }\n        if (!column.hasOwnProperty('isTreeColumn')) {\n            column.isTreeColumn = false;\n        }\n        else {\n            if (column.isTreeColumn && !treeColumnFound) {\n                // If the first column with isTreeColumn is true found\n                // we mark that treeCoulmn is found\n                treeColumnFound = true;\n            }\n            else {\n                // After that isTreeColumn property for any other column\n                // will be set as false\n                column.isTreeColumn = false;\n            }\n        }\n    }\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Translates templates definitions to objects\n * @param {?} templates\n * @return {?}\n */\nfunction translateTemplates(templates) {\n    /** @type {?} */\n    const result = [];\n    for (const temp of templates) {\n        /** @type {?} */\n        const col = {};\n        /** @type {?} */\n        const props = Object.getOwnPropertyNames(temp);\n        for (const prop of props) {\n            col[prop] = temp[prop];\n        }\n        if (temp.headerTemplate) {\n            col.headerTemplate = temp.headerTemplate;\n        }\n        if (temp.cellTemplate) {\n            col.cellTemplate = temp.cellTemplate;\n        }\n        if (temp.summaryFunc) {\n            col.summaryFunc = temp.summaryFunc;\n        }\n        if (temp.summaryTemplate) {\n            col.summaryTemplate = temp.summaryTemplate;\n        }\n        result.push(col);\n    }\n    return result;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst ColumnMode = {\n    standard: 'standard',\n    flex: 'flex',\n    force: 'force',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst SelectionType = {\n    single: 'single',\n    multi: 'multi',\n    multiClick: 'multiClick',\n    cell: 'cell',\n    checkbox: 'checkbox',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst SortType = {\n    single: 'single',\n    multi: 'multi',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst ContextmenuType = {\n    header: 'header',\n    body: 'body',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnHeaderDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnHeaderDirective.ɵfac = function DataTableColumnHeaderDirective_Factory(t) { return new (t || DataTableColumnHeaderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nDataTableColumnHeaderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnHeaderDirective, selectors: [[\"\", \"ngx-datatable-header-template\", \"\"]] });\n/** @nocollapse */\nDataTableColumnHeaderDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableColumnHeaderDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnCellDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellDirective.ɵfac = function DataTableColumnCellDirective_Factory(t) { return new (t || DataTableColumnCellDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nDataTableColumnCellDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnCellDirective, selectors: [[\"\", \"ngx-datatable-cell-template\", \"\"]] });\n/** @nocollapse */\nDataTableColumnCellDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableColumnCellDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnCellTreeToggle {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellTreeToggle.ɵfac = function DataTableColumnCellTreeToggle_Factory(t) { return new (t || DataTableColumnCellTreeToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nDataTableColumnCellTreeToggle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnCellTreeToggle, selectors: [[\"\", \"ngx-datatable-tree-toggle\", \"\"]] });\n/** @nocollapse */\nDataTableColumnCellTreeToggle.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DataTableColumnCellTreeToggle.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableColumnDirective {\n    /**\n     * @param {?} columnChangesService\n     */\n    constructor(columnChangesService) {\n        this.columnChangesService = columnChangesService;\n        this.isFirstChange = true;\n    }\n    /**\n     * @return {?}\n     */\n    get cellTemplate() {\n        return this._cellTemplateInput || this._cellTemplateQuery;\n    }\n    /**\n     * @return {?}\n     */\n    get headerTemplate() {\n        return this._headerTemplateInput || this._headerTemplateQuery;\n    }\n    /**\n     * @return {?}\n     */\n    get treeToggleTemplate() {\n        return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        if (this.isFirstChange) {\n            this.isFirstChange = false;\n        }\n        else {\n            this.columnChangesService.onInputChange();\n        }\n    }\n}\nDataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) { return new (t || DataTableColumnDirective)(ɵngcc0.ɵɵdirectiveInject(ColumnChangesService)); };\nDataTableColumnDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableColumnDirective, selectors: [[\"ngx-datatable-column\"]], contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnCellDirective, true, TemplateRef);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnHeaderDirective, true, TemplateRef);\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DataTableColumnCellTreeToggle, true, TemplateRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._cellTemplateQuery = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerTemplateQuery = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._treeToggleTemplateQuery = _t.first);\n    } }, inputs: { name: \"name\", prop: \"prop\", frozenLeft: \"frozenLeft\", frozenRight: \"frozenRight\", flexGrow: \"flexGrow\", resizeable: \"resizeable\", comparator: \"comparator\", pipe: \"pipe\", sortable: \"sortable\", draggable: \"draggable\", canAutoResize: \"canAutoResize\", minWidth: \"minWidth\", width: \"width\", maxWidth: \"maxWidth\", checkboxable: \"checkboxable\", headerCheckboxable: \"headerCheckboxable\", headerClass: \"headerClass\", cellClass: \"cellClass\", isTreeColumn: \"isTreeColumn\", treeLevelIndent: \"treeLevelIndent\", summaryFunc: \"summaryFunc\", summaryTemplate: \"summaryTemplate\", _cellTemplateInput: [\"cellTemplate\", \"_cellTemplateInput\"], _headerTemplateInput: [\"headerTemplate\", \"_headerTemplateInput\"], _treeToggleTemplateInput: [\"treeToggleTemplate\", \"_treeToggleTemplateInput\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/** @nocollapse */\nDataTableColumnDirective.ctorParameters = () => [\n    { type: ColumnChangesService }\n];\nDataTableColumnDirective.propDecorators = {\n    name: [{ type: Input }],\n    prop: [{ type: Input }],\n    frozenLeft: [{ type: Input }],\n    frozenRight: [{ type: Input }],\n    flexGrow: [{ type: Input }],\n    resizeable: [{ type: Input }],\n    comparator: [{ type: Input }],\n    pipe: [{ type: Input }],\n    sortable: [{ type: Input }],\n    draggable: [{ type: Input }],\n    canAutoResize: [{ type: Input }],\n    minWidth: [{ type: Input }],\n    width: [{ type: Input }],\n    maxWidth: [{ type: Input }],\n    checkboxable: [{ type: Input }],\n    headerCheckboxable: [{ type: Input }],\n    headerClass: [{ type: Input }],\n    cellClass: [{ type: Input }],\n    isTreeColumn: [{ type: Input }],\n    treeLevelIndent: [{ type: Input }],\n    summaryFunc: [{ type: Input }],\n    summaryTemplate: [{ type: Input }],\n    _cellTemplateInput: [{ type: Input, args: ['cellTemplate',] }],\n    _cellTemplateQuery: [{ type: ContentChild, args: [DataTableColumnCellDirective, { read: TemplateRef, static: true },] }],\n    _headerTemplateInput: [{ type: Input, args: ['headerTemplate',] }],\n    _headerTemplateQuery: [{ type: ContentChild, args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true },] }],\n    _treeToggleTemplateInput: [{ type: Input, args: ['treeToggleTemplate',] }],\n    _treeToggleTemplateQuery: [{ type: ContentChild, args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true },] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableColumnDirective.prototype.name;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.prop;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.frozenLeft;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.frozenRight;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.flexGrow;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.resizeable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.comparator;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.pipe;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.sortable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.draggable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.canAutoResize;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.minWidth;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.width;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.maxWidth;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.checkboxable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.headerCheckboxable;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.headerClass;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.cellClass;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.isTreeColumn;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.treeLevelIndent;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.summaryFunc;\n    /** @type {?} */\n    DataTableColumnDirective.prototype.summaryTemplate;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._cellTemplateInput;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._cellTemplateQuery;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._headerTemplateInput;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._headerTemplateQuery;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._treeToggleTemplateInput;\n    /** @type {?} */\n    DataTableColumnDirective.prototype._treeToggleTemplateQuery;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableColumnDirective.prototype.isFirstChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableColumnDirective.prototype.columnChangesService;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableRowDetailTemplateDirective {\n    /**\n     * @param {?} template\n     */\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableRowDetailTemplateDirective.ɵfac = function DatatableRowDetailTemplateDirective_Factory(t) { return new (t || DatatableRowDetailTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nDatatableRowDetailTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DatatableRowDetailTemplateDirective, selectors: [[\"\", \"ngx-datatable-row-detail-template\", \"\"]] });\n/** @nocollapse */\nDatatableRowDetailTemplateDirective.ctorParameters = () => [\n    { type: TemplateRef }\n];\nif (false) {\n    /** @type {?} */\n    DatatableRowDetailTemplateDirective.prototype.template;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableRowDetailDirective {\n    constructor() {\n        /**\n         * The detail row height is required especially\n         * when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Row detail row visbility was toggled.\n         */\n        this.toggle = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of the row\n     * @param {?} row\n     * @return {?}\n     */\n    toggleExpandRow(row) {\n        this.toggle.emit({\n            type: 'row',\n            value: row\n        });\n    }\n    /**\n     * API method to expand all the rows.\n     * @return {?}\n     */\n    expandAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * API method to collapse all the rows.\n     * @return {?}\n     */\n    collapseAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableRowDetailDirective.ɵfac = function DatatableRowDetailDirective_Factory(t) { return new (t || DatatableRowDetailDirective)(); };\nDatatableRowDetailDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DatatableRowDetailDirective, selectors: [[\"ngx-datatable-row-detail\"]], contentQueries: function DatatableRowDetailDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticContentQuery(dirIndex, DatatableRowDetailTemplateDirective, true, TemplateRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\n    } }, inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" } });\nDatatableRowDetailDirective.propDecorators = {\n    rowHeight: [{ type: Input }],\n    _templateInput: [{ type: Input, args: ['template',] }],\n    _templateQuery: [{ type: ContentChild, args: [DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true },] }],\n    toggle: [{ type: Output }]\n};\nif (false) {\n    /**\n     * The detail row height is required especially\n     * when virtual scroll is enabled.\n     * @type {?}\n     */\n    DatatableRowDetailDirective.prototype.rowHeight;\n    /** @type {?} */\n    DatatableRowDetailDirective.prototype._templateInput;\n    /** @type {?} */\n    DatatableRowDetailDirective.prototype._templateQuery;\n    /**\n     * Row detail row visbility was toggled.\n     * @type {?}\n     */\n    DatatableRowDetailDirective.prototype.toggle;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableFooterDirective {\n    /**\n     * @return {?}\n     */\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n}\nDatatableFooterDirective.ɵfac = function DatatableFooterDirective_Factory(t) { return new (t || DatatableFooterDirective)(); };\nDatatableFooterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DatatableFooterDirective, selectors: [[\"ngx-datatable-footer\"]], contentQueries: function DatatableFooterDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableFooterTemplateDirective, true, TemplateRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\n    } }, inputs: { footerHeight: \"footerHeight\", totalMessage: \"totalMessage\", selectedMessage: \"selectedMessage\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", _templateInput: [\"template\", \"_templateInput\"] } });\nDatatableFooterDirective.propDecorators = {\n    footerHeight: [{ type: Input }],\n    totalMessage: [{ type: Input }],\n    selectedMessage: [{ type: Input }],\n    pagerLeftArrowIcon: [{ type: Input }],\n    pagerRightArrowIcon: [{ type: Input }],\n    pagerPreviousIcon: [{ type: Input }],\n    pagerNextIcon: [{ type: Input }],\n    _templateInput: [{ type: Input, args: ['template',] }],\n    _templateQuery: [{ type: ContentChild, args: [DataTableFooterTemplateDirective, { read: TemplateRef, static: false },] }]\n};\nif (false) {\n    /** @type {?} */\n    DatatableFooterDirective.prototype.footerHeight;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.totalMessage;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.selectedMessage;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerLeftArrowIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerRightArrowIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerPreviousIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype.pagerNextIcon;\n    /** @type {?} */\n    DatatableFooterDirective.prototype._templateInput;\n    /** @type {?} */\n    DatatableFooterDirective.prototype._templateQuery;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns the columns by pin.\n * @param {?} cols\n * @return {?}\n */\nfunction columnsByPin(cols) {\n    /** @type {?} */\n    const ret = {\n        left: [],\n        center: [],\n        right: []\n    };\n    if (cols) {\n        for (const col of cols) {\n            if (col.frozenLeft) {\n                ret.left.push(col);\n            }\n            else if (col.frozenRight) {\n                ret.right.push(col);\n            }\n            else {\n                ret.center.push(col);\n            }\n        }\n    }\n    return ret;\n}\n/**\n * Returns the widths of all group sets of a column\n * @param {?} groups\n * @param {?} all\n * @return {?}\n */\nfunction columnGroupWidths(groups, all) {\n    return {\n        left: columnTotalWidth(groups.left),\n        center: columnTotalWidth(groups.center),\n        right: columnTotalWidth(groups.right),\n        total: Math.floor(columnTotalWidth(all))\n    };\n}\n/**\n * Calculates the total width of all columns and their groups\n * @param {?} columns\n * @param {?=} prop\n * @return {?}\n */\nfunction columnTotalWidth(columns, prop) {\n    /** @type {?} */\n    let totalWidth = 0;\n    if (columns) {\n        for (const c of columns) {\n            /** @type {?} */\n            const has = prop && c[prop];\n            /** @type {?} */\n            const width = has ? c[prop] : c.width;\n            totalWidth = totalWidth + parseFloat(width);\n        }\n    }\n    return totalWidth;\n}\n/**\n * Calculates the total width of all columns and their groups\n * @param {?} columns\n * @param {?=} prop\n * @return {?}\n */\nfunction columnsTotalWidth(columns, prop) {\n    /** @type {?} */\n    let totalWidth = 0;\n    for (const column of columns) {\n        /** @type {?} */\n        const has = prop && column[prop];\n        totalWidth = totalWidth + (has ? column[prop] : column.width);\n    }\n    return totalWidth;\n}\n/**\n * @param {?} val\n * @return {?}\n */\nfunction columnsByPinArr(val) {\n    /** @type {?} */\n    const colsByPinArr = [];\n    /** @type {?} */\n    const colsByPin = columnsByPin(val);\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n    return colsByPinArr;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nclass RowHeightCache {\n    constructor() {\n        /**\n         * Tree Array stores the cumulative information of the row heights to perform efficient\n         * range queries and updates.  Currently the tree is initialized to the base row\n         * height instead of the detail row height.\n         */\n        this.treeArray = [];\n    }\n    /**\n     * Clear the Tree array.\n     * @return {?}\n     */\n    clearCache() {\n        this.treeArray = [];\n    }\n    /**\n     * Initialize the Fenwick tree with row Heights.\n     *\n     * @param {?} details\n     * @return {?}\n     */\n    initCache(details) {\n        const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n        /** @type {?} */\n        const isFn = typeof rowHeight === 'function';\n        /** @type {?} */\n        const isDetailFn = typeof detailRowHeight === 'function';\n        if (!isFn && isNaN(rowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n        if (!isDetailFn && isNaN(detailRowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        /** @type {?} */\n        const n = externalVirtual ? rowCount : rows.length;\n        this.treeArray = new Array(n);\n        for (let i = 0; i < n; ++i) {\n            this.treeArray[i] = 0;\n        }\n        for (let i = 0; i < n; ++i) {\n            /** @type {?} */\n            const row = rows[i];\n            /** @type {?} */\n            let currentRowHeight = rowHeight;\n            if (isFn) {\n                currentRowHeight = rowHeight(row);\n            }\n            // Add the detail row height to the already expanded rows.\n            // This is useful for the table that goes through a filter or sort.\n            /** @type {?} */\n            const expanded = rowExpansions.get(row);\n            if (row && expanded === 1) {\n                if (isDetailFn) {\n                    /** @type {?} */\n                    const index = rowIndexes.get(row);\n                    currentRowHeight += detailRowHeight(row, index);\n                }\n                else {\n                    currentRowHeight += detailRowHeight;\n                }\n            }\n            this.update(i, currentRowHeight);\n        }\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.  Below handles edge cases.\n     * @param {?} scrollY\n     * @return {?}\n     */\n    getRowIndex(scrollY) {\n        if (scrollY === 0)\n            return 0;\n        return this.calcRowIndex(scrollY);\n    }\n    /**\n     * When a row is expanded or rowHeight is changed, update the height.  This can\n     * be utilized in future when Angular Data table supports dynamic row heights.\n     * @param {?} atRowIndex\n     * @param {?} byRowHeight\n     * @return {?}\n     */\n    update(atRowIndex, byRowHeight) {\n        if (!this.treeArray.length) {\n            throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n        }\n        /** @type {?} */\n        const n = this.treeArray.length;\n        atRowIndex |= 0;\n        while (atRowIndex < n) {\n            this.treeArray[atRowIndex] += byRowHeight;\n            atRowIndex |= atRowIndex + 1;\n        }\n    }\n    /**\n     * Range Sum query from 1 to the rowIndex\n     * @param {?} atIndex\n     * @return {?}\n     */\n    query(atIndex) {\n        if (!this.treeArray.length) {\n            throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n        }\n        /** @type {?} */\n        let sum = 0;\n        atIndex |= 0;\n        while (atIndex >= 0) {\n            sum += this.treeArray[atIndex];\n            atIndex = (atIndex & (atIndex + 1)) - 1;\n        }\n        return sum;\n    }\n    /**\n     * Find the total height between 2 row indexes\n     * @param {?} atIndexA\n     * @param {?} atIndexB\n     * @return {?}\n     */\n    queryBetween(atIndexA, atIndexB) {\n        return this.query(atIndexB) - this.query(atIndexA - 1);\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.\n     * @private\n     * @param {?} sum\n     * @return {?}\n     */\n    calcRowIndex(sum) {\n        if (!this.treeArray.length)\n            return 0;\n        /** @type {?} */\n        let pos = -1;\n        /** @type {?} */\n        const dataLength = this.treeArray.length;\n        // Get the highest bit for the block size.\n        /** @type {?} */\n        const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n        for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n            /** @type {?} */\n            const nextPos = pos + blockSize;\n            if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n                sum -= this.treeArray[nextPos];\n                pos = nextPos;\n            }\n        }\n        return pos + 1;\n    }\n}\nif (false) {\n    /**\n     * Tree Array stores the cumulative information of the row heights to perform efficient\n     * range queries and updates.  Currently the tree is initialized to the base row\n     * height instead of the detail row height.\n     * @type {?}\n     * @private\n     */\n    RowHeightCache.prototype.treeArray;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst cache = {};\n/** @type {?} */\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\n// Get Prefix\n// http://davidwalsh.name/vendor-prefix\nconst ɵ0 = /**\n * @return {?}\n */\nfunction () {\n    /** @type {?} */\n    const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n    /** @type {?} */\n    const match = typeof styles !== 'undefined'\n        ? Array.prototype.slice\n            .call(styles)\n            .join('')\n            .match(/-(moz|webkit|ms)-/)\n        : null;\n    /** @type {?} */\n    const pre = match !== null ? match[1] : undefined;\n    // tslint:disable-next-line: tsr-detect-non-literal-regexp\n    /** @type {?} */\n    const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n    return dom\n        ? {\n            dom,\n            lowercase: pre,\n            css: `-${pre}-`,\n            js: pre[0].toUpperCase() + pre.substr(1)\n        }\n        : undefined;\n};\n/** @type {?} */\nconst prefix = ((ɵ0))();\n/**\n * @param {?} property\n * @return {?}\n */\nfunction getVendorPrefixedName(property) {\n    /** @type {?} */\n    const name = camelCase(property);\n    if (!cache[name]) {\n        if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n            cache[name] = prefix.css + property;\n        }\n        else if (testStyle[property] !== undefined) {\n            cache[name] = property;\n        }\n    }\n    return cache[name];\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// browser detection and prefixing tools\n/** @type {?} */\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\n/** @type {?} */\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\n/** @type {?} */\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\n/** @type {?} */\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\n/** @type {?} */\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\n/** @type {?} */\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\n/**\n * @param {?} styles\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction translateXY(styles, x, y) {\n    if (typeof transform !== 'undefined' && hasCSSTransforms) {\n        if (!isSafari && hasCSS3DTransforms) {\n            styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n            styles[backfaceVisibility] = 'hidden';\n        }\n        else {\n            styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n        }\n    }\n    else {\n        styles.top = `${y}px`;\n        styles.left = `${x}px`;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableBodyComponent {\n    /**\n     * Creates an instance of DataTableBodyComponent.\n     * @param {?} cd\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.selected = [];\n        this.scroll = new EventEmitter();\n        this.page = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n        this.detailToggle = new EventEmitter();\n        this.rowContextmenu = new EventEmitter(false);\n        this.treeAction = new EventEmitter();\n        this.rowHeightsCache = new RowHeightCache();\n        this.temp = [];\n        this.offsetY = 0;\n        this.indexes = {};\n        this.rowIndexes = new Map();\n        this.rowExpansions = new Map();\n        /**\n         * Get the height of the detail row.\n         */\n        this.getDetailRowHeight = (/**\n         * @param {?=} row\n         * @param {?=} index\n         * @return {?}\n         */\n        (row, index) => {\n            if (!this.rowDetail) {\n                return 0;\n            }\n            /** @type {?} */\n            const rowHeight = this.rowDetail.rowHeight;\n            return typeof rowHeight === 'function' ? rowHeight(row, index) : ((/** @type {?} */ (rowHeight)));\n        });\n        // declare fn here so we can get access to the `this` property\n        this.rowTrackingFn = (/**\n         * @param {?} index\n         * @param {?} row\n         * @return {?}\n         */\n        (index, row) => {\n            /** @type {?} */\n            const idx = this.getRowIndex(row);\n            if (this.trackByProp) {\n                return row[this.trackByProp];\n            }\n            else {\n                return idx;\n            }\n        });\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set pageSize(val) {\n        this._pageSize = val;\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get pageSize() {\n        return this._pageSize;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rows(val) {\n        this._rows = val;\n        this.rowExpansions.clear();\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get rows() {\n        return this._rows;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        this._columns = val;\n        /** @type {?} */\n        const colsByPin = columnsByPin(val);\n        this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set offset(val) {\n        this._offset = val;\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get offset() {\n        return this._offset;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowCount(val) {\n        this._rowCount = val;\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get rowCount() {\n        return this._rowCount;\n    }\n    /**\n     * @return {?}\n     */\n    get bodyWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        else {\n            return '100%';\n        }\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set bodyHeight(val) {\n        if (this.scrollbarV) {\n            this._bodyHeight = val + 'px';\n        }\n        else {\n            this._bodyHeight = 'auto';\n        }\n        this.recalcLayout();\n    }\n    /**\n     * @return {?}\n     */\n    get bodyHeight() {\n        return this._bodyHeight;\n    }\n    /**\n     * Returns if selection is enabled.\n     * @return {?}\n     */\n    get selectEnabled() {\n        return !!this.selectionType;\n    }\n    /**\n     * Property that would calculate the height of scroll bar\n     * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n     * calculate scroll height automatically (as height will be undefined).\n     * @return {?}\n     */\n    get scrollHeight() {\n        if (this.scrollbarV && this.virtualization && this.rowCount) {\n            return this.rowHeightsCache.query(this.rowCount - 1);\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n    /**\n     * Called after the constructor, initializing input properties\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.rowDetail) {\n            this.listener = this.rowDetail.toggle.subscribe((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ type, value }) => {\n                if (type === 'row') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            }));\n        }\n        if (this.groupHeader) {\n            this.listener = this.groupHeader.toggle.subscribe((/**\n             * @param {?} __0\n             * @return {?}\n             */\n            ({ type, value }) => {\n                if (type === 'group') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            }));\n        }\n    }\n    /**\n     * Called once, before the instance is destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.rowDetail || this.groupHeader) {\n            this.listener.unsubscribe();\n        }\n    }\n    /**\n     * Updates the Y offset given a new offset.\n     * @param {?=} offset\n     * @return {?}\n     */\n    updateOffsetY(offset) {\n        // scroller is missing on empty table\n        if (!this.scroller) {\n            return;\n        }\n        if (this.scrollbarV && this.virtualization && offset) {\n            // First get the row Index that we need to move to.\n            /** @type {?} */\n            const rowIndex = this.pageSize * offset;\n            offset = this.rowHeightsCache.query(rowIndex - 1);\n        }\n        else if (this.scrollbarV && !this.virtualization) {\n            offset = 0;\n        }\n        this.scroller.setOffset(offset || 0);\n    }\n    /**\n     * Body was scrolled, this is mainly useful for\n     * when a user is server-side pagination via virtual scroll.\n     * @param {?} event\n     * @return {?}\n     */\n    onBodyScroll(event) {\n        /** @type {?} */\n        const scrollYPos = event.scrollYPos;\n        /** @type {?} */\n        const scrollXPos = event.scrollXPos;\n        // if scroll change, trigger update\n        // this is mainly used for header cell positions\n        if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n            this.scroll.emit({\n                offsetY: scrollYPos,\n                offsetX: scrollXPos\n            });\n        }\n        this.offsetY = scrollYPos;\n        this.offsetX = scrollXPos;\n        this.updateIndexes();\n        this.updatePage(event.direction);\n        this.updateRows();\n    }\n    /**\n     * Updates the page given a direction.\n     * @param {?} direction\n     * @return {?}\n     */\n    updatePage(direction) {\n        /** @type {?} */\n        let offset = this.indexes.first / this.pageSize;\n        if (direction === 'up') {\n            offset = Math.ceil(offset);\n        }\n        else if (direction === 'down') {\n            offset = Math.floor(offset);\n        }\n        if (direction !== undefined && !isNaN(offset)) {\n            this.page.emit({ offset });\n        }\n    }\n    /**\n     * Updates the rows in the view port\n     * @return {?}\n     */\n    updateRows() {\n        const { first, last } = this.indexes;\n        /** @type {?} */\n        let rowIndex = first;\n        /** @type {?} */\n        let idx = 0;\n        /** @type {?} */\n        const temp = [];\n        this.rowIndexes.clear();\n        // if grouprowsby has been specified treat row paging\n        // parameters as group paging parameters ie if limit 10 has been\n        // specified treat it as 10 groups rather than 10 rows\n        if (this.groupedRows) {\n            /** @type {?} */\n            let maxRowsPerGroup = 3;\n            // if there is only one group set the maximum number of\n            // rows per group the same as the total number of rows\n            if (this.groupedRows.length === 1) {\n                maxRowsPerGroup = this.groupedRows[0].value.length;\n            }\n            while (rowIndex < last && rowIndex < this.groupedRows.length) {\n                // Add the groups into this page\n                /** @type {?} */\n                const group = this.groupedRows[rowIndex];\n                temp[idx] = group;\n                idx++;\n                // Group index in this context\n                rowIndex++;\n            }\n        }\n        else {\n            while (rowIndex < last && rowIndex < this.rowCount) {\n                /** @type {?} */\n                const row = this.rows[rowIndex];\n                if (row) {\n                    this.rowIndexes.set(row, rowIndex);\n                    temp[idx] = row;\n                }\n                idx++;\n                rowIndex++;\n            }\n        }\n        this.temp = temp;\n    }\n    /**\n     * Get the row height\n     * @param {?} row\n     * @return {?}\n     */\n    getRowHeight(row) {\n        // if its a function return it\n        if (typeof this.rowHeight === 'function') {\n            return this.rowHeight(row);\n        }\n        return (/** @type {?} */ (this.rowHeight));\n    }\n    /**\n     * @param {?} group the group with all rows\n     * @return {?}\n     */\n    getGroupHeight(group) {\n        /** @type {?} */\n        let rowHeight = 0;\n        if (group.value) {\n            for (let index = 0; index < group.value.length; index++) {\n                rowHeight += this.getRowAndDetailHeight(group.value[index]);\n            }\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculate row height based on the expanded state of the row.\n     * @param {?} row\n     * @return {?}\n     */\n    getRowAndDetailHeight(row) {\n        /** @type {?} */\n        let rowHeight = this.getRowHeight(row);\n        /** @type {?} */\n        const expanded = this.rowExpansions.get(row);\n        // Adding detail row height if its expanded.\n        if (expanded === 1) {\n            rowHeight += this.getDetailRowHeight(row);\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculates the styles for the row so that the rows can be moved in 2D space\n     * during virtual scroll inside the DOM.   In the below case the Y position is\n     * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n     * 100 px then following styles are generated:\n     *\n     * transform: translate3d(0px, 0px, 0px);    ->  row0\n     * transform: translate3d(0px, 30px, 0px);   ->  row1\n     * transform: translate3d(0px, 130px, 0px);  ->  row2\n     *\n     * Row heights have to be calculated based on the row heights cache as we wont\n     * be able to determine which row is of what height before hand.  In the above\n     * case the positionY of the translate3d for row2 would be the sum of all the\n     * heights of the rows before it (i.e. row0 and row1).\n     *\n     * \\@memberOf DataTableBodyComponent\n     * @param {?} rows the row that needs to be placed in the 2D space.\n     * @return {?} the CSS3 style to be applied\n     *\n     */\n    getRowsStyles(rows) {\n        /** @type {?} */\n        const styles = {};\n        // only add styles for the group if there is a group\n        if (this.groupedRows) {\n            styles.width = this.columnGroupWidths.total;\n        }\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            let idx = 0;\n            if (this.groupedRows) {\n                // Get the latest row rowindex in a group\n                /** @type {?} */\n                const row = rows[rows.length - 1];\n                idx = row ? this.getRowIndex(row) : 0;\n            }\n            else {\n                idx = this.getRowIndex(rows);\n            }\n            // const pos = idx * rowHeight;\n            // The position of this row would be the sum of all row heights\n            // until the previous row position.\n            /** @type {?} */\n            const pos = this.rowHeightsCache.query(idx - 1);\n            translateXY(styles, 0, pos);\n        }\n        return styles;\n    }\n    /**\n     * Calculate bottom summary row offset for scrollbar mode.\n     * For more information about cache and offset calculation\n     * see description for `getRowsStyles` method\n     *\n     * \\@memberOf DataTableBodyComponent\n     * @return {?} the CSS3 style to be applied\n     *\n     */\n    getBottomSummaryRowStyles() {\n        if (!this.scrollbarV || !this.rows || !this.rows.length) {\n            return null;\n        }\n        /** @type {?} */\n        const styles = { position: 'absolute' };\n        /** @type {?} */\n        const pos = this.rowHeightsCache.query(this.rows.length - 1);\n        translateXY(styles, 0, pos);\n        return styles;\n    }\n    /**\n     * Hides the loading indicator\n     * @return {?}\n     */\n    hideIndicator() {\n        setTimeout((/**\n         * @return {?}\n         */\n        () => (this.loadingIndicator = false)), 500);\n    }\n    /**\n     * Updates the index of the rows in the viewport\n     * @return {?}\n     */\n    updateIndexes() {\n        /** @type {?} */\n        let first = 0;\n        /** @type {?} */\n        let last = 0;\n        if (this.scrollbarV) {\n            if (this.virtualization) {\n                // Calculation of the first and last indexes will be based on where the\n                // scrollY position would be at.  The last index would be the one\n                // that shows up inside the view port the last.\n                /** @type {?} */\n                const height = parseInt(this.bodyHeight, 0);\n                first = this.rowHeightsCache.getRowIndex(this.offsetY);\n                last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n            }\n            else {\n                // If virtual rows are not needed\n                // We render all in one go\n                first = 0;\n                last = this.rowCount;\n            }\n        }\n        else {\n            // The server is handling paging and will pass an array that begins with the\n            // element at a specified offset.  first should always be 0 with external paging.\n            if (!this.externalPaging) {\n                first = Math.max(this.offset * this.pageSize, 0);\n            }\n            last = Math.min(first + this.pageSize, this.rowCount);\n        }\n        this.indexes = { first, last };\n    }\n    /**\n     * Refreshes the full Row Height cache.  Should be used\n     * when the entire row array state has changed.\n     * @return {?}\n     */\n    refreshRowHeightCache() {\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n            return;\n        }\n        // clear the previous row height cache if already present.\n        // this is useful during sorts, filters where the state of the\n        // rows array is changed.\n        this.rowHeightsCache.clearCache();\n        // Initialize the tree only if there are rows inside the tree.\n        if (this.rows && this.rows.length) {\n            this.rowHeightsCache.initCache({\n                rows: this.rows,\n                rowHeight: this.rowHeight,\n                detailRowHeight: this.getDetailRowHeight,\n                externalVirtual: this.scrollbarV && this.externalPaging,\n                rowCount: this.rowCount,\n                rowIndexes: this.rowIndexes,\n                rowExpansions: this.rowExpansions\n            });\n        }\n    }\n    /**\n     * Gets the index for the view port\n     * @return {?}\n     */\n    getAdjustedViewPortIndex() {\n        // Capture the row index of the first row that is visible on the viewport.\n        // If the scroll bar is just below the row which is highlighted then make that as the\n        // first index.\n        /** @type {?} */\n        const viewPortFirstRowIndex = this.indexes.first;\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n            return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n        }\n        return viewPortFirstRowIndex;\n    }\n    /**\n     * Toggle the Expansion of the row i.e. if the row is expanded then it will\n     * collapse and vice versa.   Note that the expanded status is stored as\n     * a part of the row object itself as we have to preserve the expanded row\n     * status in case of sorting and filtering of the row set.\n     * @param {?} row\n     * @return {?}\n     */\n    toggleRowExpansion(row) {\n        // Capture the row index of the first row that is visible on the viewport.\n        /** @type {?} */\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        /** @type {?} */\n        let expanded = this.rowExpansions.get(row);\n        // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n            // const idx = this.rowIndexes.get(row) || 0;\n            /** @type {?} */\n            const idx = this.getRowIndex(row);\n            this.rowHeightsCache.update(idx, detailRowHeight);\n        }\n        // Update the toggled row and update thive nevere heights in the cache.\n        expanded = expanded ^= 1;\n        this.rowExpansions.set(row, expanded);\n        this.detailToggle.emit({\n            rows: [row],\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Expand/Collapse all the rows no matter what their state is.\n     * @param {?} expanded\n     * @return {?}\n     */\n    toggleAllRows(expanded) {\n        // clear prev expansions\n        this.rowExpansions.clear();\n        /** @type {?} */\n        const rowExpanded = expanded ? 1 : 0;\n        // Capture the row index of the first row that is visible on the viewport.\n        /** @type {?} */\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        for (const row of this.rows) {\n            this.rowExpansions.set(row, rowExpanded);\n        }\n        if (this.scrollbarV) {\n            // Refresh the full row heights cache since every row was affected.\n            this.recalcLayout();\n        }\n        // Emit all rows that have been expanded.\n        this.detailToggle.emit({\n            rows: this.rows,\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Recalculates the table\n     * @return {?}\n     */\n    recalcLayout() {\n        this.refreshRowHeightCache();\n        this.updateIndexes();\n        this.updateRows();\n    }\n    /**\n     * Tracks the column\n     * @param {?} index\n     * @param {?} column\n     * @return {?}\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * Gets the row pinning group styles\n     * @param {?} group\n     * @return {?}\n     */\n    stylesByGroup(group) {\n        /** @type {?} */\n        const widths = this.columnGroupWidths;\n        /** @type {?} */\n        const offsetX = this.offsetX;\n        /** @type {?} */\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            /** @type {?} */\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            /** @type {?} */\n            const totalDiff = widths.total - bodyWidth;\n            /** @type {?} */\n            const offsetDiff = totalDiff - offsetX;\n            /** @type {?} */\n            const offset = offsetDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    /**\n     * Returns if the row was expanded and set default row expansion when row expansion is empty\n     * @param {?} row\n     * @return {?}\n     */\n    getRowExpanded(row) {\n        if (this.rowExpansions.size === 0 && this.groupExpansionDefault) {\n            for (const group of this.groupedRows) {\n                this.rowExpansions.set(group, 1);\n            }\n        }\n        /** @type {?} */\n        const expanded = this.rowExpansions.get(row);\n        return expanded === 1;\n    }\n    /**\n     * Gets the row index given a row\n     * @param {?} row\n     * @return {?}\n     */\n    getRowIndex(row) {\n        return this.rowIndexes.get(row) || 0;\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    onTreeAction(row) {\n        this.treeAction.emit({ row });\n    }\n}\nDataTableBodyComponent.ɵfac = function DataTableBodyComponent_Factory(t) { return new (t || DataTableBodyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nDataTableBodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableBodyComponent, selectors: [[\"datatable-body\"]], viewQuery: function DataTableBodyComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(ScrollerComponent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n    } }, hostAttrs: [1, \"datatable-body\"], hostVars: 4, hostBindings: function DataTableBodyComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.bodyWidth)(\"height\", ctx.bodyHeight);\n    } }, inputs: { selected: \"selected\", pageSize: \"pageSize\", rows: \"rows\", columns: \"columns\", offset: \"offset\", rowCount: \"rowCount\", bodyHeight: \"bodyHeight\", offsetX: \"offsetX\", loadingIndicator: \"loadingIndicator\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", externalPaging: \"externalPaging\", rowHeight: \"rowHeight\", emptyMessage: \"emptyMessage\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", rowClass: \"rowClass\", groupedRows: \"groupedRows\", groupExpansionDefault: \"groupExpansionDefault\", innerWidth: \"innerWidth\", groupRowsBy: \"groupRowsBy\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryPosition: \"summaryPosition\", summaryHeight: \"summaryHeight\" }, outputs: { scroll: \"scroll\", page: \"page\", activate: \"activate\", select: \"select\", detailToggle: \"detailToggle\", rowContextmenu: \"rowContextmenu\", treeAction: \"treeAction\" }, decls: 5, vars: 9, consts: [[3, \"selected\", \"rows\", \"selectCheck\", \"selectEnabled\", \"selectionType\", \"rowIdentity\", \"select\", \"activate\"], [\"selector\", \"\"], [4, \"ngIf\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\", 4, \"ngIf\"], [\"class\", \"empty-row\", 3, \"innerHTML\", 4, \"ngIf\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\", 4, \"ngIf\", \"ngIfElse\"], [\"groupedRowsTemplate\", \"\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\"], [3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [1, \"empty-row\", 3, \"innerHTML\"]], template: function DataTableBodyComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"datatable-selection\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"select\", function DataTableBodyComponent_Template_datatable_selection_select_0_listener($event) { return ctx.select.emit($event); })(\"activate\", function DataTableBodyComponent_Template_datatable_selection_activate_0_listener($event) { return ctx.activate.emit($event); });\n        ɵngcc0.ɵɵtemplate(2, DataTableBodyComponent_datatable_progress_2_Template, 1, 0, \"datatable-progress\", 2);\n        ɵngcc0.ɵɵtemplate(3, DataTableBodyComponent_datatable_scroller_3_Template, 4, 8, \"datatable-scroller\", 3);\n        ɵngcc0.ɵɵtemplate(4, DataTableBodyComponent_div_4_Template, 1, 1, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"selected\", ctx.selected)(\"rows\", ctx.rows)(\"selectCheck\", ctx.selectCheck)(\"selectEnabled\", ctx.selectEnabled)(\"selectionType\", ctx.selectionType)(\"rowIdentity\", ctx.rowIdentity);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.loadingIndicator);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.rows == null ? null : ctx.rows.length);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !(ctx.rows == null ? null : ctx.rows.length) && !ctx.loadingIndicator);\n    } }, directives: function () { return [DataTableSelectionComponent, ɵngcc1.NgIf, ProgressBarComponent,\n        ScrollerComponent, ɵngcc1.NgForOf, DataTableSummaryRowComponent,\n        DataTableRowWrapperComponent, ɵngcc1.NgStyle, DataTableBodyRowComponent]; }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDataTableBodyComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDataTableBodyComponent.propDecorators = {\n    scrollbarV: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    loadingIndicator: [{ type: Input }],\n    externalPaging: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    emptyMessage: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    selected: [{ type: Input }],\n    rowIdentity: [{ type: Input }],\n    rowDetail: [{ type: Input }],\n    groupHeader: [{ type: Input }],\n    selectCheck: [{ type: Input }],\n    displayCheck: [{ type: Input }],\n    trackByProp: [{ type: Input }],\n    rowClass: [{ type: Input }],\n    groupedRows: [{ type: Input }],\n    groupExpansionDefault: [{ type: Input }],\n    innerWidth: [{ type: Input }],\n    groupRowsBy: [{ type: Input }],\n    virtualization: [{ type: Input }],\n    summaryRow: [{ type: Input }],\n    summaryPosition: [{ type: Input }],\n    summaryHeight: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    rows: [{ type: Input }],\n    columns: [{ type: Input }],\n    offset: [{ type: Input }],\n    rowCount: [{ type: Input }],\n    bodyWidth: [{ type: HostBinding, args: ['style.width',] }],\n    bodyHeight: [{ type: Input }, { type: HostBinding, args: ['style.height',] }],\n    scroll: [{ type: Output }],\n    page: [{ type: Output }],\n    activate: [{ type: Output }],\n    select: [{ type: Output }],\n    detailToggle: [{ type: Output }],\n    rowContextmenu: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    scroller: [{ type: ViewChild, args: [ScrollerComponent, { static: false },] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scrollbarV;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scrollbarH;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.loadingIndicator;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.externalPaging;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowHeight;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.offsetX;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.emptyMessage;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.selected;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowIdentity;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowDetail;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupHeader;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.selectCheck;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.displayCheck;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.trackByProp;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowClass;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupedRows;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupExpansionDefault;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.innerWidth;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.groupRowsBy;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.virtualization;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.summaryRow;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.summaryPosition;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.summaryHeight;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scroll;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.page;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.activate;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.select;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.detailToggle;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowContextmenu;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.treeAction;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.scroller;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowHeightsCache;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.temp;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.offsetY;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.indexes;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.columnGroupWidths;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.columnGroupWidthsWithoutGroup;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowTrackingFn;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.listener;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowIndexes;\n    /** @type {?} */\n    DataTableBodyComponent.prototype.rowExpansions;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._rows;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._bodyHeight;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._columns;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._rowCount;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._offset;\n    /** @type {?} */\n    DataTableBodyComponent.prototype._pageSize;\n    /**\n     * Get the height of the detail row.\n     * @type {?}\n     */\n    DataTableBodyComponent.prototype.getDetailRowHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableHeaderComponent {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.reorder = new EventEmitter();\n        this.resize = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this._columnGroupWidths = {\n            total: 100\n        };\n        this._styleByGroup = {\n            left: {},\n            center: {},\n            right: {}\n        };\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set innerWidth(val) {\n        this._innerWidth = val;\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            if (this._columns) {\n                /** @type {?} */\n                const colByPin = columnsByPin(this._columns);\n                this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n                this.setStylesByGroup();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set headerHeight(val) {\n        if (val !== 'auto') {\n            this._headerHeight = `${val}px`;\n        }\n        else {\n            this._headerHeight = val;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get headerHeight() {\n        return this._headerHeight;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        this._columns = val;\n        /** @type {?} */\n        const colsByPin = columnsByPin(val);\n        this._columnsByPin = columnsByPinArr(val);\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n            this.setStylesByGroup();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set offsetX(val) {\n        this._offsetX = val;\n        this.setStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get offsetX() {\n        return this._offsetX;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onLongPressStart({ event, model }) {\n        model.dragging = true;\n        this.dragEventTarget = event;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onLongPressEnd({ event, model }) {\n        this.dragEventTarget = event;\n        // delay resetting so sort can be\n        // prevented if we were dragging\n        setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            // datatable component creates copies from columns on reorder\n            // set dragging to false on new objects\n            /** @type {?} */\n            const column = this._columns.find((/**\n             * @param {?} c\n             * @return {?}\n             */\n            c => c.$$id === model.$$id));\n            if (column) {\n                column.dragging = false;\n            }\n        }), 5);\n    }\n    /**\n     * @return {?}\n     */\n    get headerWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        return '100%';\n    }\n    /**\n     * @param {?} index\n     * @param {?} colGroup\n     * @return {?}\n     */\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    /**\n     * @param {?} index\n     * @param {?} column\n     * @return {?}\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * @param {?} width\n     * @param {?} column\n     * @return {?}\n     */\n    onColumnResized(width, column) {\n        if (width <= column.minWidth) {\n            width = column.minWidth;\n        }\n        else if (width >= column.maxWidth) {\n            width = column.maxWidth;\n        }\n        this.resize.emit({\n            column,\n            prevValue: column.width,\n            newValue: width\n        });\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnReordered({ prevIndex, newIndex, model }) {\n        /** @type {?} */\n        const column = this.getColumn(newIndex);\n        column.isTarget = false;\n        column.targetMarkerContext = undefined;\n        this.reorder.emit({\n            column: model,\n            prevValue: prevIndex,\n            newValue: newIndex\n        });\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onTargetChanged({ prevIndex, newIndex, initialIndex }) {\n        if (prevIndex || prevIndex === 0) {\n            /** @type {?} */\n            const oldColumn = this.getColumn(prevIndex);\n            oldColumn.isTarget = false;\n            oldColumn.targetMarkerContext = undefined;\n        }\n        if (newIndex || newIndex === 0) {\n            /** @type {?} */\n            const newColumn = this.getColumn(newIndex);\n            newColumn.isTarget = true;\n            if (initialIndex !== newIndex) {\n                newColumn.targetMarkerContext = {\n                    class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n                };\n            }\n        }\n    }\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    getColumn(index) {\n        /** @type {?} */\n        const leftColumnCount = this._columnsByPin[0].columns.length;\n        if (index < leftColumnCount) {\n            return this._columnsByPin[0].columns[index];\n        }\n        /** @type {?} */\n        const centerColumnCount = this._columnsByPin[1].columns.length;\n        if (index < leftColumnCount + centerColumnCount) {\n            return this._columnsByPin[1].columns[index - leftColumnCount];\n        }\n        return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    onSort({ column, prevValue, newValue }) {\n        // if we are dragging don't sort!\n        if (column.dragging) {\n            return;\n        }\n        /** @type {?} */\n        const sorts = this.calcNewSorts(column, prevValue, newValue);\n        this.sort.emit({\n            sorts,\n            column,\n            prevValue,\n            newValue\n        });\n    }\n    /**\n     * @param {?} column\n     * @param {?} prevValue\n     * @param {?} newValue\n     * @return {?}\n     */\n    calcNewSorts(column, prevValue, newValue) {\n        /** @type {?} */\n        let idx = 0;\n        if (!this.sorts) {\n            this.sorts = [];\n        }\n        /** @type {?} */\n        const sorts = this.sorts.map((/**\n         * @param {?} s\n         * @param {?} i\n         * @return {?}\n         */\n        (s, i) => {\n            s = Object.assign({}, s);\n            if (s.prop === column.prop) {\n                idx = i;\n            }\n            return s;\n        }));\n        if (newValue === undefined) {\n            sorts.splice(idx, 1);\n        }\n        else if (prevValue) {\n            sorts[idx].dir = newValue;\n        }\n        else {\n            if (this.sortType === SortType.single) {\n                sorts.splice(0, this.sorts.length);\n            }\n            sorts.push({ dir: newValue, prop: column.prop });\n        }\n        return sorts;\n    }\n    /**\n     * @return {?}\n     */\n    setStylesByGroup() {\n        this._styleByGroup.left = this.calcStylesByGroup('left');\n        this._styleByGroup.center = this.calcStylesByGroup('center');\n        this._styleByGroup.right = this.calcStylesByGroup('right');\n        this.cd.detectChanges();\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    calcStylesByGroup(group) {\n        /** @type {?} */\n        const widths = this._columnGroupWidths;\n        /** @type {?} */\n        const offsetX = this.offsetX;\n        /** @type {?} */\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'center') {\n            translateXY(styles, offsetX * -1, 0);\n        }\n        else if (group === 'right') {\n            /** @type {?} */\n            const totalDiff = widths.total - this.innerWidth;\n            /** @type {?} */\n            const offset = totalDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n}\nDataTableHeaderComponent.ɵfac = function DataTableHeaderComponent_Factory(t) { return new (t || DataTableHeaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nDataTableHeaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableHeaderComponent, selectors: [[\"datatable-header\"]], hostAttrs: [1, \"datatable-header\"], hostVars: 4, hostBindings: function DataTableHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx.headerHeight)(\"width\", ctx.headerWidth);\n    } }, inputs: { innerWidth: \"innerWidth\", headerHeight: \"headerHeight\", columns: \"columns\", offsetX: \"offsetX\", sorts: \"sorts\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", scrollbarH: \"scrollbarH\", dealsWithGroup: \"dealsWithGroup\", targetMarkerTemplate: \"targetMarkerTemplate\", sortType: \"sortType\", allRowsSelected: \"allRowsSelected\", selectionType: \"selectionType\", reorderable: \"reorderable\" }, outputs: { sort: \"sort\", reorder: \"reorder\", resize: \"resize\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, decls: 2, vars: 4, consts: [[\"orderable\", \"\", 1, \"datatable-header-inner\", 3, \"reorder\", \"targetChanged\"], [3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\"]], template: function DataTableHeaderComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"reorder\", function DataTableHeaderComponent_Template_div_reorder_0_listener($event) { return ctx.onColumnReordered($event); })(\"targetChanged\", function DataTableHeaderComponent_Template_div_targetChanged_0_listener($event) { return ctx.onTargetChanged($event); });\n        ɵngcc0.ɵɵtemplate(1, DataTableHeaderComponent_div_1_Template, 2, 5, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx._columnGroupWidths.total, \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\n    } }, directives: function () { return [OrderableDirective, ɵngcc1.NgForOf, ɵngcc1.NgStyle, DataTableHeaderCellComponent,\n        ResizeableDirective,\n        LongPressDirective,\n        DraggableDirective]; }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDataTableHeaderComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDataTableHeaderComponent.propDecorators = {\n    sortAscendingIcon: [{ type: Input }],\n    sortDescendingIcon: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    dealsWithGroup: [{ type: Input }],\n    targetMarkerTemplate: [{ type: Input }],\n    innerWidth: [{ type: Input }],\n    sorts: [{ type: Input }],\n    sortType: [{ type: Input }],\n    allRowsSelected: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    reorderable: [{ type: Input }],\n    headerHeight: [{ type: HostBinding, args: ['style.height',] }, { type: Input }],\n    columns: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    sort: [{ type: Output }],\n    reorder: [{ type: Output }],\n    resize: [{ type: Output }],\n    select: [{ type: Output }],\n    columnContextmenu: [{ type: Output }],\n    headerWidth: [{ type: HostBinding, args: ['style.width',] }]\n};\nif (false) {\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sortAscendingIcon;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sortDescendingIcon;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.scrollbarH;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.dealsWithGroup;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.targetMarkerTemplate;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.targetMarkerContext;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sorts;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sortType;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.allRowsSelected;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.reorderable;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.dragEventTarget;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.sort;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.reorder;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.resize;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.select;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype.columnContextmenu;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._columnsByPin;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._columnGroupWidths;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._innerWidth;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._offsetX;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._columns;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._headerHeight;\n    /** @type {?} */\n    DataTableHeaderComponent.prototype._styleByGroup;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Throttle a function\n * @param {?} func\n * @param {?} wait\n * @param {?=} options\n * @return {?}\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    /** @type {?} */\n    let context;\n    /** @type {?} */\n    let args;\n    /** @type {?} */\n    let result;\n    /** @type {?} */\n    let timeout = null;\n    /** @type {?} */\n    let previous = 0;\n    /**\n     * @return {?}\n     */\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return (/**\n     * @this {?}\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        /** @type {?} */\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    });\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n * @param {?} duration\n * @param {?=} options\n * @return {?}\n */\nfunction throttleable(duration, options) {\n    return (/**\n     * @param {?} target\n     * @param {?} key\n     * @param {?} descriptor\n     * @return {?}\n     */\n    function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: (/**\n             * @return {?}\n             */\n            function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            })\n        };\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Calculates the Total Flex Grow\n * @param {?} columns\n * @return {?}\n */\nfunction getTotalFlexGrow(columns) {\n    /** @type {?} */\n    let totalFlexGrow = 0;\n    for (const c of columns) {\n        totalFlexGrow += c.flexGrow || 0;\n    }\n    return totalFlexGrow;\n}\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n * @param {?} allColumns\n * @param {?} expectedWidth\n * @return {?}\n */\nfunction adjustColumnWidths(allColumns, expectedWidth) {\n    /** @type {?} */\n    const columnsWidth = columnsTotalWidth(allColumns);\n    /** @type {?} */\n    const totalFlexGrow = getTotalFlexGrow(allColumns);\n    /** @type {?} */\n    const colsByGroup = columnsByPin(allColumns);\n    if (columnsWidth !== expectedWidth) {\n        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n    }\n}\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n * @param {?} colsByGroup\n * @param {?} maxWidth\n * @param {?} totalFlexGrow\n * @return {?}\n */\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\n    // calculate total width and flexgrow points for coulumns that can be resized\n    for (const attr in colsByGroup) {\n        for (const column of colsByGroup[attr]) {\n            if (!column.canAutoResize) {\n                maxWidth -= column.width;\n                totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n            }\n            else {\n                column.width = 0;\n            }\n        }\n    }\n    /** @type {?} */\n    const hasMinWidth = {};\n    /** @type {?} */\n    let remainingWidth = maxWidth;\n    // resize columns until no width is left to be distributed\n    do {\n        /** @type {?} */\n        const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n        remainingWidth = 0;\n        for (const attr in colsByGroup) {\n            for (const column of colsByGroup[attr]) {\n                // if the column can be resize and it hasn't reached its minimum width yet\n                if (column.canAutoResize && !hasMinWidth[column.prop]) {\n                    /** @type {?} */\n                    const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n                    if (column.minWidth !== undefined && newWidth < column.minWidth) {\n                        remainingWidth += newWidth - column.minWidth;\n                        column.width = column.minWidth;\n                        hasMinWidth[column.prop] = true;\n                    }\n                    else {\n                        column.width = newWidth;\n                    }\n                }\n            }\n        }\n    } while (remainingWidth !== 0);\n}\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n * @param {?} allColumns\n * @param {?} expectedWidth\n * @param {?} startIdx\n * @param {?} allowBleed\n * @param {?=} defaultColWidth\n * @return {?}\n */\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth = 300) {\n    /** @type {?} */\n    const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter((/**\n     * @param {?} c\n     * @return {?}\n     */\n    c => {\n        return c.canAutoResize !== false;\n    }));\n    for (const column of columnsToResize) {\n        if (!column.$$oldWidth) {\n            column.$$oldWidth = column.width;\n        }\n    }\n    /** @type {?} */\n    let additionWidthPerColumn = 0;\n    /** @type {?} */\n    let exceedsWindow = false;\n    /** @type {?} */\n    let contentWidth = getContentWidth(allColumns, defaultColWidth);\n    /** @type {?} */\n    let remainingWidth = expectedWidth - contentWidth;\n    /** @type {?} */\n    const columnsProcessed = [];\n    /** @type {?} */\n    const remainingWidthLimit = 1;\n    // This loop takes care of the\n    do {\n        additionWidthPerColumn = remainingWidth / columnsToResize.length;\n        exceedsWindow = contentWidth >= expectedWidth;\n        for (const column of columnsToResize) {\n            if (exceedsWindow && allowBleed) {\n                column.width = column.$$oldWidth || column.width || defaultColWidth;\n            }\n            else {\n                /** @type {?} */\n                const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n                if (column.minWidth && newSize < column.minWidth) {\n                    column.width = column.minWidth;\n                    columnsProcessed.push(column);\n                }\n                else if (column.maxWidth && newSize > column.maxWidth) {\n                    column.width = column.maxWidth;\n                    columnsProcessed.push(column);\n                }\n                else {\n                    column.width = newSize;\n                }\n            }\n            column.width = Math.max(0, column.width);\n        }\n        contentWidth = getContentWidth(allColumns);\n        remainingWidth = expectedWidth - contentWidth;\n        removeProcessedColumns(columnsToResize, columnsProcessed);\n    } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n/**\n * Remove the processed columns from the current active columns.\n * @param {?} columnsToResize\n * @param {?} columnsProcessed\n * @return {?}\n */\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\n    for (const column of columnsProcessed) {\n        /** @type {?} */\n        const index = columnsToResize.indexOf(column);\n        columnsToResize.splice(index, 1);\n    }\n}\n/**\n * Gets the width of the columns\n * @param {?} allColumns\n * @param {?=} defaultColWidth\n * @return {?}\n */\nfunction getContentWidth(allColumns, defaultColWidth = 300) {\n    /** @type {?} */\n    let contentWidth = 0;\n    for (const column of allColumns) {\n        contentWidth += column.width || defaultColWidth;\n    }\n    return contentWidth;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst SortDirection = {\n    asc: 'asc',\n    desc: 'desc',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Gets the next sort direction\n * @param {?} sortType\n * @param {?} current\n * @return {?}\n */\nfunction nextSortDir(sortType, current) {\n    if (sortType === SortType.single) {\n        if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else {\n            return SortDirection.asc;\n        }\n    }\n    else {\n        if (!current) {\n            return SortDirection.asc;\n        }\n        else if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else if (current === SortDirection.desc) {\n            return undefined;\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n}\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction orderByComparator(a, b) {\n    if (a === null || typeof a === 'undefined')\n        a = 0;\n    if (b === null || typeof b === 'undefined')\n        b = 0;\n    if (a instanceof Date && b instanceof Date) {\n        if (a < b)\n            return -1;\n        if (a > b)\n            return 1;\n    }\n    else if (isNaN(parseFloat(a)) || !isFinite(a) || (isNaN(parseFloat(b)) || !isFinite(b))) {\n        // Convert to string in case of a=0 or b=0\n        a = String(a);\n        b = String(b);\n        // Isn't a number so lowercase the string to properly compare\n        if (a.toLowerCase() < b.toLowerCase())\n            return -1;\n        if (a.toLowerCase() > b.toLowerCase())\n            return 1;\n    }\n    else {\n        // Parse strings as numbers to compare properly\n        if (parseFloat(a) < parseFloat(b))\n            return -1;\n        if (parseFloat(a) > parseFloat(b))\n            return 1;\n    }\n    // equal each other\n    return 0;\n}\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n * @param {?} rows\n * @param {?} columns\n * @param {?} dirs\n * @return {?}\n */\nfunction sortRows(rows, columns, dirs) {\n    if (!rows)\n        return [];\n    if (!dirs || !dirs.length || !columns)\n        return [...rows];\n    /**\n     * record the row ordering of results from prior sort operations (if applicable)\n     * this is necessary to guarantee stable sorting behavior\n     * @type {?}\n     */\n    const rowToIndexMap = new Map();\n    rows.forEach((/**\n     * @param {?} row\n     * @param {?} index\n     * @return {?}\n     */\n    (row, index) => rowToIndexMap.set(row, index)));\n    /** @type {?} */\n    const temp = [...rows];\n    /** @type {?} */\n    const cols = columns.reduce((/**\n     * @param {?} obj\n     * @param {?} col\n     * @return {?}\n     */\n    (obj, col) => {\n        if (col.comparator && typeof col.comparator === 'function') {\n            obj[col.prop] = col.comparator;\n        }\n        return obj;\n    }), {});\n    // cache valueGetter and compareFn so that they\n    // do not need to be looked-up in the sort function body\n    /** @type {?} */\n    const cachedDirs = dirs.map((/**\n     * @param {?} dir\n     * @return {?}\n     */\n    dir => {\n        /** @type {?} */\n        const prop = dir.prop;\n        return {\n            prop,\n            dir: dir.dir,\n            valueGetter: getterForProp(prop),\n            compareFn: cols[prop] || orderByComparator\n        };\n    }));\n    return temp.sort((/**\n     * @param {?} rowA\n     * @param {?} rowB\n     * @return {?}\n     */\n    function (rowA, rowB) {\n        for (const cachedDir of cachedDirs) {\n            // Get property and valuegetters for column to be sorted\n            const { prop, valueGetter } = cachedDir;\n            // Get A and B cell values from rows based on properties of the columns\n            /** @type {?} */\n            const propA = valueGetter(rowA, prop);\n            /** @type {?} */\n            const propB = valueGetter(rowB, prop);\n            // Compare function gets five parameters:\n            // Two cell values to be compared as propA and propB\n            // Two rows corresponding to the cells as rowA and rowB\n            // Direction of the sort for this column as SortDirection\n            // Compare can be a standard JS comparison function (a,b) => -1|0|1\n            // as additional parameters are silently ignored. The whole row and sort\n            // direction enable more complex sort logic.\n            /** @type {?} */\n            const comparison = cachedDir.dir !== SortDirection.desc\n                ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\n                : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\n            // Don't return 0 yet in case of needing to sort by next property\n            if (comparison !== 0)\n                return comparison;\n        }\n        if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB)))\n            return 0;\n        /**\n         * all else being equal, preserve original order of the rows (stable sort)\n         */\n        return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DatatableComponent {\n    /**\n     * @param {?} scrollbarHelper\n     * @param {?} dimensionsHelper\n     * @param {?} cd\n     * @param {?} element\n     * @param {?} differs\n     * @param {?} columnChangesService\n     * @param {?} configuration\n     */\n    constructor(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {\n        this.scrollbarHelper = scrollbarHelper;\n        this.dimensionsHelper = dimensionsHelper;\n        this.cd = cd;\n        this.columnChangesService = columnChangesService;\n        this.configuration = configuration;\n        /**\n         * List of row objects that should be\n         * represented as selected in the grid.\n         * Default value: `[]`\n         */\n        this.selected = [];\n        /**\n         * Enable vertical scrollbars\n         */\n        this.scrollbarV = false;\n        /**\n         * Enable horz scrollbars\n         */\n        this.scrollbarH = false;\n        /**\n         * The row height; which is necessary\n         * to calculate the height for the lazy rendering.\n         */\n        this.rowHeight = 30;\n        /**\n         * Type of column width distribution formula.\n         * Example: flex, force, standard\n         */\n        this.columnMode = ColumnMode.standard;\n        /**\n         * The minimum header height in pixels.\n         * Pass a falsey for no header\n         */\n        this.headerHeight = 30;\n        /**\n         * The minimum footer height in pixels.\n         * Pass falsey for no footer\n         */\n        this.footerHeight = 0;\n        /**\n         * If the table should use external paging\n         * otherwise its assumed that all data is preloaded.\n         */\n        this.externalPaging = false;\n        /**\n         * If the table should use external sorting or\n         * the built-in basic sorting.\n         */\n        this.externalSorting = false;\n        /**\n         * Show the linear loading bar.\n         * Default value: `false`\n         */\n        this.loadingIndicator = false;\n        /**\n         * Enable/Disable ability to re-order columns\n         * by dragging them.\n         */\n        this.reorderable = true;\n        /**\n         * Swap columns on re-order columns or\n         * move them.\n         */\n        this.swapColumns = true;\n        /**\n         * The type of sorting\n         */\n        this.sortType = SortType.single;\n        /**\n         * Array of sorted columns by property and type.\n         * Default value: `[]`\n         */\n        this.sorts = [];\n        /**\n         * Css class overrides\n         */\n        this.cssClasses = {\n            sortAscending: 'datatable-icon-up',\n            sortDescending: 'datatable-icon-down',\n            pagerLeftArrow: 'datatable-icon-left',\n            pagerRightArrow: 'datatable-icon-right',\n            pagerPrevious: 'datatable-icon-prev',\n            pagerNext: 'datatable-icon-skip'\n        };\n        /**\n         * Message overrides for localization\n         *\n         * emptyMessage     [default] = 'No data to display'\n         * totalMessage     [default] = 'total'\n         * selectedMessage  [default] = 'selected'\n         */\n        this.messages = {\n            // Message to show when array is presented\n            // but contains no values\n            emptyMessage: 'No data to display',\n            // Footer total message\n            totalMessage: 'total',\n            // Footer selected message\n            selectedMessage: 'selected'\n        };\n        /**\n         * A boolean you can use to set the detault behaviour of rows and groups\n         * whether they will start expanded or not. If ommited the default is NOT expanded.\n         *\n         */\n        this.groupExpansionDefault = false;\n        /**\n         * Property to which you can use for determining select all\n         * rows on current page or not.\n         *\n         * \\@memberOf DatatableComponent\n         */\n        this.selectAllRowsOnPage = false;\n        /**\n         * A flag for row virtualization on / off\n         */\n        this.virtualization = true;\n        /**\n         * A flag for switching summary row on / off\n         */\n        this.summaryRow = false;\n        /**\n         * A height of summary row\n         */\n        this.summaryHeight = 30;\n        /**\n         * A property holds a summary row position: top/bottom\n         */\n        this.summaryPosition = 'top';\n        /**\n         * Body was scrolled typically in a `scrollbarV:true` scenario.\n         */\n        this.scroll = new EventEmitter();\n        /**\n         * A cell or row was focused via keyboard or mouse click.\n         */\n        this.activate = new EventEmitter();\n        /**\n         * A cell or row was selected.\n         */\n        this.select = new EventEmitter();\n        /**\n         * Column sort was invoked.\n         */\n        this.sort = new EventEmitter();\n        /**\n         * The table was paged either triggered by the pager or the body scroll.\n         */\n        this.page = new EventEmitter();\n        /**\n         * Columns were re-ordered.\n         */\n        this.reorder = new EventEmitter();\n        /**\n         * Column was resized.\n         */\n        this.resize = new EventEmitter();\n        /**\n         * The context menu was invoked on the table.\n         * type indicates whether the header or the body was clicked.\n         * content contains either the column or the row that was clicked.\n         */\n        this.tableContextmenu = new EventEmitter(false);\n        /**\n         * A row was expanded ot collapsed for tree\n         */\n        this.treeAction = new EventEmitter();\n        this.rowCount = 0;\n        this._offsetX = new BehaviorSubject(0);\n        this._count = 0;\n        this._offset = 0;\n        this._subscriptions = [];\n        /**\n         * This will be used when displaying or selecting rows.\n         * when tracking/comparing them, we'll use the value of this fn,\n         *\n         * (`fn(x) === fn(y)` instead of `x === y`)\n         */\n        this.rowIdentity = (/**\n         * @param {?} x\n         * @return {?}\n         */\n        (x) => x);\n        // get ref to elm for measuring\n        this.element = element.nativeElement;\n        this.rowDiffer = differs.find({}).create();\n        // apply global settings from Module.forRoot\n        if (this.configuration && this.configuration.messages) {\n            this.messages = Object.assign({}, this.configuration.messages);\n        }\n    }\n    /**\n     * Rows that are displayed in the table.\n     * @param {?} val\n     * @return {?}\n     */\n    set rows(val) {\n        this._rows = val;\n        if (val) {\n            this._internalRows = [...val];\n        }\n        // auto sort on new updates\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // recalculate sizes/etc\n        this.recalculate();\n        if (this._rows && this._groupRowsBy) {\n            // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n            this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n        }\n        this.cd.markForCheck();\n    }\n    /**\n     * Gets the rows.\n     * @return {?}\n     */\n    get rows() {\n        return this._rows;\n    }\n    /**\n     * This attribute allows the user to set the name of the column to group the data with\n     * @param {?} val\n     * @return {?}\n     */\n    set groupRowsBy(val) {\n        if (val) {\n            this._groupRowsBy = val;\n            if (this._rows && this._groupRowsBy) {\n                // cretes a new array with the data grouped\n                this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    get groupRowsBy() {\n        return this._groupRowsBy;\n    }\n    /**\n     * Columns to be displayed.\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        if (val) {\n            this._internalColumns = [...val];\n            setColumnDefaults(this._internalColumns);\n            this.recalculateColumns();\n        }\n        this._columns = val;\n    }\n    /**\n     * Get the columns.\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * The page size to be shown.\n     * Default value: `undefined`\n     * @param {?} val\n     * @return {?}\n     */\n    set limit(val) {\n        this._limit = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the limit.\n     * @return {?}\n     */\n    get limit() {\n        return this._limit;\n    }\n    /**\n     * The total count of all rows.\n     * Default value: `0`\n     * @param {?} val\n     * @return {?}\n     */\n    set count(val) {\n        this._count = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the count.\n     * @return {?}\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * The current offset ( page - 1 ) shown.\n     * Default value: `0`\n     * @param {?} val\n     * @return {?}\n     */\n    set offset(val) {\n        this._offset = val;\n    }\n    /**\n     * @return {?}\n     */\n    get offset() {\n        return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n    }\n    /**\n     * CSS class applied if the header height if fixed height.\n     * @return {?}\n     */\n    get isFixedHeader() {\n        /** @type {?} */\n        const headerHeight = this.headerHeight;\n        return typeof headerHeight === 'string' ? (/** @type {?} */ (headerHeight)) !== 'auto' : true;\n    }\n    /**\n     * CSS class applied to the root element if\n     * the row heights are fixed heights.\n     * @return {?}\n     */\n    get isFixedRow() {\n        return this.rowHeight !== 'auto';\n    }\n    /**\n     * CSS class applied to root element if\n     * vertical scrolling is enabled.\n     * @return {?}\n     */\n    get isVertScroll() {\n        return this.scrollbarV;\n    }\n    /**\n     * CSS class applied to root element if\n     * virtualization is enabled.\n     * @return {?}\n     */\n    get isVirtualized() {\n        return this.virtualization;\n    }\n    /**\n     * CSS class applied to the root element\n     * if the horziontal scrolling is enabled.\n     * @return {?}\n     */\n    get isHorScroll() {\n        return this.scrollbarH;\n    }\n    /**\n     * CSS class applied to root element is selectable.\n     * @return {?}\n     */\n    get isSelectable() {\n        return this.selectionType !== undefined;\n    }\n    /**\n     * CSS class applied to root is checkbox selection.\n     * @return {?}\n     */\n    get isCheckboxSelection() {\n        return this.selectionType === SelectionType.checkbox;\n    }\n    /**\n     * CSS class applied to root if cell selection.\n     * @return {?}\n     */\n    get isCellSelection() {\n        return this.selectionType === SelectionType.cell;\n    }\n    /**\n     * CSS class applied to root if single select.\n     * @return {?}\n     */\n    get isSingleSelection() {\n        return this.selectionType === SelectionType.single;\n    }\n    /**\n     * CSS class added to root element if mulit select\n     * @return {?}\n     */\n    get isMultiSelection() {\n        return this.selectionType === SelectionType.multi;\n    }\n    /**\n     * CSS class added to root element if mulit click select\n     * @return {?}\n     */\n    get isMultiClickSelection() {\n        return this.selectionType === SelectionType.multiClick;\n    }\n    /**\n     * Column templates gathered from `ContentChildren`\n     * if described in your markup.\n     * @param {?} val\n     * @return {?}\n     */\n    set columnTemplates(val) {\n        this._columnTemplates = val;\n        this.translateColumns(val);\n    }\n    /**\n     * Returns the column templates.\n     * @return {?}\n     */\n    get columnTemplates() {\n        return this._columnTemplates;\n    }\n    /**\n     * Returns if all rows are selected.\n     * @return {?}\n     */\n    get allRowsSelected() {\n        /** @type {?} */\n        let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n        if (this.selectAllRowsOnPage) {\n            /** @type {?} */\n            const indexes = this.bodyComponent.indexes;\n            /** @type {?} */\n            const rowsOnPage = indexes.last - indexes.first;\n            allRowsSelected = this.selected.length === rowsOnPage;\n        }\n        return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n    }\n    /**\n     * Lifecycle hook that is called after data-bound\n     * properties of a directive are initialized.\n     * @return {?}\n     */\n    ngOnInit() {\n        // need to call this immediatly to size\n        // if the table is hidden the visibility\n        // listener will invoke this itself upon show\n        this.recalculate();\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * view has been fully initialized.\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // this has to be done to prevent the change detection\n        // tree from freaking out because we are readjusting\n        if (typeof requestAnimationFrame === 'undefined') {\n            return;\n        }\n        requestAnimationFrame((/**\n         * @return {?}\n         */\n        () => {\n            this.recalculate();\n            // emit page for virtual server-side kickoff\n            if (this.externalPaging && this.scrollbarV) {\n                this.page.emit({\n                    count: this.count,\n                    pageSize: this.pageSize,\n                    limit: this.limit,\n                    offset: 0\n                });\n            }\n        }));\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * content has been fully initialized.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this.columnTemplates.changes.subscribe((/**\n         * @param {?} v\n         * @return {?}\n         */\n        v => this.translateColumns(v)));\n        this.listenForColumnInputChanges();\n    }\n    /**\n     * Translates the templates to the column objects\n     * @param {?} val\n     * @return {?}\n     */\n    translateColumns(val) {\n        if (val) {\n            /** @type {?} */\n            const arr = val.toArray();\n            if (arr.length) {\n                this._internalColumns = translateTemplates(arr);\n                setColumnDefaults(this._internalColumns);\n                this.recalculateColumns();\n                this.sortInternalRows();\n                this.cd.markForCheck();\n            }\n        }\n    }\n    /**\n     * Creates a map with the data grouped by the user choice of grouping index\n     *\n     * @param {?} originalArray the original array passed via parameter\n     * @param {?} groupBy\n     * @return {?}\n     */\n    groupArrayBy(originalArray, groupBy) {\n        // create a map to hold groups with their corresponding results\n        /** @type {?} */\n        const map = new Map();\n        /** @type {?} */\n        let i = 0;\n        originalArray.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        (item) => {\n            /** @type {?} */\n            const key = item[groupBy];\n            if (!map.has(key)) {\n                map.set(key, [item]);\n            }\n            else {\n                map.get(key).push(item);\n            }\n            i++;\n        }));\n        /** @type {?} */\n        const addGroup = (/**\n         * @param {?} key\n         * @param {?} value\n         * @return {?}\n         */\n        (key, value) => {\n            return { key, value };\n        });\n        // convert map back to a simple array of objects\n        return Array.from(map, (/**\n         * @param {?} x\n         * @return {?}\n         */\n        x => addGroup(x[0], x[1])));\n    }\n    /*\n       * Lifecycle hook that is called when Angular dirty checks a directive.\n       */\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.rows)) {\n            if (!this.externalSorting) {\n                this.sortInternalRows();\n            }\n            else {\n                this._internalRows = [...this.rows];\n            }\n            // auto group by parent on new update\n            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n            this.recalculatePages();\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * Recalc's the sizes of the grid.\n     *\n     * Updated automatically on changes to:\n     *\n     *  - Columns\n     *  - Rows\n     *  - Paging related\n     *\n     * Also can be manually invoked or upon window resize.\n     * @return {?}\n     */\n    recalculate() {\n        this.recalculateDims();\n        this.recalculateColumns();\n    }\n    /**\n     * Window resize handler to update sizes.\n     * @return {?}\n     */\n    onWindowResize() {\n        this.recalculate();\n    }\n    /**\n     * Recalulcates the column widths based on column width\n     * distribution mode and scrollbar offsets.\n     * @param {?=} columns\n     * @param {?=} forceIdx\n     * @param {?=} allowBleed\n     * @return {?}\n     */\n    recalculateColumns(columns = this._internalColumns, forceIdx = -1, allowBleed = this.scrollbarH) {\n        if (!columns)\n            return undefined;\n        /** @type {?} */\n        let width = this._innerWidth;\n        if (this.scrollbarV) {\n            width = width - this.scrollbarHelper.width;\n        }\n        if (this.columnMode === ColumnMode.force) {\n            forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n        }\n        else if (this.columnMode === ColumnMode.flex) {\n            adjustColumnWidths(columns, width);\n        }\n        return columns;\n    }\n    /**\n     * Recalculates the dimensions of the table size.\n     * Internally calls the page size and row count calcs too.\n     *\n     * @return {?}\n     */\n    recalculateDims() {\n        /** @type {?} */\n        const dims = this.dimensionsHelper.getDimensions(this.element);\n        this._innerWidth = Math.floor(dims.width);\n        if (this.scrollbarV) {\n            /** @type {?} */\n            let height = dims.height;\n            if (this.headerHeight)\n                height = height - this.headerHeight;\n            if (this.footerHeight)\n                height = height - this.footerHeight;\n            this.bodyHeight = height;\n        }\n        this.recalculatePages();\n    }\n    /**\n     * Recalculates the pages after a update.\n     * @return {?}\n     */\n    recalculatePages() {\n        this.pageSize = this.calcPageSize();\n        this.rowCount = this.calcRowCount();\n    }\n    /**\n     * Body triggered a page event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onBodyPage({ offset }) {\n        // Avoid pagination caming from body events like scroll when the table\n        // has no virtualization and the external paging is enable.\n        // This means, let's the developer handle pagination by my him(her) self\n        if (this.externalPaging && !this.virtualization) {\n            return;\n        }\n        this.offset = offset;\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n    }\n    /**\n     * The body triggered a scroll event.\n     * @param {?} event\n     * @return {?}\n     */\n    onBodyScroll(event) {\n        this._offsetX.next(event.offsetX);\n        this.scroll.emit(event);\n        this.cd.detectChanges();\n    }\n    /**\n     * The footer triggered a page event.\n     * @param {?} event\n     * @return {?}\n     */\n    onFooterPage(event) {\n        this.offset = event.page - 1;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n    }\n    /**\n     * Recalculates the sizes of the page\n     * @param {?=} val\n     * @return {?}\n     */\n    calcPageSize(val = this.rows) {\n        // Keep the page size constant even if the row has been expanded.\n        // This is because an expanded row is still considered to be a child of\n        // the original row.  Hence calculation would use rowHeight only.\n        if (this.scrollbarV && this.virtualization) {\n            /** @type {?} */\n            const size = Math.ceil(this.bodyHeight / ((/** @type {?} */ (this.rowHeight))));\n            return Math.max(size, 0);\n        }\n        // if limit is passed, we are paging\n        if (this.limit !== undefined) {\n            return this.limit;\n        }\n        // otherwise use row length\n        if (val) {\n            return val.length;\n        }\n        // other empty :(\n        return 0;\n    }\n    /**\n     * Calculates the row count.\n     * @param {?=} val\n     * @return {?}\n     */\n    calcRowCount(val = this.rows) {\n        if (!this.externalPaging) {\n            if (!val)\n                return 0;\n            if (this.groupedRows) {\n                return this.groupedRows.length;\n            }\n            else if (this.treeFromRelation != null && this.treeToRelation != null) {\n                return this._internalRows.length;\n            }\n            else {\n                return val.length;\n            }\n        }\n        return this.count;\n    }\n    /**\n     * The header triggered a contextmenu event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnContextmenu({ event, column }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n    }\n    /**\n     * The body triggered a contextmenu event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onRowContextmenu({ event, row }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n    }\n    /**\n     * The header triggered a column resize event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnResize({ column, newValue }) {\n        /* Safari/iOS 10.2 workaround */\n        if (column === undefined) {\n            return;\n        }\n        /** @type {?} */\n        let idx;\n        /** @type {?} */\n        const cols = this._internalColumns.map((/**\n         * @param {?} c\n         * @param {?} i\n         * @return {?}\n         */\n        (c, i) => {\n            c = Object.assign({}, c);\n            if (c.$$id === column.$$id) {\n                idx = i;\n                c.width = newValue;\n                // set this so we can force the column\n                // width distribution to be to this value\n                c.$$oldWidth = newValue;\n            }\n            return c;\n        }));\n        this.recalculateColumns(cols, idx);\n        this._internalColumns = cols;\n        this.resize.emit({\n            column,\n            newValue\n        });\n    }\n    /**\n     * The header triggered a column re-order event.\n     * @param {?} __0\n     * @return {?}\n     */\n    onColumnReorder({ column, newValue, prevValue }) {\n        /** @type {?} */\n        const cols = this._internalColumns.map((/**\n         * @param {?} c\n         * @return {?}\n         */\n        c => {\n            return Object.assign({}, c);\n        }));\n        if (this.swapColumns) {\n            /** @type {?} */\n            const prevCol = cols[newValue];\n            cols[newValue] = column;\n            cols[prevValue] = prevCol;\n        }\n        else {\n            if (newValue > prevValue) {\n                /** @type {?} */\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i < newValue; i++) {\n                    cols[i] = cols[i + 1];\n                }\n                cols[newValue] = movedCol;\n            }\n            else {\n                /** @type {?} */\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i > newValue; i--) {\n                    cols[i] = cols[i - 1];\n                }\n                cols[newValue] = movedCol;\n            }\n        }\n        this._internalColumns = cols;\n        this.reorder.emit({\n            column,\n            newValue,\n            prevValue\n        });\n    }\n    /**\n     * The header triggered a column sort event.\n     * @param {?} event\n     * @return {?}\n     */\n    onColumnSort(event) {\n        // clean selected rows\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n        this.sorts = event.sorts;\n        // this could be optimized better since it will resort\n        // the rows again on the 'push' detection...\n        if (this.externalSorting === false) {\n            // don't use normal setter so we don't resort\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // Always go to first page when sorting to see the newly sorted data\n        this.offset = 0;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.sort.emit(event);\n    }\n    /**\n     * Toggle all row selection\n     * @param {?} event\n     * @return {?}\n     */\n    onHeaderSelect(event) {\n        if (this.selectAllRowsOnPage) {\n            // before we splice, chk if we currently have all selected\n            /** @type {?} */\n            const first = this.bodyComponent.indexes.first;\n            /** @type {?} */\n            const last = this.bodyComponent.indexes.last;\n            /** @type {?} */\n            const allSelected = this.selected.length === last - first;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this._internalRows.slice(first, last));\n            }\n        }\n        else {\n            // before we splice, chk if we currently have all selected\n            /** @type {?} */\n            const allSelected = this.selected.length === this.rows.length;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this.rows);\n            }\n        }\n        this.select.emit({\n            selected: this.selected\n        });\n    }\n    /**\n     * A row was selected from body\n     * @param {?} event\n     * @return {?}\n     */\n    onBodySelect(event) {\n        this.select.emit(event);\n    }\n    /**\n     * A row was expanded or collapsed for tree\n     * @param {?} event\n     * @return {?}\n     */\n    onTreeAction(event) {\n        /** @type {?} */\n        const row = event.row;\n        // TODO: For duplicated items this will not work\n        /** @type {?} */\n        const rowIndex = this._rows.findIndex((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => r[this.treeToRelation] === event.row[this.treeToRelation]));\n        this.treeAction.emit({ row, rowIndex });\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._subscriptions.forEach((/**\n         * @param {?} subscription\n         * @return {?}\n         */\n        subscription => subscription.unsubscribe()));\n    }\n    /**\n     * listen for changes to input bindings of all DataTableColumnDirective and\n     * trigger the columnTemplates.changes observable to emit\n     * @private\n     * @return {?}\n     */\n    listenForColumnInputChanges() {\n        this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.columnTemplates) {\n                this.columnTemplates.notifyOnChanges();\n            }\n        })));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    sortInternalRows() {\n        this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n    }\n}\nDatatableComponent.ɵfac = function DatatableComponent_Factory(t) { return new (t || DatatableComponent)(ɵngcc0.ɵɵdirectiveInject(ScrollbarHelper, 4), ɵngcc0.ɵɵdirectiveInject(DimensionsHelper, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ColumnChangesService), ɵngcc0.ɵɵdirectiveInject('configuration', 8)); };\nDatatableComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatatableComponent, selectors: [[\"ngx-datatable\"]], contentQueries: function DatatableComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableRowDetailDirective, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableGroupHeaderDirective, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatatableFooterDirective, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DataTableColumnDirective, false);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rowDetail = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupHeader = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnTemplates = _t);\n    } }, viewQuery: function DatatableComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(DataTableBodyComponent, true);\n        ɵngcc0.ɵɵviewQuery(DataTableHeaderComponent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.bodyComponent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerComponent = _t.first);\n    } }, hostAttrs: [1, \"ngx-datatable\"], hostVars: 22, hostBindings: function DatatableComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resize\", function DatatableComponent_resize_HostBindingHandler() { return ctx.onWindowResize(); }, false, ɵngcc0.ɵɵresolveWindow);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"fixed-header\", ctx.isFixedHeader)(\"fixed-row\", ctx.isFixedRow)(\"scroll-vertical\", ctx.isVertScroll)(\"virtualized\", ctx.isVirtualized)(\"scroll-horz\", ctx.isHorScroll)(\"selectable\", ctx.isSelectable)(\"checkbox-selection\", ctx.isCheckboxSelection)(\"cell-selection\", ctx.isCellSelection)(\"single-selection\", ctx.isSingleSelection)(\"multi-selection\", ctx.isMultiSelection)(\"multi-click-selection\", ctx.isMultiClickSelection);\n    } }, inputs: { selected: \"selected\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", rowHeight: \"rowHeight\", columnMode: \"columnMode\", headerHeight: \"headerHeight\", footerHeight: \"footerHeight\", externalPaging: \"externalPaging\", externalSorting: \"externalSorting\", loadingIndicator: \"loadingIndicator\", reorderable: \"reorderable\", swapColumns: \"swapColumns\", sortType: \"sortType\", sorts: \"sorts\", cssClasses: \"cssClasses\", messages: \"messages\", groupExpansionDefault: \"groupExpansionDefault\", selectAllRowsOnPage: \"selectAllRowsOnPage\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryHeight: \"summaryHeight\", summaryPosition: \"summaryPosition\", rowIdentity: \"rowIdentity\", rows: \"rows\", groupedRows: \"groupedRows\", groupRowsBy: \"groupRowsBy\", columns: \"columns\", limit: \"limit\", count: \"count\", offset: \"offset\", targetMarkerTemplate: \"targetMarkerTemplate\", selectionType: \"selectionType\", rowClass: \"rowClass\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", treeFromRelation: \"treeFromRelation\", treeToRelation: \"treeToRelation\" }, outputs: { scroll: \"scroll\", activate: \"activate\", select: \"select\", sort: \"sort\", page: \"page\", reorder: \"reorder\", resize: \"resize\", tableContextmenu: \"tableContextmenu\", treeAction: \"treeAction\" }, decls: 5, vars: 34, consts: [[\"visibilityObserver\", \"\", 3, \"visible\"], [3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\", 4, \"ngIf\"], [3, \"groupRowsBy\", \"groupedRows\", \"rows\", \"groupExpansionDefault\", \"scrollbarV\", \"scrollbarH\", \"virtualization\", \"loadingIndicator\", \"externalPaging\", \"rowHeight\", \"rowCount\", \"offset\", \"trackByProp\", \"columns\", \"pageSize\", \"offsetX\", \"rowDetail\", \"groupHeader\", \"selected\", \"innerWidth\", \"bodyHeight\", \"selectionType\", \"emptyMessage\", \"rowIdentity\", \"rowClass\", \"selectCheck\", \"displayCheck\", \"summaryRow\", \"summaryHeight\", \"summaryPosition\", \"page\", \"activate\", \"rowContextmenu\", \"select\", \"scroll\", \"treeAction\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\", 4, \"ngIf\"], [3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\"]], template: function DatatableComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"visible\", function DatatableComponent_Template_div_visible_0_listener() { return ctx.recalculate(); });\n        ɵngcc0.ɵɵtemplate(1, DatatableComponent_datatable_header_1_Template, 2, 16, \"datatable-header\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"datatable-body\", 2);\n        ɵngcc0.ɵɵlistener(\"page\", function DatatableComponent_Template_datatable_body_page_2_listener($event) { return ctx.onBodyPage($event); })(\"activate\", function DatatableComponent_Template_datatable_body_activate_2_listener($event) { return ctx.activate.emit($event); })(\"rowContextmenu\", function DatatableComponent_Template_datatable_body_rowContextmenu_2_listener($event) { return ctx.onRowContextmenu($event); })(\"select\", function DatatableComponent_Template_datatable_body_select_2_listener($event) { return ctx.onBodySelect($event); })(\"scroll\", function DatatableComponent_Template_datatable_body_scroll_2_listener($event) { return ctx.onBodyScroll($event); })(\"treeAction\", function DatatableComponent_Template_datatable_body_treeAction_2_listener($event) { return ctx.onTreeAction($event); });\n        ɵngcc0.ɵɵpipe(3, \"async\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, DatatableComponent_datatable_footer_4_Template, 1, 12, \"datatable-footer\", 3);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.headerHeight);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"groupRowsBy\", ctx.groupRowsBy)(\"groupedRows\", ctx.groupedRows)(\"rows\", ctx._internalRows)(\"groupExpansionDefault\", ctx.groupExpansionDefault)(\"scrollbarV\", ctx.scrollbarV)(\"scrollbarH\", ctx.scrollbarH)(\"virtualization\", ctx.virtualization)(\"loadingIndicator\", ctx.loadingIndicator)(\"externalPaging\", ctx.externalPaging)(\"rowHeight\", ctx.rowHeight)(\"rowCount\", ctx.rowCount)(\"offset\", ctx.offset)(\"trackByProp\", ctx.trackByProp)(\"columns\", ctx._internalColumns)(\"pageSize\", ctx.pageSize)(\"offsetX\", ɵngcc0.ɵɵpipeBind1(3, 32, ctx._offsetX))(\"rowDetail\", ctx.rowDetail)(\"groupHeader\", ctx.groupHeader)(\"selected\", ctx.selected)(\"innerWidth\", ctx._innerWidth)(\"bodyHeight\", ctx.bodyHeight)(\"selectionType\", ctx.selectionType)(\"emptyMessage\", ctx.messages.emptyMessage)(\"rowIdentity\", ctx.rowIdentity)(\"rowClass\", ctx.rowClass)(\"selectCheck\", ctx.selectCheck)(\"displayCheck\", ctx.displayCheck)(\"summaryRow\", ctx.summaryRow)(\"summaryHeight\", ctx.summaryHeight)(\"summaryPosition\", ctx.summaryPosition);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.footerHeight);\n    } }, directives: function () { return [VisibilityDirective, ɵngcc1.NgIf, DataTableBodyComponent,\n        DataTableHeaderComponent,\n        DataTableFooterComponent]; }, pipes: function () { return [ɵngcc1.AsyncPipe]; }, styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;-webkit-transform:translate3d(0,0,0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:0}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:0}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:0}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDatatableComponent.ctorParameters = () => [\n    { type: ScrollbarHelper, decorators: [{ type: SkipSelf }] },\n    { type: DimensionsHelper, decorators: [{ type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: KeyValueDiffers },\n    { type: ColumnChangesService },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['configuration',] }] }\n];\nDatatableComponent.propDecorators = {\n    targetMarkerTemplate: [{ type: Input }],\n    rows: [{ type: Input }],\n    groupRowsBy: [{ type: Input }],\n    groupedRows: [{ type: Input }],\n    columns: [{ type: Input }],\n    selected: [{ type: Input }],\n    scrollbarV: [{ type: Input }],\n    scrollbarH: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    columnMode: [{ type: Input }],\n    headerHeight: [{ type: Input }],\n    footerHeight: [{ type: Input }],\n    externalPaging: [{ type: Input }],\n    externalSorting: [{ type: Input }],\n    limit: [{ type: Input }],\n    count: [{ type: Input }],\n    offset: [{ type: Input }],\n    loadingIndicator: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    reorderable: [{ type: Input }],\n    swapColumns: [{ type: Input }],\n    sortType: [{ type: Input }],\n    sorts: [{ type: Input }],\n    cssClasses: [{ type: Input }],\n    messages: [{ type: Input }],\n    rowClass: [{ type: Input }],\n    selectCheck: [{ type: Input }],\n    displayCheck: [{ type: Input }],\n    groupExpansionDefault: [{ type: Input }],\n    trackByProp: [{ type: Input }],\n    selectAllRowsOnPage: [{ type: Input }],\n    virtualization: [{ type: Input }],\n    treeFromRelation: [{ type: Input }],\n    treeToRelation: [{ type: Input }],\n    summaryRow: [{ type: Input }],\n    summaryHeight: [{ type: Input }],\n    summaryPosition: [{ type: Input }],\n    scroll: [{ type: Output }],\n    activate: [{ type: Output }],\n    select: [{ type: Output }],\n    sort: [{ type: Output }],\n    page: [{ type: Output }],\n    reorder: [{ type: Output }],\n    resize: [{ type: Output }],\n    tableContextmenu: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    isFixedHeader: [{ type: HostBinding, args: ['class.fixed-header',] }],\n    isFixedRow: [{ type: HostBinding, args: ['class.fixed-row',] }],\n    isVertScroll: [{ type: HostBinding, args: ['class.scroll-vertical',] }],\n    isVirtualized: [{ type: HostBinding, args: ['class.virtualized',] }],\n    isHorScroll: [{ type: HostBinding, args: ['class.scroll-horz',] }],\n    isSelectable: [{ type: HostBinding, args: ['class.selectable',] }],\n    isCheckboxSelection: [{ type: HostBinding, args: ['class.checkbox-selection',] }],\n    isCellSelection: [{ type: HostBinding, args: ['class.cell-selection',] }],\n    isSingleSelection: [{ type: HostBinding, args: ['class.single-selection',] }],\n    isMultiSelection: [{ type: HostBinding, args: ['class.multi-selection',] }],\n    isMultiClickSelection: [{ type: HostBinding, args: ['class.multi-click-selection',] }],\n    columnTemplates: [{ type: ContentChildren, args: [DataTableColumnDirective,] }],\n    rowDetail: [{ type: ContentChild, args: [DatatableRowDetailDirective, { static: false },] }],\n    groupHeader: [{ type: ContentChild, args: [DatatableGroupHeaderDirective, { static: false },] }],\n    footer: [{ type: ContentChild, args: [DatatableFooterDirective, { static: false },] }],\n    bodyComponent: [{ type: ViewChild, args: [DataTableBodyComponent, { static: false },] }],\n    headerComponent: [{ type: ViewChild, args: [DataTableHeaderComponent, { static: false },] }],\n    rowIdentity: [{ type: Input }],\n    onWindowResize: [{ type: HostListener, args: ['window:resize',] }]\n};\n__decorate([\n    throttleable(5),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", void 0)\n], DatatableComponent.prototype, \"onWindowResize\", null);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollbarHelper, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DimensionsHelper, [{\n        type: Injectable\n    }], null, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ColumnChangesService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableFooterTemplateDirective, [{\n        type: Directive,\n        args: [{ selector: '[ngx-datatable-footer-template]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VisibilityDirective, [{\n        type: Directive,\n        args: [{ selector: '[visibilityObserver]' }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { isVisible: [{\n            type: HostBinding,\n            args: ['class.visible']\n        }], visible: [{\n            type: Output\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DraggableDirective, [{\n        type: Directive,\n        args: [{ selector: '[draggable]' }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { dragX: [{\n            type: Input\n        }], dragY: [{\n            type: Input\n        }], dragStart: [{\n            type: Output\n        }], dragging: [{\n            type: Output\n        }], dragEnd: [{\n            type: Output\n        }], dragEventTarget: [{\n            type: Input\n        }], dragModel: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizeableDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[resizeable]',\n                host: {\n                    '[class.resizeable]': 'resizeEnabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { resizeEnabled: [{\n            type: Input\n        }], resize: [{\n            type: Output\n        }], onMousedown: [{\n            type: HostListener,\n            args: ['mousedown', ['$event']]\n        }], minWidth: [{\n            type: Input\n        }], maxWidth: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OrderableDirective, [{\n        type: Directive,\n        args: [{ selector: '[orderable]' }]\n    }], function () { return [{ type: ɵngcc0.KeyValueDiffers }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { reorder: [{\n            type: Output\n        }], targetChanged: [{\n            type: Output\n        }], draggables: [{\n            type: ContentChildren,\n            args: [DraggableDirective, { descendants: true }]\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LongPressDirective, [{\n        type: Directive,\n        args: [{ selector: '[long-press]' }]\n    }], function () { return []; }, { pressEnabled: [{\n            type: Input\n        }], duration: [{\n            type: Input\n        }], longPressStart: [{\n            type: Output\n        }], longPressing: [{\n            type: Output\n        }], longPressEnd: [{\n            type: Output\n        }], press: [{\n            type: HostBinding,\n            args: ['class.press']\n        }], isLongPress: [{\n            type: HostBinding,\n            args: ['class.longpress']\n        }], onMouseDown: [{\n            type: HostListener,\n            args: ['mousedown', ['$event']]\n        }], pressModel: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollerComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-scroller',\n                template: `\n    <ng-content></ng-content>\n  `,\n                host: {\n                    class: 'datatable-scroll'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { scrollbarV: [{\n            type: Input\n        }], scrollbarH: [{\n            type: Input\n        }], scroll: [{\n            type: Output\n        }], scrollHeight: [{\n            type: HostBinding,\n            args: ['style.height.px']\n        }, {\n            type: Input\n        }], scrollWidth: [{\n            type: HostBinding,\n            args: ['style.width.px']\n        }, {\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableGroupHeaderTemplateDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngx-datatable-group-header-template]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableGroupHeaderDirective, [{\n        type: Directive,\n        args: [{ selector: 'ngx-datatable-group-header' }]\n    }], function () { return []; }, { rowHeight: [{\n            type: Input\n        }], toggle: [{\n            type: Output\n        }], _templateInput: [{\n            type: Input,\n            args: ['template']\n        }], _templateQuery: [{\n            type: ContentChild,\n            args: [DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true }]\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableColumnHeaderDirective, [{\n        type: Directive,\n        args: [{ selector: '[ngx-datatable-header-template]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableColumnCellDirective, [{\n        type: Directive,\n        args: [{ selector: '[ngx-datatable-cell-template]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableColumnCellTreeToggle, [{\n        type: Directive,\n        args: [{ selector: '[ngx-datatable-tree-toggle]' }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableColumnDirective, [{\n        type: Directive,\n        args: [{ selector: 'ngx-datatable-column' }]\n    }], function () { return [{ type: ColumnChangesService }]; }, { name: [{\n            type: Input\n        }], prop: [{\n            type: Input\n        }], frozenLeft: [{\n            type: Input\n        }], frozenRight: [{\n            type: Input\n        }], flexGrow: [{\n            type: Input\n        }], resizeable: [{\n            type: Input\n        }], comparator: [{\n            type: Input\n        }], pipe: [{\n            type: Input\n        }], sortable: [{\n            type: Input\n        }], draggable: [{\n            type: Input\n        }], canAutoResize: [{\n            type: Input\n        }], minWidth: [{\n            type: Input\n        }], width: [{\n            type: Input\n        }], maxWidth: [{\n            type: Input\n        }], checkboxable: [{\n            type: Input\n        }], headerCheckboxable: [{\n            type: Input\n        }], headerClass: [{\n            type: Input\n        }], cellClass: [{\n            type: Input\n        }], isTreeColumn: [{\n            type: Input\n        }], treeLevelIndent: [{\n            type: Input\n        }], summaryFunc: [{\n            type: Input\n        }], summaryTemplate: [{\n            type: Input\n        }], _cellTemplateInput: [{\n            type: Input,\n            args: ['cellTemplate']\n        }], _cellTemplateQuery: [{\n            type: ContentChild,\n            args: [DataTableColumnCellDirective, { read: TemplateRef, static: true }]\n        }], _headerTemplateInput: [{\n            type: Input,\n            args: ['headerTemplate']\n        }], _headerTemplateQuery: [{\n            type: ContentChild,\n            args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true }]\n        }], _treeToggleTemplateInput: [{\n            type: Input,\n            args: ['treeToggleTemplate']\n        }], _treeToggleTemplateQuery: [{\n            type: ContentChild,\n            args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true }]\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableRowDetailTemplateDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngx-datatable-row-detail-template]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableRowDetailDirective, [{\n        type: Directive,\n        args: [{ selector: 'ngx-datatable-row-detail' }]\n    }], function () { return []; }, { rowHeight: [{\n            type: Input\n        }], toggle: [{\n            type: Output\n        }], _templateInput: [{\n            type: Input,\n            args: ['template']\n        }], _templateQuery: [{\n            type: ContentChild,\n            args: [DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true }]\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableFooterDirective, [{\n        type: Directive,\n        args: [{ selector: 'ngx-datatable-footer' }]\n    }], null, { footerHeight: [{\n            type: Input\n        }], totalMessage: [{\n            type: Input\n        }], selectedMessage: [{\n            type: Input\n        }], pagerLeftArrowIcon: [{\n            type: Input\n        }], pagerRightArrowIcon: [{\n            type: Input\n        }], pagerPreviousIcon: [{\n            type: Input\n        }], pagerNextIcon: [{\n            type: Input\n        }], _templateInput: [{\n            type: Input,\n            args: ['template']\n        }], _templateQuery: [{\n            type: ContentChild,\n            args: [DataTableFooterTemplateDirective, { read: TemplateRef, static: false }]\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableBodyComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-body',\n                template: `\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    class: 'datatable-body'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { selected: [{\n            type: Input\n        }], scroll: [{\n            type: Output\n        }], page: [{\n            type: Output\n        }], activate: [{\n            type: Output\n        }], select: [{\n            type: Output\n        }], detailToggle: [{\n            type: Output\n        }], rowContextmenu: [{\n            type: Output\n        }], treeAction: [{\n            type: Output\n        }], pageSize: [{\n            type: Input\n        }], rows: [{\n            type: Input\n        }], columns: [{\n            type: Input\n        }], offset: [{\n            type: Input\n        }], rowCount: [{\n            type: Input\n        }], bodyWidth: [{\n            type: HostBinding,\n            args: ['style.width']\n        }], bodyHeight: [{\n            type: Input\n        }, {\n            type: HostBinding,\n            args: ['style.height']\n        }], offsetX: [{\n            type: Input\n        }], loadingIndicator: [{\n            type: Input\n        }], scrollbarV: [{\n            type: Input\n        }], scrollbarH: [{\n            type: Input\n        }], externalPaging: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], emptyMessage: [{\n            type: Input\n        }], selectionType: [{\n            type: Input\n        }], rowIdentity: [{\n            type: Input\n        }], rowDetail: [{\n            type: Input\n        }], groupHeader: [{\n            type: Input\n        }], selectCheck: [{\n            type: Input\n        }], displayCheck: [{\n            type: Input\n        }], trackByProp: [{\n            type: Input\n        }], rowClass: [{\n            type: Input\n        }], groupedRows: [{\n            type: Input\n        }], groupExpansionDefault: [{\n            type: Input\n        }], innerWidth: [{\n            type: Input\n        }], groupRowsBy: [{\n            type: Input\n        }], virtualization: [{\n            type: Input\n        }], summaryRow: [{\n            type: Input\n        }], summaryPosition: [{\n            type: Input\n        }], summaryHeight: [{\n            type: Input\n        }], scroller: [{\n            type: ViewChild,\n            args: [ScrollerComponent, { static: false }]\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableHeaderComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-header',\n                template: `\n    <div\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-header'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { sort: [{\n            type: Output\n        }], reorder: [{\n            type: Output\n        }], resize: [{\n            type: Output\n        }], select: [{\n            type: Output\n        }], columnContextmenu: [{\n            type: Output\n        }], innerWidth: [{\n            type: Input\n        }], headerHeight: [{\n            type: HostBinding,\n            args: ['style.height']\n        }, {\n            type: Input\n        }], columns: [{\n            type: Input\n        }], offsetX: [{\n            type: Input\n        }], headerWidth: [{\n            type: HostBinding,\n            args: ['style.width']\n        }], sorts: [{\n            type: Input\n        }], sortAscendingIcon: [{\n            type: Input\n        }], sortDescendingIcon: [{\n            type: Input\n        }], scrollbarH: [{\n            type: Input\n        }], dealsWithGroup: [{\n            type: Input\n        }], targetMarkerTemplate: [{\n            type: Input\n        }], sortType: [{\n            type: Input\n        }], allRowsSelected: [{\n            type: Input\n        }], selectionType: [{\n            type: Input\n        }], reorderable: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DatatableComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-datatable',\n                template: \"<div visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                host: {\n                    class: 'ngx-datatable'\n                },\n                styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;-webkit-transform:translate3d(0,0,0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:0}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:0}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:0}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\"]\n            }]\n    }], function () { return [{ type: ScrollbarHelper, decorators: [{\n                type: SkipSelf\n            }] }, { type: DimensionsHelper, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.KeyValueDiffers }, { type: ColumnChangesService }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: ['configuration']\n            }] }]; }, { selected: [{\n            type: Input\n        }], scrollbarV: [{\n            type: Input\n        }], scrollbarH: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], columnMode: [{\n            type: Input\n        }], headerHeight: [{\n            type: Input\n        }], footerHeight: [{\n            type: Input\n        }], externalPaging: [{\n            type: Input\n        }], externalSorting: [{\n            type: Input\n        }], loadingIndicator: [{\n            type: Input\n        }], reorderable: [{\n            type: Input\n        }], swapColumns: [{\n            type: Input\n        }], sortType: [{\n            type: Input\n        }], sorts: [{\n            type: Input\n        }], cssClasses: [{\n            type: Input\n        }], messages: [{\n            type: Input\n        }], groupExpansionDefault: [{\n            type: Input\n        }], selectAllRowsOnPage: [{\n            type: Input\n        }], virtualization: [{\n            type: Input\n        }], summaryRow: [{\n            type: Input\n        }], summaryHeight: [{\n            type: Input\n        }], summaryPosition: [{\n            type: Input\n        }], scroll: [{\n            type: Output\n        }], activate: [{\n            type: Output\n        }], select: [{\n            type: Output\n        }], sort: [{\n            type: Output\n        }], page: [{\n            type: Output\n        }], reorder: [{\n            type: Output\n        }], resize: [{\n            type: Output\n        }], tableContextmenu: [{\n            type: Output\n        }], treeAction: [{\n            type: Output\n        }], rowIdentity: [{\n            type: Input\n        }], rows: [{\n            type: Input\n        }], groupedRows: [{\n            type: Input\n        }], groupRowsBy: [{\n            type: Input\n        }], columns: [{\n            type: Input\n        }], limit: [{\n            type: Input\n        }], count: [{\n            type: Input\n        }], offset: [{\n            type: Input\n        }], isFixedHeader: [{\n            type: HostBinding,\n            args: ['class.fixed-header']\n        }], isFixedRow: [{\n            type: HostBinding,\n            args: ['class.fixed-row']\n        }], isVertScroll: [{\n            type: HostBinding,\n            args: ['class.scroll-vertical']\n        }], isVirtualized: [{\n            type: HostBinding,\n            args: ['class.virtualized']\n        }], isHorScroll: [{\n            type: HostBinding,\n            args: ['class.scroll-horz']\n        }], isSelectable: [{\n            type: HostBinding,\n            args: ['class.selectable']\n        }], isCheckboxSelection: [{\n            type: HostBinding,\n            args: ['class.checkbox-selection']\n        }], isCellSelection: [{\n            type: HostBinding,\n            args: ['class.cell-selection']\n        }], isSingleSelection: [{\n            type: HostBinding,\n            args: ['class.single-selection']\n        }], isMultiSelection: [{\n            type: HostBinding,\n            args: ['class.multi-selection']\n        }], isMultiClickSelection: [{\n            type: HostBinding,\n            args: ['class.multi-click-selection']\n        }], columnTemplates: [{\n            type: ContentChildren,\n            args: [DataTableColumnDirective]\n        }], onWindowResize: [{\n            type: HostListener,\n            args: ['window:resize']\n        }], targetMarkerTemplate: [{\n            type: Input\n        }], selectionType: [{\n            type: Input\n        }], rowClass: [{\n            type: Input\n        }], selectCheck: [{\n            type: Input\n        }], displayCheck: [{\n            type: Input\n        }], trackByProp: [{\n            type: Input\n        }], treeFromRelation: [{\n            type: Input\n        }], treeToRelation: [{\n            type: Input\n        }], rowDetail: [{\n            type: ContentChild,\n            args: [DatatableRowDetailDirective, { static: false }]\n        }], groupHeader: [{\n            type: ContentChild,\n            args: [DatatableGroupHeaderDirective, { static: false }]\n        }], footer: [{\n            type: ContentChild,\n            args: [DatatableFooterDirective, { static: false }]\n        }], bodyComponent: [{\n            type: ViewChild,\n            args: [DataTableBodyComponent, { static: false }]\n        }], headerComponent: [{\n            type: ViewChild,\n            args: [DataTableHeaderComponent, { static: false }]\n        }] }); })();\nif (false) {\n    /**\n     * Template for the target marker of drag target columns.\n     * @type {?}\n     */\n    DatatableComponent.prototype.targetMarkerTemplate;\n    /**\n     * This attribute allows the user to set a grouped array in the following format:\n     *  [\n     *    {groupid=1} [\n     *      {id=1 name=\"test1\"},\n     *      {id=2 name=\"test2\"},\n     *      {id=3 name=\"test3\"}\n     *    ]},\n     *    {groupid=2>[\n     *      {id=4 name=\"test4\"},\n     *      {id=5 name=\"test5\"},\n     *      {id=6 name=\"test6\"}\n     *    ]}\n     *  ]\n     * @type {?}\n     */\n    DatatableComponent.prototype.groupedRows;\n    /**\n     * List of row objects that should be\n     * represented as selected in the grid.\n     * Default value: `[]`\n     * @type {?}\n     */\n    DatatableComponent.prototype.selected;\n    /**\n     * Enable vertical scrollbars\n     * @type {?}\n     */\n    DatatableComponent.prototype.scrollbarV;\n    /**\n     * Enable horz scrollbars\n     * @type {?}\n     */\n    DatatableComponent.prototype.scrollbarH;\n    /**\n     * The row height; which is necessary\n     * to calculate the height for the lazy rendering.\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowHeight;\n    /**\n     * Type of column width distribution formula.\n     * Example: flex, force, standard\n     * @type {?}\n     */\n    DatatableComponent.prototype.columnMode;\n    /**\n     * The minimum header height in pixels.\n     * Pass a falsey for no header\n     * @type {?}\n     */\n    DatatableComponent.prototype.headerHeight;\n    /**\n     * The minimum footer height in pixels.\n     * Pass falsey for no footer\n     * @type {?}\n     */\n    DatatableComponent.prototype.footerHeight;\n    /**\n     * If the table should use external paging\n     * otherwise its assumed that all data is preloaded.\n     * @type {?}\n     */\n    DatatableComponent.prototype.externalPaging;\n    /**\n     * If the table should use external sorting or\n     * the built-in basic sorting.\n     * @type {?}\n     */\n    DatatableComponent.prototype.externalSorting;\n    /**\n     * Show the linear loading bar.\n     * Default value: `false`\n     * @type {?}\n     */\n    DatatableComponent.prototype.loadingIndicator;\n    /**\n     * Type of row selection. Options are:\n     *\n     *  - `single`\n     *  - `multi`\n     *  - `checkbox`\n     *  - `multiClick`\n     *  - `cell`\n     *\n     * For no selection pass a `falsey`.\n     * Default value: `undefined`\n     * @type {?}\n     */\n    DatatableComponent.prototype.selectionType;\n    /**\n     * Enable/Disable ability to re-order columns\n     * by dragging them.\n     * @type {?}\n     */\n    DatatableComponent.prototype.reorderable;\n    /**\n     * Swap columns on re-order columns or\n     * move them.\n     * @type {?}\n     */\n    DatatableComponent.prototype.swapColumns;\n    /**\n     * The type of sorting\n     * @type {?}\n     */\n    DatatableComponent.prototype.sortType;\n    /**\n     * Array of sorted columns by property and type.\n     * Default value: `[]`\n     * @type {?}\n     */\n    DatatableComponent.prototype.sorts;\n    /**\n     * Css class overrides\n     * @type {?}\n     */\n    DatatableComponent.prototype.cssClasses;\n    /**\n     * Message overrides for localization\n     *\n     * emptyMessage     [default] = 'No data to display'\n     * totalMessage     [default] = 'total'\n     * selectedMessage  [default] = 'selected'\n     * @type {?}\n     */\n    DatatableComponent.prototype.messages;\n    /**\n     * Row specific classes.\n     * Similar implementation to ngClass.\n     *\n     *  [rowClass]=\"'first second'\"\n     *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowClass;\n    /**\n     * A boolean/function you can use to check whether you want\n     * to select a particular row based on a criteria. Example:\n     *\n     *    (selection) => {\n     *      return selection !== 'Ethel Price';\n     *    }\n     * @type {?}\n     */\n    DatatableComponent.prototype.selectCheck;\n    /**\n     * A function you can use to check whether you want\n     * to show the checkbox for a particular row based on a criteria. Example:\n     *\n     *    (row, column, value) => {\n     *      return row.name !== 'Ethel Price';\n     *    }\n     * @type {?}\n     */\n    DatatableComponent.prototype.displayCheck;\n    /**\n     * A boolean you can use to set the detault behaviour of rows and groups\n     * whether they will start expanded or not. If ommited the default is NOT expanded.\n     *\n     * @type {?}\n     */\n    DatatableComponent.prototype.groupExpansionDefault;\n    /**\n     * Property to which you can use for custom tracking of rows.\n     * Example: 'name'\n     * @type {?}\n     */\n    DatatableComponent.prototype.trackByProp;\n    /**\n     * Property to which you can use for determining select all\n     * rows on current page or not.\n     *\n     * \\@memberOf DatatableComponent\n     * @type {?}\n     */\n    DatatableComponent.prototype.selectAllRowsOnPage;\n    /**\n     * A flag for row virtualization on / off\n     * @type {?}\n     */\n    DatatableComponent.prototype.virtualization;\n    /**\n     * Tree from relation\n     * @type {?}\n     */\n    DatatableComponent.prototype.treeFromRelation;\n    /**\n     * Tree to relation\n     * @type {?}\n     */\n    DatatableComponent.prototype.treeToRelation;\n    /**\n     * A flag for switching summary row on / off\n     * @type {?}\n     */\n    DatatableComponent.prototype.summaryRow;\n    /**\n     * A height of summary row\n     * @type {?}\n     */\n    DatatableComponent.prototype.summaryHeight;\n    /**\n     * A property holds a summary row position: top/bottom\n     * @type {?}\n     */\n    DatatableComponent.prototype.summaryPosition;\n    /**\n     * Body was scrolled typically in a `scrollbarV:true` scenario.\n     * @type {?}\n     */\n    DatatableComponent.prototype.scroll;\n    /**\n     * A cell or row was focused via keyboard or mouse click.\n     * @type {?}\n     */\n    DatatableComponent.prototype.activate;\n    /**\n     * A cell or row was selected.\n     * @type {?}\n     */\n    DatatableComponent.prototype.select;\n    /**\n     * Column sort was invoked.\n     * @type {?}\n     */\n    DatatableComponent.prototype.sort;\n    /**\n     * The table was paged either triggered by the pager or the body scroll.\n     * @type {?}\n     */\n    DatatableComponent.prototype.page;\n    /**\n     * Columns were re-ordered.\n     * @type {?}\n     */\n    DatatableComponent.prototype.reorder;\n    /**\n     * Column was resized.\n     * @type {?}\n     */\n    DatatableComponent.prototype.resize;\n    /**\n     * The context menu was invoked on the table.\n     * type indicates whether the header or the body was clicked.\n     * content contains either the column or the row that was clicked.\n     * @type {?}\n     */\n    DatatableComponent.prototype.tableContextmenu;\n    /**\n     * A row was expanded ot collapsed for tree\n     * @type {?}\n     */\n    DatatableComponent.prototype.treeAction;\n    /**\n     * Row Detail templates gathered from the ContentChild\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowDetail;\n    /**\n     * Group Header templates gathered from the ContentChild\n     * @type {?}\n     */\n    DatatableComponent.prototype.groupHeader;\n    /**\n     * Footer template gathered from the ContentChild\n     * @type {?}\n     */\n    DatatableComponent.prototype.footer;\n    /**\n     * Reference to the body component for manually\n     * invoking functions on the body.\n     * @type {?}\n     */\n    DatatableComponent.prototype.bodyComponent;\n    /**\n     * Reference to the header component for manually\n     * invoking functions on the header.\n     *\n     * \\@memberOf DatatableComponent\n     * @type {?}\n     */\n    DatatableComponent.prototype.headerComponent;\n    /** @type {?} */\n    DatatableComponent.prototype.element;\n    /** @type {?} */\n    DatatableComponent.prototype._innerWidth;\n    /** @type {?} */\n    DatatableComponent.prototype.pageSize;\n    /** @type {?} */\n    DatatableComponent.prototype.bodyHeight;\n    /** @type {?} */\n    DatatableComponent.prototype.rowCount;\n    /** @type {?} */\n    DatatableComponent.prototype.rowDiffer;\n    /** @type {?} */\n    DatatableComponent.prototype._offsetX;\n    /** @type {?} */\n    DatatableComponent.prototype._limit;\n    /** @type {?} */\n    DatatableComponent.prototype._count;\n    /** @type {?} */\n    DatatableComponent.prototype._offset;\n    /** @type {?} */\n    DatatableComponent.prototype._rows;\n    /** @type {?} */\n    DatatableComponent.prototype._groupRowsBy;\n    /** @type {?} */\n    DatatableComponent.prototype._internalRows;\n    /** @type {?} */\n    DatatableComponent.prototype._internalColumns;\n    /** @type {?} */\n    DatatableComponent.prototype._columns;\n    /** @type {?} */\n    DatatableComponent.prototype._columnTemplates;\n    /** @type {?} */\n    DatatableComponent.prototype._subscriptions;\n    /**\n     * This will be used when displaying or selecting rows.\n     * when tracking/comparing them, we'll use the value of this fn,\n     *\n     * (`fn(x) === fn(y)` instead of `x === y`)\n     * @type {?}\n     */\n    DatatableComponent.prototype.rowIdentity;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.scrollbarHelper;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.dimensionsHelper;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.cd;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.columnChangesService;\n    /**\n     * @type {?}\n     * @private\n     */\n    DatatableComponent.prototype.configuration;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableHeaderCellComponent {\n    /**\n     * @param {?} cd\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this.sortFn = this.onSort.bind(this);\n        this.selectFn = this.select.emit.bind(this.select);\n        this.cellContext = {\n            column: this.column,\n            sortDir: this.sortDir,\n            sortFn: this.sortFn,\n            allRowsSelected: this.allRowsSelected,\n            selectFn: this.selectFn\n        };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set allRowsSelected(value) {\n        this._allRowsSelected = value;\n        this.cellContext.allRowsSelected = value;\n    }\n    /**\n     * @return {?}\n     */\n    get allRowsSelected() {\n        return this._allRowsSelected;\n    }\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get column() {\n        return this._column;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set sorts(val) {\n        this._sorts = val;\n        this.sortDir = this.calcSortDir(val);\n        this.cellContext.sortDir = this.sortDir;\n        this.sortClass = this.calcSortClass(this.sortDir);\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get sorts() {\n        return this._sorts;\n    }\n    /**\n     * @return {?}\n     */\n    get columnCssClasses() {\n        /** @type {?} */\n        let cls = 'datatable-header-cell';\n        if (this.column.sortable)\n            cls += ' sortable';\n        if (this.column.resizeable)\n            cls += ' resizeable';\n        if (this.column.headerClass) {\n            if (typeof this.column.headerClass === 'string') {\n                cls += ' ' + this.column.headerClass;\n            }\n            else if (typeof this.column.headerClass === 'function') {\n                /** @type {?} */\n                const res = this.column.headerClass({\n                    column: this.column\n                });\n                if (typeof res === 'string') {\n                    cls += res;\n                }\n                else if (typeof res === 'object') {\n                    /** @type {?} */\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true)\n                            cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        /** @type {?} */\n        const sortDir = this.sortDir;\n        if (sortDir) {\n            cls += ` sort-active sort-${sortDir}`;\n        }\n        return cls;\n    }\n    /**\n     * @return {?}\n     */\n    get name() {\n        // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n        return this.column.headerTemplate === undefined ? this.column.name : undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get width() {\n        return this.column.width;\n    }\n    /**\n     * @return {?}\n     */\n    get isCheckboxable() {\n        return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onContextmenu($event) {\n        this.columnContextmenu.emit({ event: $event, column: this.column });\n    }\n    /**\n     * @param {?} sorts\n     * @return {?}\n     */\n    calcSortDir(sorts) {\n        if (sorts && this.column) {\n            /** @type {?} */\n            const sort = sorts.find((/**\n             * @param {?} s\n             * @return {?}\n             */\n            (s) => {\n                return s.prop === this.column.prop;\n            }));\n            if (sort)\n                return sort.dir;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onSort() {\n        if (!this.column.sortable)\n            return;\n        /** @type {?} */\n        const newValue = nextSortDir(this.sortType, this.sortDir);\n        this.sort.emit({\n            column: this.column,\n            prevValue: this.sortDir,\n            newValue\n        });\n    }\n    /**\n     * @param {?} sortDir\n     * @return {?}\n     */\n    calcSortClass(sortDir) {\n        if (sortDir === SortDirection.asc) {\n            return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n        }\n        else if (sortDir === SortDirection.desc) {\n            return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n        }\n        else {\n            return `sort-btn`;\n        }\n    }\n}\nDataTableHeaderCellComponent.ɵfac = function DataTableHeaderCellComponent_Factory(t) { return new (t || DataTableHeaderCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nDataTableHeaderCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableHeaderCellComponent, selectors: [[\"datatable-header-cell\"]], hostAttrs: [1, \"datatable-header-cell\"], hostVars: 11, hostBindings: function DataTableHeaderCellComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"contextmenu\", function DataTableHeaderCellComponent_contextmenu_HostBindingHandler($event) { return ctx.onContextmenu($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"title\", ctx.name);\n        ɵngcc0.ɵɵclassMap(ctx.columnCssClasses);\n        ɵngcc0.ɵɵstyleProp(\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"width\", ctx.width, \"px\")(\"height\", ctx.headerHeight, \"px\");\n    } }, inputs: { allRowsSelected: \"allRowsSelected\", column: \"column\", sorts: \"sorts\", sortType: \"sortType\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", isTarget: \"isTarget\", targetMarkerTemplate: \"targetMarkerTemplate\", targetMarkerContext: \"targetMarkerContext\", selectionType: \"selectionType\", headerHeight: \"headerHeight\" }, outputs: { sort: \"sort\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, decls: 6, vars: 6, consts: [[1, \"datatable-header-cell-template-wrap\"], [4, \"ngIf\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [\"class\", \"datatable-header-cell-wrapper\", 4, \"ngIf\"], [3, \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"change\"], [1, \"datatable-header-cell-wrapper\"], [1, \"datatable-header-cell-label\", \"draggable\", 3, \"innerHTML\", \"click\"]], template: function DataTableHeaderCellComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, DataTableHeaderCellComponent_1_Template, 1, 2, undefined, 1);\n        ɵngcc0.ɵɵtemplate(2, DataTableHeaderCellComponent_label_2_Template, 2, 1, \"label\", 2);\n        ɵngcc0.ɵɵtemplate(3, DataTableHeaderCellComponent_span_3_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(4, DataTableHeaderCellComponent_4_Template, 1, 2, undefined, 1);\n        ɵngcc0.ɵɵelementStart(5, \"span\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function DataTableHeaderCellComponent_Template_span_click_5_listener() { return ctx.onSort(); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isTarget);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isCheckboxable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.column.headerTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.headerTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.sortClass);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDataTableHeaderCellComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nDataTableHeaderCellComponent.propDecorators = {\n    sortType: [{ type: Input }],\n    sortAscendingIcon: [{ type: Input }],\n    sortDescendingIcon: [{ type: Input }],\n    isTarget: [{ type: Input }],\n    targetMarkerTemplate: [{ type: Input }],\n    targetMarkerContext: [{ type: Input }],\n    allRowsSelected: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    column: [{ type: Input }],\n    headerHeight: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],\n    sorts: [{ type: Input }],\n    sort: [{ type: Output }],\n    select: [{ type: Output }],\n    columnContextmenu: [{ type: Output }],\n    columnCssClasses: [{ type: HostBinding, args: ['class',] }],\n    name: [{ type: HostBinding, args: ['attr.title',] }],\n    minWidth: [{ type: HostBinding, args: ['style.minWidth.px',] }],\n    maxWidth: [{ type: HostBinding, args: ['style.maxWidth.px',] }],\n    width: [{ type: HostBinding, args: ['style.width.px',] }],\n    onContextmenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableHeaderCellComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-header-cell',\n                template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-header-cell'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { sort: [{\n            type: Output\n        }], select: [{\n            type: Output\n        }], columnContextmenu: [{\n            type: Output\n        }], allRowsSelected: [{\n            type: Input\n        }], column: [{\n            type: Input\n        }], sorts: [{\n            type: Input\n        }], columnCssClasses: [{\n            type: HostBinding,\n            args: ['class']\n        }], name: [{\n            type: HostBinding,\n            args: ['attr.title']\n        }], minWidth: [{\n            type: HostBinding,\n            args: ['style.minWidth.px']\n        }], maxWidth: [{\n            type: HostBinding,\n            args: ['style.maxWidth.px']\n        }], width: [{\n            type: HostBinding,\n            args: ['style.width.px']\n        }], onContextmenu: [{\n            type: HostListener,\n            args: ['contextmenu', ['$event']]\n        }], sortType: [{\n            type: Input\n        }], sortAscendingIcon: [{\n            type: Input\n        }], sortDescendingIcon: [{\n            type: Input\n        }], isTarget: [{\n            type: Input\n        }], targetMarkerTemplate: [{\n            type: Input\n        }], targetMarkerContext: [{\n            type: Input\n        }], selectionType: [{\n            type: Input\n        }], headerHeight: [{\n            type: HostBinding,\n            args: ['style.height.px']\n        }, {\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortType;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortAscendingIcon;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortDescendingIcon;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.isTarget;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.targetMarkerTemplate;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.targetMarkerContext;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype._allRowsSelected;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.headerHeight;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sort;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.select;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.columnContextmenu;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortFn;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortClass;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.sortDir;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.selectFn;\n    /** @type {?} */\n    DataTableHeaderCellComponent.prototype.cellContext;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderCellComponent.prototype._column;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderCellComponent.prototype._sorts;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableHeaderCellComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableFooterComponent {\n    constructor() {\n        this.selectedCount = 0;\n        this.page = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    get isVisible() {\n        return this.rowCount / this.pageSize > 1;\n    }\n    /**\n     * @return {?}\n     */\n    get curPage() {\n        return this.offset + 1;\n    }\n}\nDataTableFooterComponent.ɵfac = function DataTableFooterComponent_Factory(t) { return new (t || DataTableFooterComponent)(); };\nDataTableFooterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableFooterComponent, selectors: [[\"datatable-footer\"]], hostAttrs: [1, \"datatable-footer\"], inputs: { selectedCount: \"selectedCount\", footerHeight: \"footerHeight\", rowCount: \"rowCount\", pageSize: \"pageSize\", offset: \"offset\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", totalMessage: \"totalMessage\", footerTemplate: \"footerTemplate\", selectedMessage: \"selectedMessage\" }, outputs: { page: \"page\" }, decls: 4, vars: 8, consts: [[1, \"datatable-footer-inner\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"page-count\", 4, \"ngIf\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"page-count\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\"]], template: function DataTableFooterComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, DataTableFooterComponent_1_Template, 1, 8, undefined, 1);\n        ɵngcc0.ɵɵtemplate(2, DataTableFooterComponent_div_2_Template, 3, 3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(3, DataTableFooterComponent_datatable_pager_3_Template, 1, 8, \"datatable-pager\", 3);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"height\", ctx.footerHeight, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(6, _c2, ctx.selectedMessage));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.footerTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.footerTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.footerTemplate);\n    } }, directives: function () { return [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, DataTablePagerComponent]; }, encapsulation: 2, changeDetection: 0 });\nDataTableFooterComponent.propDecorators = {\n    footerHeight: [{ type: Input }],\n    rowCount: [{ type: Input }],\n    pageSize: [{ type: Input }],\n    offset: [{ type: Input }],\n    pagerLeftArrowIcon: [{ type: Input }],\n    pagerRightArrowIcon: [{ type: Input }],\n    pagerPreviousIcon: [{ type: Input }],\n    pagerNextIcon: [{ type: Input }],\n    totalMessage: [{ type: Input }],\n    footerTemplate: [{ type: Input }],\n    selectedCount: [{ type: Input }],\n    selectedMessage: [{ type: Input }],\n    page: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableFooterComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-footer',\n                template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-footer'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return []; }, { selectedCount: [{\n            type: Input\n        }], page: [{\n            type: Output\n        }], footerHeight: [{\n            type: Input\n        }], rowCount: [{\n            type: Input\n        }], pageSize: [{\n            type: Input\n        }], offset: [{\n            type: Input\n        }], pagerLeftArrowIcon: [{\n            type: Input\n        }], pagerRightArrowIcon: [{\n            type: Input\n        }], pagerPreviousIcon: [{\n            type: Input\n        }], pagerNextIcon: [{\n            type: Input\n        }], totalMessage: [{\n            type: Input\n        }], footerTemplate: [{\n            type: Input\n        }], selectedMessage: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTableFooterComponent.prototype.footerHeight;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.rowCount;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pageSize;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.offset;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerLeftArrowIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerRightArrowIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerPreviousIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.pagerNextIcon;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.totalMessage;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.footerTemplate;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.selectedCount;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.selectedMessage;\n    /** @type {?} */\n    DataTableFooterComponent.prototype.page;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTablePagerComponent {\n    constructor() {\n        this.change = new EventEmitter();\n        this._count = 0;\n        this._page = 1;\n        this._size = 0;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set size(val) {\n        this._size = val;\n        this.pages = this.calcPages();\n    }\n    /**\n     * @return {?}\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set count(val) {\n        this._count = val;\n        this.pages = this.calcPages();\n    }\n    /**\n     * @return {?}\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set page(val) {\n        this._page = val;\n        this.pages = this.calcPages();\n    }\n    /**\n     * @return {?}\n     */\n    get page() {\n        return this._page;\n    }\n    /**\n     * @return {?}\n     */\n    get totalPages() {\n        /** @type {?} */\n        const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n        return Math.max(count || 0, 1);\n    }\n    /**\n     * @return {?}\n     */\n    canPrevious() {\n        return this.page > 1;\n    }\n    /**\n     * @return {?}\n     */\n    canNext() {\n        return this.page < this.totalPages;\n    }\n    /**\n     * @return {?}\n     */\n    prevPage() {\n        this.selectPage(this.page - 1);\n    }\n    /**\n     * @return {?}\n     */\n    nextPage() {\n        this.selectPage(this.page + 1);\n    }\n    /**\n     * @param {?} page\n     * @return {?}\n     */\n    selectPage(page) {\n        if (page > 0 && page <= this.totalPages && page !== this.page) {\n            this.page = page;\n            this.change.emit({\n                page\n            });\n        }\n    }\n    /**\n     * @param {?=} page\n     * @return {?}\n     */\n    calcPages(page) {\n        /** @type {?} */\n        const pages = [];\n        /** @type {?} */\n        let startPage = 1;\n        /** @type {?} */\n        let endPage = this.totalPages;\n        /** @type {?} */\n        const maxSize = 5;\n        /** @type {?} */\n        const isMaxSized = maxSize < this.totalPages;\n        page = page || this.page;\n        if (isMaxSized) {\n            startPage = page - Math.floor(maxSize / 2);\n            endPage = page + Math.floor(maxSize / 2);\n            if (startPage < 1) {\n                startPage = 1;\n                endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n            }\n            else if (endPage > this.totalPages) {\n                startPage = Math.max(this.totalPages - maxSize + 1, 1);\n                endPage = this.totalPages;\n            }\n        }\n        for (let num = startPage; num <= endPage; num++) {\n            pages.push({\n                number: num,\n                text: (/** @type {?} */ (((/** @type {?} */ (num)))))\n            });\n        }\n        return pages;\n    }\n}\nDataTablePagerComponent.ɵfac = function DataTablePagerComponent_Factory(t) { return new (t || DataTablePagerComponent)(); };\nDataTablePagerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTablePagerComponent, selectors: [[\"datatable-pager\"]], hostAttrs: [1, \"datatable-pager\"], inputs: { size: \"size\", count: \"count\", page: \"page\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\" }, outputs: { change: \"change\" }, decls: 14, vars: 21, consts: [[1, \"pager\"], [\"role\", \"button\", \"aria-label\", \"go to first page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to previous page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"class\", \"pages\", 3, \"active\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"button\", \"aria-label\", \"go to next page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to last page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", 1, \"pages\"], [\"href\", \"javascript:void(0)\", 3, \"click\"]], template: function DataTablePagerComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"li\");\n        ɵngcc0.ɵɵelementStart(2, \"a\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_2_listener() { return ctx.selectPage(1); });\n        ɵngcc0.ɵɵelement(3, \"i\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"li\");\n        ɵngcc0.ɵɵelementStart(5, \"a\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_5_listener() { return ctx.prevPage(); });\n        ɵngcc0.ɵɵelement(6, \"i\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, DataTablePagerComponent_li_7_Template, 3, 4, \"li\", 3);\n        ɵngcc0.ɵɵelementStart(8, \"li\");\n        ɵngcc0.ɵɵelementStart(9, \"a\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_9_listener() { return ctx.nextPage(); });\n        ɵngcc0.ɵɵelement(10, \"i\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"li\");\n        ɵngcc0.ɵɵelementStart(12, \"a\", 5);\n        ɵngcc0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_12_listener() { return ctx.selectPage(ctx.totalPages); });\n        ɵngcc0.ɵɵelement(13, \"i\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canPrevious());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassMap(ctx.pagerPreviousIcon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canPrevious());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassMap(ctx.pagerLeftArrowIcon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.pages);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canNext());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassMap(ctx.pagerRightArrowIcon);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canNext());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassMap(ctx.pagerNextIcon);\n    } }, directives: [ɵngcc1.NgForOf], encapsulation: 2, changeDetection: 0 });\nDataTablePagerComponent.propDecorators = {\n    pagerLeftArrowIcon: [{ type: Input }],\n    pagerRightArrowIcon: [{ type: Input }],\n    pagerPreviousIcon: [{ type: Input }],\n    pagerNextIcon: [{ type: Input }],\n    size: [{ type: Input }],\n    count: [{ type: Input }],\n    page: [{ type: Input }],\n    change: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTablePagerComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-pager',\n                template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `,\n                host: {\n                    class: 'datatable-pager'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return []; }, { change: [{\n            type: Output\n        }], size: [{\n            type: Input\n        }], count: [{\n            type: Input\n        }], page: [{\n            type: Input\n        }], pagerLeftArrowIcon: [{\n            type: Input\n        }], pagerRightArrowIcon: [{\n            type: Input\n        }], pagerPreviousIcon: [{\n            type: Input\n        }], pagerNextIcon: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerLeftArrowIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerRightArrowIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerPreviousIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pagerNextIcon;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.change;\n    /** @type {?} */\n    DataTablePagerComponent.prototype._count;\n    /** @type {?} */\n    DataTablePagerComponent.prototype._page;\n    /** @type {?} */\n    DataTablePagerComponent.prototype._size;\n    /** @type {?} */\n    DataTablePagerComponent.prototype.pages;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ProgressBarComponent {\n}\nProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(); };\nProgressBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ProgressBarComponent, selectors: [[\"datatable-progress\"]], decls: 3, vars: 0, consts: [[\"role\", \"progressbar\", 1, \"progress-linear\"], [1, \"container\"], [1, \"bar\"]], template: function ProgressBarComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelement(2, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } }, encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ProgressBarComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-progress',\n                template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nconst Keys = {\n    up: 38,\n    down: 40,\n    return: 13,\n    escape: 27,\n    left: 37,\n    right: 39,\n};\nKeys[Keys.up] = 'up';\nKeys[Keys.down] = 'down';\nKeys[Keys.return] = 'return';\nKeys[Keys.escape] = 'escape';\nKeys[Keys.left] = 'left';\nKeys[Keys.right] = 'right';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableBodyRowComponent {\n    /**\n     * @param {?} differs\n     * @param {?} scrollbarHelper\n     * @param {?} cd\n     * @param {?} element\n     */\n    constructor(differs, scrollbarHelper, cd, element) {\n        this.differs = differs;\n        this.scrollbarHelper = scrollbarHelper;\n        this.cd = cd;\n        this.treeStatus = 'collapsed';\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this._groupStyles = {\n            left: {},\n            center: {},\n            right: {}\n        };\n        this._element = element.nativeElement;\n        this._rowDiffer = differs.find({}).create();\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set columns(val) {\n        this._columns = val;\n        this.recalculateColumns(val);\n        this.buildStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set innerWidth(val) {\n        if (this._columns) {\n            /** @type {?} */\n            const colByPin = columnsByPin(this._columns);\n            this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        }\n        this._innerWidth = val;\n        this.recalculateColumns();\n        this.buildStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set offsetX(val) {\n        this._offsetX = val;\n        this.buildStylesByGroup();\n    }\n    /**\n     * @return {?}\n     */\n    get offsetX() {\n        return this._offsetX;\n    }\n    /**\n     * @return {?}\n     */\n    get cssClass() {\n        /** @type {?} */\n        let cls = 'datatable-body-row';\n        if (this.isSelected) {\n            cls += ' active';\n        }\n        if (this.rowIndex % 2 !== 0) {\n            cls += ' datatable-row-odd';\n        }\n        if (this.rowIndex % 2 === 0) {\n            cls += ' datatable-row-even';\n        }\n        if (this.rowClass) {\n            /** @type {?} */\n            const res = this.rowClass(this.row);\n            if (typeof res === 'string') {\n                cls += ` ${res}`;\n            }\n            else if (typeof res === 'object') {\n                /** @type {?} */\n                const keys = Object.keys(res);\n                for (const k of keys) {\n                    if (res[k] === true) {\n                        cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        return cls;\n    }\n    /**\n     * @return {?}\n     */\n    get columnsTotalWidths() {\n        return this._columnGroupWidths.total;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this._rowDiffer.diff(this.row)) {\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * @param {?} index\n     * @param {?} colGroup\n     * @return {?}\n     */\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    /**\n     * @param {?} index\n     * @param {?} column\n     * @return {?}\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * @return {?}\n     */\n    buildStylesByGroup() {\n        this._groupStyles.left = this.calcStylesByGroup('left');\n        this._groupStyles.center = this.calcStylesByGroup('center');\n        this._groupStyles.right = this.calcStylesByGroup('right');\n        this.cd.markForCheck();\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    calcStylesByGroup(group) {\n        /** @type {?} */\n        const widths = this._columnGroupWidths;\n        /** @type {?} */\n        const offsetX = this.offsetX;\n        /** @type {?} */\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            /** @type {?} */\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            /** @type {?} */\n            const totalDiff = widths.total - bodyWidth;\n            /** @type {?} */\n            const offsetDiff = totalDiff - offsetX;\n            /** @type {?} */\n            const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    /**\n     * @param {?} event\n     * @param {?} index\n     * @return {?}\n     */\n    onActivate(event, index) {\n        event.cellIndex = index;\n        event.rowElement = this._element;\n        this.activate.emit(event);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyDown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isTargetRow = event.target === this._element;\n        /** @type {?} */\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetRow) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                rowElement: this._element\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onMouseenter(event) {\n        this.activate.emit({\n            type: 'mouseenter',\n            event,\n            row: this.row,\n            rowElement: this._element\n        });\n    }\n    /**\n     * @param {?=} val\n     * @return {?}\n     */\n    recalculateColumns(val = this.columns) {\n        this._columns = val;\n        /** @type {?} */\n        const colsByPin = columnsByPin(this._columns);\n        this._columnsByPin = columnsByPinArr(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n    }\n    /**\n     * @return {?}\n     */\n    onTreeAction() {\n        this.treeAction.emit();\n    }\n}\nDataTableBodyRowComponent.ɵfac = function DataTableBodyRowComponent_Factory(t) { return new (t || DataTableBodyRowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ScrollbarHelper, 4), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nDataTableBodyRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableBodyRowComponent, selectors: [[\"datatable-body-row\"]], hostVars: 6, hostBindings: function DataTableBodyRowComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function DataTableBodyRowComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })(\"mouseenter\", function DataTableBodyRowComponent_mouseenter_HostBindingHandler($event) { return ctx.onMouseenter($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.cssClass);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.columnsTotalWidths, \"px\")(\"height\", ctx.rowHeight, \"px\");\n    } }, inputs: { treeStatus: \"treeStatus\", columns: \"columns\", innerWidth: \"innerWidth\", offsetX: \"offsetX\", expanded: \"expanded\", rowClass: \"rowClass\", row: \"row\", group: \"group\", isSelected: \"isSelected\", rowIndex: \"rowIndex\", displayCheck: \"displayCheck\", rowHeight: \"rowHeight\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, decls: 1, vars: 2, consts: [[3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\"]], template: function DataTableBodyRowComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, DataTableBodyRowComponent_div_0_Template, 2, 6, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\n    } }, directives: function () { return [ɵngcc1.NgForOf, ɵngcc1.NgStyle, DataTableBodyCellComponent]; }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDataTableBodyRowComponent.ctorParameters = () => [\n    { type: KeyValueDiffers },\n    { type: ScrollbarHelper, decorators: [{ type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef }\n];\nDataTableBodyRowComponent.propDecorators = {\n    columns: [{ type: Input }],\n    innerWidth: [{ type: Input }],\n    expanded: [{ type: Input }],\n    rowClass: [{ type: Input }],\n    row: [{ type: Input }],\n    group: [{ type: Input }],\n    isSelected: [{ type: Input }],\n    rowIndex: [{ type: Input }],\n    displayCheck: [{ type: Input }],\n    treeStatus: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    cssClass: [{ type: HostBinding, args: ['class',] }],\n    rowHeight: [{ type: HostBinding, args: ['style.height.px',] }, { type: Input }],\n    columnsTotalWidths: [{ type: HostBinding, args: ['style.width.px',] }],\n    activate: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],\n    onMouseenter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableBodyRowComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-body-row',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `\n            }]\n    }], function () { return [{ type: ɵngcc0.KeyValueDiffers }, { type: ScrollbarHelper, decorators: [{\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }]; }, { treeStatus: [{\n            type: Input\n        }], activate: [{\n            type: Output\n        }], treeAction: [{\n            type: Output\n        }], columns: [{\n            type: Input\n        }], innerWidth: [{\n            type: Input\n        }], offsetX: [{\n            type: Input\n        }], cssClass: [{\n            type: HostBinding,\n            args: ['class']\n        }], columnsTotalWidths: [{\n            type: HostBinding,\n            args: ['style.width.px']\n        }], onKeyDown: [{\n            type: HostListener,\n            args: ['keydown', ['$event']]\n        }], onMouseenter: [{\n            type: HostListener,\n            args: ['mouseenter', ['$event']]\n        }], expanded: [{\n            type: Input\n        }], rowClass: [{\n            type: Input\n        }], row: [{\n            type: Input\n        }], group: [{\n            type: Input\n        }], isSelected: [{\n            type: Input\n        }], rowIndex: [{\n            type: Input\n        }], displayCheck: [{\n            type: Input\n        }], rowHeight: [{\n            type: HostBinding,\n            args: ['style.height.px']\n        }, {\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.expanded;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.rowClass;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.row;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.group;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.isSelected;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.rowIndex;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.displayCheck;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.treeStatus;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.rowHeight;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.activate;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype.treeAction;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._element;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._columnGroupWidths;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._columnsByPin;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._offsetX;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._columns;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._innerWidth;\n    /** @type {?} */\n    DataTableBodyRowComponent.prototype._groupStyles;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype._rowDiffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype.differs;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype.scrollbarHelper;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyRowComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableRowWrapperComponent {\n    /**\n     * @param {?} cd\n     * @param {?} differs\n     */\n    constructor(cd, differs) {\n        this.cd = cd;\n        this.differs = differs;\n        this.rowContextmenu = new EventEmitter(false);\n        this.groupContext = {\n            group: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this.rowContext = {\n            row: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this._expanded = false;\n        this.rowDiffer = differs.find({}).create();\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.rowContext.rowIndex = val;\n        this.groupContext.rowIndex = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set expanded(val) {\n        this._expanded = val;\n        this.groupContext.expanded = val;\n        this.rowContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get expanded() {\n        return this._expanded;\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.row)) {\n            this.rowContext.row = this.row;\n            this.groupContext.group = this.row;\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    onContextmenu($event) {\n        this.rowContextmenu.emit({ event: $event, row: this.row });\n    }\n    /**\n     * @return {?}\n     */\n    getGroupHeaderStyle() {\n        /** @type {?} */\n        const styles = {};\n        styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n        styles['backface-visibility'] = 'hidden';\n        styles['width'] = this.innerWidth;\n        return styles;\n    }\n}\nDataTableRowWrapperComponent.ɵfac = function DataTableRowWrapperComponent_Factory(t) { return new (t || DataTableRowWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers)); };\nDataTableRowWrapperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableRowWrapperComponent, selectors: [[\"datatable-row-wrapper\"]], hostAttrs: [1, \"datatable-row-wrapper\"], hostBindings: function DataTableRowWrapperComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"contextmenu\", function DataTableRowWrapperComponent_contextmenu_HostBindingHandler($event) { return ctx.onContextmenu($event); });\n    } }, inputs: { rowIndex: \"rowIndex\", expanded: \"expanded\", innerWidth: \"innerWidth\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", offsetX: \"offsetX\", detailRowHeight: \"detailRowHeight\", row: \"row\", groupedRows: \"groupedRows\" }, outputs: { rowContextmenu: \"rowContextmenu\" }, ngContentSelectors: _c0, decls: 3, vars: 3, consts: [[\"class\", \"datatable-group-header\", 3, \"ngStyle\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"datatable-row-detail\", 3, \"height\", 4, \"ngIf\"], [1, \"datatable-group-header\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-row-detail\"]], template: function DataTableRowWrapperComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_0_Template, 2, 2, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, DataTableRowWrapperComponent_1_Template, 1, 0, undefined, 1);\n        ɵngcc0.ɵɵtemplate(2, DataTableRowWrapperComponent_div_2_Template, 2, 3, \"div\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.groupHeader && ctx.groupHeader.template);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.groupHeader && ctx.groupHeader.template && ctx.expanded || (!ctx.groupHeader || !ctx.groupHeader.template));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.rowDetail && ctx.rowDetail.template && ctx.expanded);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDataTableRowWrapperComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: KeyValueDiffers }\n];\nDataTableRowWrapperComponent.propDecorators = {\n    innerWidth: [{ type: Input }],\n    rowDetail: [{ type: Input }],\n    groupHeader: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    detailRowHeight: [{ type: Input }],\n    row: [{ type: Input }],\n    groupedRows: [{ type: Input }],\n    rowContextmenu: [{ type: Output }],\n    rowIndex: [{ type: Input }],\n    expanded: [{ type: Input }],\n    onContextmenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableRowWrapperComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-row-wrapper',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || (!groupHeader || !groupHeader.template)\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n                host: {\n                    class: 'datatable-row-wrapper'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.KeyValueDiffers }]; }, { rowContextmenu: [{\n            type: Output\n        }], rowIndex: [{\n            type: Input\n        }], expanded: [{\n            type: Input\n        }], onContextmenu: [{\n            type: HostListener,\n            args: ['contextmenu', ['$event']]\n        }], innerWidth: [{\n            type: Input\n        }], rowDetail: [{\n            type: Input\n        }], groupHeader: [{\n            type: Input\n        }], offsetX: [{\n            type: Input\n        }], detailRowHeight: [{\n            type: Input\n        }], row: [{\n            type: Input\n        }], groupedRows: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.innerWidth;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.rowDetail;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.groupHeader;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.offsetX;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.detailRowHeight;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.row;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.groupedRows;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.rowContextmenu;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.groupContext;\n    /** @type {?} */\n    DataTableRowWrapperComponent.prototype.rowContext;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype.rowDiffer;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype._rowIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype.cd;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableRowWrapperComponent.prototype.differs;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DataTableBodyCellComponent {\n    /**\n     * @param {?} element\n     * @param {?} cd\n     */\n    constructor(element, cd) {\n        this.cd = cd;\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this.isFocused = false;\n        this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n        this.activateFn = this.activate.emit.bind(this.activate);\n        this.cellContext = {\n            onCheckboxChangeFn: this.onCheckboxChangeFn,\n            activateFn: this.activateFn,\n            row: this.row,\n            group: this.group,\n            value: this.value,\n            column: this.column,\n            rowHeight: this.rowHeight,\n            isSelected: this.isSelected,\n            rowIndex: this.rowIndex,\n            treeStatus: this.treeStatus,\n            onTreeAction: this.onTreeAction.bind(this)\n        };\n        this._element = element.nativeElement;\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    set group(group) {\n        this._group = group;\n        this.cellContext.group = group;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get group() {\n        return this._group;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowHeight(val) {\n        this._rowHeight = val;\n        this.cellContext.rowHeight = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set isSelected(val) {\n        this._isSelected = val;\n        this.cellContext.isSelected = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get isSelected() {\n        return this._isSelected;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set expanded(val) {\n        this._expanded = val;\n        this.cellContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get expanded() {\n        return this._expanded;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.cellContext.rowIndex = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    /**\n     * @param {?} column\n     * @return {?}\n     */\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get column() {\n        return this._column;\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    set row(row) {\n        this._row = row;\n        this.cellContext.row = row;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get row() {\n        return this._row;\n    }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set sorts(val) {\n        this._sorts = val;\n        this.calcSortDir = this.calcSortDir(val);\n    }\n    /**\n     * @return {?}\n     */\n    get sorts() {\n        return this._sorts;\n    }\n    /**\n     * @param {?} status\n     * @return {?}\n     */\n    set treeStatus(status) {\n        if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n            this._treeStatus = 'collapsed';\n        }\n        else {\n            this._treeStatus = status;\n        }\n        this.cellContext.treeStatus = this._treeStatus;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    get treeStatus() {\n        return this._treeStatus;\n    }\n    /**\n     * @return {?}\n     */\n    get columnCssClasses() {\n        /** @type {?} */\n        let cls = 'datatable-body-cell';\n        if (this.column.cellClass) {\n            if (typeof this.column.cellClass === 'string') {\n                cls += ' ' + this.column.cellClass;\n            }\n            else if (typeof this.column.cellClass === 'function') {\n                /** @type {?} */\n                const res = this.column.cellClass({\n                    row: this.row,\n                    group: this.group,\n                    column: this.column,\n                    value: this.value,\n                    rowHeight: this.rowHeight\n                });\n                if (typeof res === 'string') {\n                    cls += res;\n                }\n                else if (typeof res === 'object') {\n                    /** @type {?} */\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true) {\n                            cls += ` ${k}`;\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.sortDir) {\n            cls += ' sort-active';\n        }\n        if (this.isFocused) {\n            cls += ' active';\n        }\n        if (this.sortDir === SortDirection.asc) {\n            cls += ' sort-asc';\n        }\n        if (this.sortDir === SortDirection.desc) {\n            cls += ' sort-desc';\n        }\n        return cls;\n    }\n    /**\n     * @return {?}\n     */\n    get width() {\n        return this.column.width;\n    }\n    /**\n     * @return {?}\n     */\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    /**\n     * @return {?}\n     */\n    get height() {\n        /** @type {?} */\n        const height = this.rowHeight;\n        if (isNaN(height)) {\n            return height;\n        }\n        return height + 'px';\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        this.checkValueUpdates();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.cellTemplate) {\n            this.cellTemplate.clear();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    checkValueUpdates() {\n        /** @type {?} */\n        let value = '';\n        if (!this.row || !this.column) {\n            value = '';\n        }\n        else {\n            /** @type {?} */\n            const val = this.column.$$valueGetter(this.row, this.column.prop);\n            /** @type {?} */\n            const userPipe = this.column.pipe;\n            if (userPipe) {\n                value = userPipe.transform(val);\n            }\n            else if (value !== undefined) {\n                value = val;\n            }\n        }\n        if (this.value !== value) {\n            this.value = value;\n            this.cellContext.value = value;\n            this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    onFocus() {\n        this.isFocused = true;\n    }\n    /**\n     * @return {?}\n     */\n    onBlur() {\n        this.isFocused = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onClick(event) {\n        this.activate.emit({\n            type: 'click',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onDblClick(event) {\n        this.activate.emit({\n            type: 'dblclick',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyDown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isTargetCell = event.target === this._element;\n        /** @type {?} */\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetCell) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                group: this.group,\n                rowHeight: this.rowHeight,\n                column: this.column,\n                value: this.value,\n                cellElement: this._element\n            });\n        }\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onCheckboxChange(event) {\n        this.activate.emit({\n            type: 'checkbox',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element,\n            treeStatus: 'collapsed'\n        });\n    }\n    /**\n     * @param {?} sorts\n     * @return {?}\n     */\n    calcSortDir(sorts) {\n        if (!sorts) {\n            return;\n        }\n        /** @type {?} */\n        const sort = sorts.find((/**\n         * @param {?} s\n         * @return {?}\n         */\n        (s) => {\n            return s.prop === this.column.prop;\n        }));\n        if (sort) {\n            return sort.dir;\n        }\n    }\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    stripHtml(html) {\n        if (!html.replace) {\n            return html;\n        }\n        return html.replace(/<\\/?[^>]+(>|$)/g, '');\n    }\n    /**\n     * @return {?}\n     */\n    onTreeAction() {\n        this.treeAction.emit(this.row);\n    }\n    /**\n     * @param {?} column\n     * @param {?} row\n     * @return {?}\n     */\n    calcLeftMargin(column, row) {\n        /** @type {?} */\n        const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n        return column.isTreeColumn ? row.level * levelIndent : 0;\n    }\n}\nDataTableBodyCellComponent.ɵfac = function DataTableBodyCellComponent_Factory(t) { return new (t || DataTableBodyCellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nDataTableBodyCellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableBodyCellComponent, selectors: [[\"datatable-body-cell\"]], viewQuery: function DataTableBodyCellComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c3, true, ViewContainerRef);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);\n    } }, hostVars: 10, hostBindings: function DataTableBodyCellComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function DataTableBodyCellComponent_focus_HostBindingHandler() { return ctx.onFocus(); })(\"blur\", function DataTableBodyCellComponent_blur_HostBindingHandler() { return ctx.onBlur(); })(\"click\", function DataTableBodyCellComponent_click_HostBindingHandler($event) { return ctx.onClick($event); })(\"dblclick\", function DataTableBodyCellComponent_dblclick_HostBindingHandler($event) { return ctx.onDblClick($event); })(\"keydown\", function DataTableBodyCellComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassMap(ctx.columnCssClasses);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"height\", ctx.height);\n    } }, inputs: { group: \"group\", rowHeight: \"rowHeight\", isSelected: \"isSelected\", expanded: \"expanded\", rowIndex: \"rowIndex\", column: \"column\", row: \"row\", sorts: \"sorts\", treeStatus: \"treeStatus\", displayCheck: \"displayCheck\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, decls: 5, vars: 6, consts: [[1, \"datatable-body-cell-label\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"title\", \"innerHTML\", 4, \"ngIf\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"click\"], [\"class\", \"datatable-tree-button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"datatable-tree-button\", 3, \"disabled\", \"click\"], [\"class\", \"icon datatable-icon-collapse\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-up\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-down\", 4, \"ngIf\"], [1, \"icon\", \"datatable-icon-collapse\"], [1, \"icon\", \"datatable-icon-up\"], [1, \"icon\", \"datatable-icon-down\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"title\", \"innerHTML\"], [\"cellTemplate\", \"\"]], template: function DataTableBodyCellComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, DataTableBodyCellComponent_label_1_Template, 2, 1, \"label\", 1);\n        ɵngcc0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_Template, 3, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵtemplate(3, DataTableBodyCellComponent_span_3_Template, 1, 2, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(4, DataTableBodyCellComponent_4_Template, 2, 2, undefined, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"margin-left\", ctx.calcLeftMargin(ctx.column, ctx.row), \"px\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.checkboxable && (!ctx.displayCheck || ctx.displayCheck(ctx.row, ctx.column, ctx.value)));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.isTreeColumn);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.column.cellTemplate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.column.cellTemplate);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nDataTableBodyCellComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef }\n];\nDataTableBodyCellComponent.propDecorators = {\n    displayCheck: [{ type: Input }],\n    group: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    isSelected: [{ type: Input }],\n    expanded: [{ type: Input }],\n    rowIndex: [{ type: Input }],\n    column: [{ type: Input }],\n    row: [{ type: Input }],\n    sorts: [{ type: Input }],\n    treeStatus: [{ type: Input }],\n    activate: [{ type: Output }],\n    treeAction: [{ type: Output }],\n    cellTemplate: [{ type: ViewChild, args: ['cellTemplate', { read: ViewContainerRef, static: true },] }],\n    columnCssClasses: [{ type: HostBinding, args: ['class',] }],\n    width: [{ type: HostBinding, args: ['style.width.px',] }],\n    minWidth: [{ type: HostBinding, args: ['style.minWidth.px',] }],\n    maxWidth: [{ type: HostBinding, args: ['style.maxWidth.px',] }],\n    height: [{ type: HostBinding, args: ['style.height',] }],\n    onFocus: [{ type: HostListener, args: ['focus',] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onDblClick: [{ type: HostListener, args: ['dblclick', ['$event'],] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableBodyCellComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-body-cell',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { activate: [{\n            type: Output\n        }], treeAction: [{\n            type: Output\n        }], group: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], isSelected: [{\n            type: Input\n        }], expanded: [{\n            type: Input\n        }], rowIndex: [{\n            type: Input\n        }], column: [{\n            type: Input\n        }], row: [{\n            type: Input\n        }], sorts: [{\n            type: Input\n        }], treeStatus: [{\n            type: Input\n        }], columnCssClasses: [{\n            type: HostBinding,\n            args: ['class']\n        }], width: [{\n            type: HostBinding,\n            args: ['style.width.px']\n        }], minWidth: [{\n            type: HostBinding,\n            args: ['style.minWidth.px']\n        }], maxWidth: [{\n            type: HostBinding,\n            args: ['style.maxWidth.px']\n        }], height: [{\n            type: HostBinding,\n            args: ['style.height']\n        }], onFocus: [{\n            type: HostListener,\n            args: ['focus']\n        }], onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }], onClick: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], onDblClick: [{\n            type: HostListener,\n            args: ['dblclick', ['$event']]\n        }], onKeyDown: [{\n            type: HostListener,\n            args: ['keydown', ['$event']]\n        }], displayCheck: [{\n            type: Input\n        }], cellTemplate: [{\n            type: ViewChild,\n            args: ['cellTemplate', { read: ViewContainerRef, static: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.displayCheck;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.activate;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.treeAction;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.cellTemplate;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.sanitizedValue;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.value;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.sortDir;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.isFocused;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.onCheckboxChangeFn;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.activateFn;\n    /** @type {?} */\n    DataTableBodyCellComponent.prototype.cellContext;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._isSelected;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._sorts;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._column;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._row;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._group;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._rowHeight;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._rowIndex;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._expanded;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype._treeStatus;\n    /**\n     * @type {?}\n     * @private\n     */\n    DataTableBodyCellComponent.prototype.cd;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} selected\n * @param {?} row\n * @param {?} comparefn\n * @return {?}\n */\nfunction selectRows(selected, row, comparefn) {\n    /** @type {?} */\n    const selectedIndex = comparefn(row, selected);\n    if (selectedIndex > -1) {\n        selected.splice(selectedIndex, 1);\n    }\n    else {\n        selected.push(row);\n    }\n    return selected;\n}\n/**\n * @param {?} selected\n * @param {?} rows\n * @param {?} index\n * @param {?} prevIndex\n * @param {?} comparefn\n * @return {?}\n */\nfunction selectRowsBetween(selected, rows, index, prevIndex, comparefn) {\n    /** @type {?} */\n    const reverse = index < prevIndex;\n    for (let i = 0; i < rows.length; i++) {\n        /** @type {?} */\n        const row = rows[i];\n        /** @type {?} */\n        const greater = i >= prevIndex && i <= index;\n        /** @type {?} */\n        const lesser = i <= prevIndex && i >= index;\n        /** @type {?} */\n        let range = { start: 0, end: 0 };\n        if (reverse) {\n            range = {\n                start: index,\n                end: prevIndex\n            };\n        }\n        else {\n            range = {\n                start: prevIndex,\n                end: index + 1\n            };\n        }\n        if ((reverse && lesser) || (!reverse && greater)) {\n            // if in the positive range to be added to `selected`, and\n            // not already in the selected array, add it\n            if (i >= range.start && i <= range.end) {\n                selected.push(row);\n            }\n        }\n    }\n    return selected;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction Model() { }\nif (false) {\n    /** @type {?} */\n    Model.prototype.type;\n    /** @type {?} */\n    Model.prototype.event;\n    /** @type {?} */\n    Model.prototype.row;\n    /** @type {?} */\n    Model.prototype.rowElement;\n    /** @type {?} */\n    Model.prototype.cellElement;\n    /** @type {?} */\n    Model.prototype.cellIndex;\n}\nclass DataTableSelectionComponent {\n    constructor() {\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n    }\n    /**\n     * @param {?} event\n     * @param {?} index\n     * @param {?} row\n     * @return {?}\n     */\n    selectRow(event, index, row) {\n        if (!this.selectEnabled)\n            return;\n        /** @type {?} */\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        /** @type {?} */\n        const multi = this.selectionType === SelectionType.multi;\n        /** @type {?} */\n        const multiClick = this.selectionType === SelectionType.multiClick;\n        /** @type {?} */\n        let selected = [];\n        if (multi || chkbox || multiClick) {\n            if (event.shiftKey) {\n                selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n            }\n            else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n                selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n            }\n            else {\n                selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n            }\n        }\n        else {\n            selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n        }\n        if (typeof this.selectCheck === 'function') {\n            selected = selected.filter(this.selectCheck.bind(this));\n        }\n        this.selected.splice(0, this.selected.length);\n        this.selected.push(...selected);\n        this.prevIndex = index;\n        this.select.emit({\n            selected\n        });\n    }\n    /**\n     * @param {?} model\n     * @param {?} index\n     * @return {?}\n     */\n    onActivate(model, index) {\n        const { type, event, row } = model;\n        /** @type {?} */\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        /** @type {?} */\n        const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\n        if (select) {\n            this.selectRow(event, index, row);\n        }\n        else if (type === 'keydown') {\n            if (((/** @type {?} */ (event))).keyCode === Keys.return) {\n                this.selectRow(event, index, row);\n            }\n            else {\n                this.onKeyboardFocus(model);\n            }\n        }\n        this.activate.emit(model);\n    }\n    /**\n     * @param {?} model\n     * @return {?}\n     */\n    onKeyboardFocus(model) {\n        const { keyCode } = (/** @type {?} */ (model.event));\n        /** @type {?} */\n        const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n        if (shouldFocus) {\n            /** @type {?} */\n            const isCellSelection = this.selectionType === SelectionType.cell;\n            if (!model.cellElement || !isCellSelection) {\n                this.focusRow(model.rowElement, keyCode);\n            }\n            else if (isCellSelection) {\n                this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n            }\n        }\n    }\n    /**\n     * @param {?} rowElement\n     * @param {?} keyCode\n     * @return {?}\n     */\n    focusRow(rowElement, keyCode) {\n        /** @type {?} */\n        const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n        if (nextRowElement)\n            nextRowElement.focus();\n    }\n    /**\n     * @param {?} rowElement\n     * @param {?} keyCode\n     * @return {?}\n     */\n    getPrevNextRow(rowElement, keyCode) {\n        /** @type {?} */\n        const parentElement = rowElement.parentElement;\n        if (parentElement) {\n            /** @type {?} */\n            let focusElement;\n            if (keyCode === Keys.up) {\n                focusElement = parentElement.previousElementSibling;\n            }\n            else if (keyCode === Keys.down) {\n                focusElement = parentElement.nextElementSibling;\n            }\n            if (focusElement && focusElement.children.length) {\n                return focusElement.children[0];\n            }\n        }\n    }\n    /**\n     * @param {?} cellElement\n     * @param {?} rowElement\n     * @param {?} keyCode\n     * @param {?} cellIndex\n     * @return {?}\n     */\n    focusCell(cellElement, rowElement, keyCode, cellIndex) {\n        /** @type {?} */\n        let nextCellElement;\n        if (keyCode === Keys.left) {\n            nextCellElement = cellElement.previousElementSibling;\n        }\n        else if (keyCode === Keys.right) {\n            nextCellElement = cellElement.nextElementSibling;\n        }\n        else if (keyCode === Keys.up || keyCode === Keys.down) {\n            /** @type {?} */\n            const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n            if (nextRowElement) {\n                /** @type {?} */\n                const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n                if (children.length)\n                    nextCellElement = children[cellIndex];\n            }\n        }\n        if (nextCellElement)\n            nextCellElement.focus();\n    }\n    /**\n     * @param {?} row\n     * @return {?}\n     */\n    getRowSelected(row) {\n        return this.getRowSelectedIdx(row, this.selected) > -1;\n    }\n    /**\n     * @param {?} row\n     * @param {?} selected\n     * @return {?}\n     */\n    getRowSelectedIdx(row, selected) {\n        if (!selected || !selected.length)\n            return -1;\n        /** @type {?} */\n        const rowId = this.rowIdentity(row);\n        return selected.findIndex((/**\n         * @param {?} r\n         * @return {?}\n         */\n        r => {\n            /** @type {?} */\n            const id = this.rowIdentity(r);\n            return id === rowId;\n        }));\n    }\n}\nDataTableSelectionComponent.ɵfac = function DataTableSelectionComponent_Factory(t) { return new (t || DataTableSelectionComponent)(); };\nDataTableSelectionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableSelectionComponent, selectors: [[\"datatable-selection\"]], inputs: { rows: \"rows\", selected: \"selected\", selectEnabled: \"selectEnabled\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", selectCheck: \"selectCheck\" }, outputs: { activate: \"activate\", select: \"select\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DataTableSelectionComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nDataTableSelectionComponent.propDecorators = {\n    rows: [{ type: Input }],\n    selected: [{ type: Input }],\n    selectEnabled: [{ type: Input }],\n    selectionType: [{ type: Input }],\n    rowIdentity: [{ type: Input }],\n    selectCheck: [{ type: Input }],\n    activate: [{ type: Output }],\n    select: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableSelectionComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-selection',\n                template: `\n    <ng-content></ng-content>\n  `,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return []; }, { activate: [{\n            type: Output\n        }], select: [{\n            type: Output\n        }], rows: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], selectEnabled: [{\n            type: Input\n        }], selectionType: [{\n            type: Input\n        }], rowIdentity: [{\n            type: Input\n        }], selectCheck: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.rows;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selected;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selectEnabled;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selectionType;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.rowIdentity;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.selectCheck;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.activate;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.select;\n    /** @type {?} */\n    DataTableSelectionComponent.prototype.prevIndex;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction ISummaryColumn() { }\nif (false) {\n    /** @type {?|undefined} */\n    ISummaryColumn.prototype.summaryFunc;\n    /** @type {?|undefined} */\n    ISummaryColumn.prototype.summaryTemplate;\n    /** @type {?} */\n    ISummaryColumn.prototype.prop;\n    /** @type {?|undefined} */\n    ISummaryColumn.prototype.pipe;\n}\n/**\n * @param {?} cells\n * @return {?}\n */\nfunction defaultSumFunc(cells) {\n    /** @type {?} */\n    const cellsWithValues = cells.filter((/**\n     * @param {?} cell\n     * @return {?}\n     */\n    cell => !!cell));\n    if (!cellsWithValues.length) {\n        return null;\n    }\n    if (cellsWithValues.some((/**\n     * @param {?} cell\n     * @return {?}\n     */\n    cell => typeof cell !== 'number'))) {\n        return null;\n    }\n    return cellsWithValues.reduce((/**\n     * @param {?} res\n     * @param {?} cell\n     * @return {?}\n     */\n    (res, cell) => res + cell));\n}\n/**\n * @param {?} cells\n * @return {?}\n */\nfunction noopSumFunc(cells) {\n    return null;\n}\nclass DataTableSummaryRowComponent {\n    constructor() {\n        this.summaryRow = {};\n    }\n    /**\n     * @return {?}\n     */\n    ngOnChanges() {\n        if (!this.columns || !this.rows) {\n            return;\n        }\n        this.updateInternalColumns();\n        this.updateValues();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    updateInternalColumns() {\n        this._internalColumns = this.columns.map((/**\n         * @param {?} col\n         * @return {?}\n         */\n        col => (Object.assign({}, col, { cellTemplate: col.summaryTemplate }))));\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    updateValues() {\n        this.summaryRow = {};\n        this.columns\n            .filter((/**\n         * @param {?} col\n         * @return {?}\n         */\n        col => !col.summaryTemplate))\n            .forEach((/**\n         * @param {?} col\n         * @return {?}\n         */\n        col => {\n            /** @type {?} */\n            const cellsFromSingleColumn = this.rows.map((/**\n             * @param {?} row\n             * @return {?}\n             */\n            row => row[col.prop]));\n            /** @type {?} */\n            const sumFunc = this.getSummaryFunction(col);\n            this.summaryRow[col.prop] = col.pipe\n                ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\n                : sumFunc(cellsFromSingleColumn);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} column\n     * @return {?}\n     */\n    getSummaryFunction(column) {\n        if (column.summaryFunc === undefined) {\n            return defaultSumFunc;\n        }\n        else if (column.summaryFunc === null) {\n            return noopSumFunc;\n        }\n        else {\n            return column.summaryFunc;\n        }\n    }\n}\nDataTableSummaryRowComponent.ɵfac = function DataTableSummaryRowComponent_Factory(t) { return new (t || DataTableSummaryRowComponent)(); };\nDataTableSummaryRowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DataTableSummaryRowComponent, selectors: [[\"datatable-summary-row\"]], hostAttrs: [1, \"datatable-summary-row\"], inputs: { rows: \"rows\", columns: \"columns\", rowHeight: \"rowHeight\", offsetX: \"offsetX\", innerWidth: \"innerWidth\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], decls: 1, vars: 1, consts: [[\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\"]], template: function DataTableSummaryRowComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, DataTableSummaryRowComponent_datatable_body_row_0_Template, 1, 6, \"datatable-body-row\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.summaryRow && ctx._internalColumns);\n    } }, directives: [ɵngcc1.NgIf, DataTableBodyRowComponent], encapsulation: 2 });\nDataTableSummaryRowComponent.propDecorators = {\n    rows: [{ type: Input }],\n    columns: [{ type: Input }],\n    rowHeight: [{ type: Input }],\n    offsetX: [{ type: Input }],\n    innerWidth: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableSummaryRowComponent, [{\n        type: Component,\n        args: [{\n                selector: 'datatable-summary-row',\n                template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `,\n                host: {\n                    class: 'datatable-summary-row'\n                }\n            }]\n    }], function () { return []; }, { rows: [{\n            type: Input\n        }], columns: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], offsetX: [{\n            type: Input\n        }], innerWidth: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.rows;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.columns;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.rowHeight;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.offsetX;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.innerWidth;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype._internalColumns;\n    /** @type {?} */\n    DataTableSummaryRowComponent.prototype.summaryRow;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgxDatatableModule {\n    /**\n     * Configure global configuration via INgxDatatableConfig\n     * @param {?} configuration\n     * @return {?}\n     */\n    static forRoot(configuration) {\n        return {\n            ngModule: NgxDatatableModule,\n            providers: [{ provide: 'configuration', useValue: configuration }]\n        };\n    }\n}\nNgxDatatableModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxDatatableModule });\nNgxDatatableModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxDatatableModule_Factory(t) { return new (t || NgxDatatableModule)(); }, providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService], imports: [[CommonModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxDatatableModule, { declarations: function () { return [DataTableFooterTemplateDirective,\n        VisibilityDirective,\n        DraggableDirective,\n        ResizeableDirective,\n        OrderableDirective,\n        LongPressDirective,\n        ScrollerComponent,\n        DatatableComponent,\n        DataTableColumnDirective,\n        DataTableHeaderComponent,\n        DataTableHeaderCellComponent,\n        DataTableBodyComponent,\n        DataTableFooterComponent,\n        DataTablePagerComponent,\n        ProgressBarComponent,\n        DataTableBodyRowComponent,\n        DataTableRowWrapperComponent,\n        DatatableRowDetailDirective,\n        DatatableGroupHeaderDirective,\n        DatatableRowDetailTemplateDirective,\n        DataTableBodyCellComponent,\n        DataTableSelectionComponent,\n        DataTableColumnHeaderDirective,\n        DataTableColumnCellDirective,\n        DataTableColumnCellTreeToggle,\n        DatatableFooterDirective,\n        DatatableGroupHeaderTemplateDirective,\n        DataTableSummaryRowComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [DatatableComponent,\n        DatatableRowDetailDirective,\n        DatatableGroupHeaderDirective,\n        DatatableRowDetailTemplateDirective,\n        DataTableColumnDirective,\n        DataTableColumnHeaderDirective,\n        DataTableColumnCellDirective,\n        DataTableColumnCellTreeToggle,\n        DataTableFooterTemplateDirective,\n        DatatableFooterDirective,\n        DataTablePagerComponent,\n        DatatableGroupHeaderTemplateDirective]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxDatatableModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n                declarations: [\n                    DataTableFooterTemplateDirective,\n                    VisibilityDirective,\n                    DraggableDirective,\n                    ResizeableDirective,\n                    OrderableDirective,\n                    LongPressDirective,\n                    ScrollerComponent,\n                    DatatableComponent,\n                    DataTableColumnDirective,\n                    DataTableHeaderComponent,\n                    DataTableHeaderCellComponent,\n                    DataTableBodyComponent,\n                    DataTableFooterComponent,\n                    DataTablePagerComponent,\n                    ProgressBarComponent,\n                    DataTableBodyRowComponent,\n                    DataTableRowWrapperComponent,\n                    DatatableRowDetailDirective,\n                    DatatableGroupHeaderDirective,\n                    DatatableRowDetailTemplateDirective,\n                    DataTableBodyCellComponent,\n                    DataTableSelectionComponent,\n                    DataTableColumnHeaderDirective,\n                    DataTableColumnCellDirective,\n                    DataTableColumnCellTreeToggle,\n                    DatatableFooterDirective,\n                    DatatableGroupHeaderTemplateDirective,\n                    DataTableSummaryRowComponent\n                ],\n                exports: [\n                    DatatableComponent,\n                    DatatableRowDetailDirective,\n                    DatatableGroupHeaderDirective,\n                    DatatableRowDetailTemplateDirective,\n                    DataTableColumnDirective,\n                    DataTableColumnHeaderDirective,\n                    DataTableColumnCellDirective,\n                    DataTableColumnCellTreeToggle,\n                    DataTableFooterTemplateDirective,\n                    DatatableFooterDirective,\n                    DataTablePagerComponent,\n                    DatatableGroupHeaderTemplateDirective\n                ]\n            }]\n    }], null, null); })();\n/**\n * Interface definition for INgxDatatableConfig global configuration\n * @record\n */\nfunction INgxDatatableConfig() { }\nif (false) {\n    /** @type {?} */\n    INgxDatatableConfig.prototype.messages;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {string} */\nconst ClickType = {\n    single: 'single',\n    double: 'double',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column Type\n * @record\n */\nfunction TableColumn() { }\nif (false) {\n    /**\n     * Internal unique id\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.$$id;\n    /**\n     * Internal for column width distributions\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.$$oldWidth;\n    /**\n     * Internal for setColumnDefaults\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.$$valueGetter;\n    /**\n     * Determines if column is checkbox\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.checkboxable;\n    /**\n     * Determines if the column is frozen to the left\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.frozenLeft;\n    /**\n     * Determines if the column is frozen to the right\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.frozenRight;\n    /**\n     * The grow factor relative to other columns. Same as the flex-grow\n     * API from http =//www.w3.org/TR/css3-flexbox/. Basically;\n     * take any available extra width and distribute it proportionally\n     * according to all columns' flexGrow values.\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.flexGrow;\n    /**\n     * Min width of the column\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.minWidth;\n    /**\n     * Max width of the column\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.maxWidth;\n    /**\n     * The default width of the column, in pixels\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.width;\n    /**\n     * Can the column be resized\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.resizeable;\n    /**\n     * Custom sort comparator\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.comparator;\n    /**\n     * Custom pipe transforms\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.pipe;\n    /**\n     * Can the column be sorted\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.sortable;\n    /**\n     * Can the column be re-arranged by dragging\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.draggable;\n    /**\n     * Whether the column can automatically resize to fill space in the table.\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.canAutoResize;\n    /**\n     * Column name or label\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.name;\n    /**\n     * Property to bind to the row. Example:\n     *\n     * `someField` or `some.field.nested`, 0 (numeric)\n     *\n     * If left blank, will use the name as camel case conversion\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.prop;\n    /**\n     * Cell template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.cellTemplate;\n    /**\n     * Header template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.headerTemplate;\n    /**\n     * Tree toggle template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.treeToggleTemplate;\n    /**\n     * CSS Classes for the cell\n     *\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.cellClass;\n    /**\n     * CSS classes for the header\n     *\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.headerClass;\n    /**\n     * Header checkbox enabled\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.headerCheckboxable;\n    /**\n     * Is tree displayed on this column\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.isTreeColumn;\n    /**\n     * Width of the tree level indent\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.treeLevelIndent;\n    /**\n     * Summary function\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.summaryFunc;\n    /**\n     * Summary cell template ref\n     *\n     * \\@memberOf TableColumn\n     * @type {?|undefined}\n     */\n    TableColumn.prototype.summaryTemplate;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nfunction SortPropDir() { }\nif (false) {\n    /** @type {?} */\n    SortPropDir.prototype.dir;\n    /** @type {?} */\n    SortPropDir.prototype.prop;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nif (typeof document !== 'undefined' && !document.elementsFromPoint) {\n    document.elementsFromPoint = elementsFromPoint;\n}\n/*tslint:disable*/\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction elementsFromPoint(x, y) {\n    /** @type {?} */\n    const elements = [];\n    /** @type {?} */\n    const previousPointerEvents = [];\n    /** @type {?} */\n    let current;\n    // TODO: window.getComputedStyle should be used with inferred type (Element)\n    /** @type {?} */\n    let i;\n    /** @type {?} */\n    let d;\n    //if (document === undefined) return elements;\n    // get all elements via elementFromPoint, and remove them from hit-testing in order\n    while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n        // push the element and its current style\n        elements.push(current);\n        previousPointerEvents.push({\n            value: current.style.getPropertyValue('pointer-events'),\n            priority: current.style.getPropertyPriority('pointer-events')\n        });\n        // add \"pointer-events: none\", to get to the underlying element\n        current.style.setProperty('pointer-events', 'none', 'important');\n    }\n    // restore the previous pointer-events values\n    for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]);) {\n        elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n    }\n    // return our results\n    return elements;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { ClickType, ColumnChangesService, ColumnMode, ContextmenuType, DataTableBodyCellComponent, DataTableBodyComponent, DataTableBodyRowComponent, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableFooterComponent, DataTableFooterTemplateDirective, DataTableHeaderCellComponent, DataTableHeaderComponent, DataTablePagerComponent, DataTableRowWrapperComponent, DataTableSelectionComponent, DataTableSummaryRowComponent, DatatableComponent, DatatableFooterDirective, DatatableGroupHeaderDirective, DatatableGroupHeaderTemplateDirective, DatatableRowDetailDirective, DatatableRowDetailTemplateDirective, DimensionsHelper, DraggableDirective, Keys, LongPressDirective, NgxDatatableModule, OrderableDirective, ProgressBarComponent, ResizeableDirective, RowHeightCache, ScrollbarHelper, ScrollerComponent, SelectionType, SortDirection, SortType, VisibilityDirective, adjustColumnWidths, camelCase, columnGroupWidths, columnTotalWidth, columnsByPin, columnsByPinArr, columnsTotalWidth, deCamelCase, deepValueGetter, elementsFromPoint, emptyStringGetter, forceFillColumnWidths, getTotalFlexGrow, getVendorPrefixedName, getterForProp, groupRowsByParents, id, isNullOrUndefined, nextSortDir, numericIndexGetter, optionalGetterForProp, orderByComparator, selectRows, selectRowsBetween, setColumnDefaults, shallowValueGetter, sortRows, throttle, throttleable, translateTemplates, translateXY };\n\n//# sourceMappingURL=swimlane-ngx-datatable.js.map","import { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n//# sourceMappingURL=webSocket.js.map","import { errorObject } from './errorObject';\nlet tryCatchTarget;\nfunction tryCatcher() {\n    errorObject.e = undefined;\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n    finally {\n        tryCatchTarget = undefined;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map","import { Directive, Input, Output, HostBinding, HostListener, EventEmitter, ElementRef } from '@angular/core';\nimport { isNil } from 'lodash';\n\n@Directive({\n    selector: '[ngxDropdown]',\n    exportAs: 'ngxDropdown'\n})\nexport class DropdownDirective {\n    toggleElement: any;\n    // tslint:disable-next-line:no-input-rename\n    @Input('open') internalOpen = false;\n    @Output() openChange = new EventEmitter<boolean>();\n\n    @HostBinding('class.show') get isOpen(): boolean {\n        return this.internalOpen;\n    }\n\n    @HostListener('keyup.esc')\n    onKeyupEsc() {\n        this.close();\n    }\n\n    @HostListener('document:click', ['$event'])\n    onDocumentClick(event: MouseEvent) {\n        if (event.button !== 2 && !this.isEventFromToggle(event)) {\n            this.close();\n        }\n    }\n\n    open() {\n        if (!this.internalOpen) {\n            this.internalOpen = true;\n            this.openChange.emit(true);\n        }\n    }\n\n    close() {\n        if (this.internalOpen) {\n            this.internalOpen = false;\n            this.openChange.emit(false);\n        }\n    }\n\n    toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    private isEventFromToggle(event: MouseEvent) {\n        return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\n    }\n}\n","export * from './treeview.module';\nexport * from './treeview.component';\nexport * from './treeview.pipe';\nexport * from './treeview-item';\nexport * from './treeview-config';\nexport * from './treeview-i18n';\nexport * from './treeview-event-parser';\nexport * from './treeview-item-template-context';\nexport * from './treeview-helper';\nexport * from './dropdown-toggle.directive';\nexport * from './dropdown.directive';\nexport * from './dropdown-treeview.component';\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  OnChanges,\n  OnInit,\n  OnDestroy,\n  SimpleChanges\n} from '@angular/core';\nimport { isNil } from 'lodash';\nimport { TreeviewI18n, TreeviewItem, TreeviewConfig, DropdownTreeviewComponent, TreeviewHelper } from 'ngx-treeview';\nimport { DropdownTreeviewSelectI18n } from './dropdown-treeview-select-i18n';\nimport {takeUntil} from 'rxjs/operators';\nimport {NbMenuService} from '@nebular/theme';\nimport {Subject} from 'rxjs';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {isNumeric} from 'rxjs/internal-compatibility';\n\n\n@Component({\n  selector: 'ngx-treeview-custom',\n  templateUrl: './treeview-custom.component.html',\n  styleUrls: ['./treeview-custom.component.scss'],\n  providers: [\n    { provide: TreeviewI18n, useClass: DropdownTreeviewSelectI18n }\n  ]\n})\nexport class TreeviewCustomComponent implements OnChanges, OnInit, OnDestroy {\n  ngOnDestroy(): void {\n    this.destroy$.next()\n  }\n  @Input() config: TreeviewConfig;\n  @Input() items: TreeviewItem[];\n  @Input() value: any;\n  @Input() title: string;\n  @Input() supportUncheck: boolean = false;\n  @Output() valueChange = new EventEmitter<any>();\n  @Output() menuClick = new EventEmitter<any>();\n  @Input() showContextMenu: boolean\n  @ViewChild(DropdownTreeviewComponent, { static: false }) dropdownTreeviewComponent: DropdownTreeviewComponent;\n  @Input() menus: any[];\n  @Output() dropChange = new EventEmitter<any>();\n  @Input() hasDrag: boolean;\n  @Output() onMove = new EventEmitter<any>();\n  itemLocal: any[] = []\n  private destroy$: Subject<void> = new Subject<void>();\n  filterText: string;\n  private dropdownTreeviewSelectI18n: DropdownTreeviewSelectI18n;\n  @Input() overflow: boolean;\n\n  constructor(\n    public i18n: TreeviewI18n,\n    private menuService: NbMenuService,\n  ) {\n    this.config = TreeviewConfig.create({\n      hasAllCheckBox: false,\n      hasCollapseExpand: false,\n      hasFilter: true,\n      maxHeight: 500\n    });\n    this.dropdownTreeviewSelectI18n = i18n as unknown as DropdownTreeviewSelectI18n;\n  }\n\n\n\n  select(item: TreeviewItem, isHidden): void {\n    if (!isHidden) {\n    this.selectItem(item);\n    }\n  }\n\n  private updateSelectedItem(): void {\n    if (!isNil(this.items)) {\n      const selectedItem = TreeviewHelper.findItemInList(this.items, this.value);\n      this.selectItem(selectedItem);\n    }\n  }\n\n  private selectItem(item: TreeviewItem): void {\n    if (this.dropdownTreeviewSelectI18n.selectedItem !== item) {\n      this.dropdownTreeviewSelectI18n.selectedItem = item;\n      if (this.dropdownTreeviewComponent) {\n        this.dropdownTreeviewComponent.onSelectedChange([item]);\n      }\n\n      if (item) {\n        // if (!this.value || (this.value && this.value.value !== item.value)) {\n        this.value = item;\n        this.valueChange.emit(item);\n        // }\n      }\n    } else if (this.supportUncheck) {\n        this.dropdownTreeviewSelectI18n.selectedItem = null;\n        this.value = null;\n        this.valueChange.emit(null);\n    }\n  }\n\n  clearData() {\n    this.value = null;\n    this.valueChange.emit(null);\n  }\n\n  ngOnInit(): void {\n    this.menuService.onItemClick()\n      .pipe(\n        takeUntil(this.destroy$)\n      )\n      .subscribe((event: any) => {\n          this.menuClick.emit(event)\n        }\n      );\n  }\n  drop($event: any) {\n    this.dropChange.emit($event)\n  }\n  onSelectedChange($event: any[]) {\n  }\n\n  onFilterChange($event: string) {\n  }\n\n  checkIndex(item) {\n\n  }\n\n  getIndex(item: any) {\n    const listId = this.items.map(e => e.value.id)\n    const i = listId.indexOf(item.value.id)\n    if (i === (this.items.length - 1)) {\n      return false;\n    } else return true  }\n\n  moveItem(move: string, value) {\n    const data = {\n      data: value,\n      move: move\n    }\n    this.onMove.emit(data)\n  }\n\n  getMenu(item: any) {\n    let menu = this.menus\n    if (menu)\n    if (item.isDefault ) {\n      if (menu) {\n        menu = menu.filter(c => {\n          if (item.isHidden) {\n            if (c.target !== 'hideColumn') return c\n          } else if (c.target !== 'showColumn') {\n            return c\n          }\n        })\n      }\n      menu = menu.filter(c => {\n        if (c.target !== 'deleteCategoryColumn' && c.target !== 'addChildColumn') {\n          return c\n        }\n      })\n      if (item.idx <= 3) {\n        menu = menu.filter(c => {\n          if (c.target !== 'addColumnBellow') {\n            return c\n          }\n        })\n      }\n    } else {\n      if (menu) {\n        menu = menu.filter(c => {\n          if (c.target !== 'hideColumn' && c.target !== 'showColumn') return c\n        })\n      }\n    }\n    return menu\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes && changes.items) {\n      this.itemLocal = this.getMenuForTree(changes.items.currentValue);\n      // console.log(this.itemLocal)\n      this.updateSelectedItem();\n    }\n  }\n  getMenuForTree(data) {\n    for (let i = 0; i < data.length; i++) {\n      const e = data[i]\n      if (e) {\n        if (!isNumeric(e.value)) {\n          e.value.menu = this.getMenu(e.value)\n          if (e.children) {\n            const child = e.children;\n            this.getMenuForTree(child)\n          }\n        }\n      }\n    }\n    return data;\n  }\n}\n","<ng-template #itemTemplate let-item=\"item\" let-onCollapseExpand=\"onCollapseExpand\"\n             let-onCheckedChange=\"onCheckedChange\">\n  <div class=\"text-nowrap row-item d-flex\"\n  [ngClass]=\"{'active': value?.value === item?.value , 'disable': item.value.isHidden}\"\n  >\n    <i *ngIf=\"item.children\" (click)=\"onCollapseExpand()\" aria-hidden=\"true\" [ngSwitch]=\"item.collapsed\">\n      <svg *ngSwitchCase=\"true\" width=\"0.8rem\" height=\"0.8rem\" viewBox=\"0 0 16 16\" class=\"bi bi-caret-right-fill\"\n           fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"M12.14 8.753l-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z\" />\n      </svg>\n      <svg *ngSwitchCase=\"false\" width=\"0.8rem\" height=\"0.8rem\" viewBox=\"0 0 16 16\" class=\"bi bi-caret-down-fill\"\n           fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\" />\n      </svg>\n    </i>\n    <div class=\"text text-truncate\" (click)=\"select(item, item.value.isHidden)\" style=\"cursor: pointer\" [nbTooltip]=\"item.text\">{{item.text}}</div>\n    <div class=\"ml-auto\">\n      <button nbButton size=\"tiny\"  ghost *ngIf=\"hasDrag && item.value.idx !== 1 && !item.value.isDefault && !item.value.isAfterDefault\" (click)=\"moveItem('up', item.value)\">\n        <nb-icon [icon]=\"'arrow-ios-upward-outline'\"></nb-icon>\n      </button>\n      <button nbButton size=\"tiny\" ghost *ngIf=\"hasDrag && item?.value?.isBottom !== true && !item.value.isDefault\" (click)=\"moveItem('down', item.value)\">\n        <nb-icon [icon]=\"'arrow-ios-downward-outline'\"></nb-icon>\n      </button>\n      <button nbButton size=\"tiny\" ghost [nbContextMenuPlacement]=\"'bottom-start'\" [nbContextMenu]=\"item.value.menu\" *ngIf=\"showContextMenu && item?.value?.menu && item?.value?.menu.length > 0\" [nbContextMenuTag]=\"title + item.value.id\" >\n        <nb-icon [icon]=\"'more-vertical-outline'\"></nb-icon>\n      </button>\n    </div>\n  </div>\n</ng-template>\n<ng-template #headerTemplate let-config=\"config\" let-item=\"item\" let-onCollapseExpand=\"onCollapseExpand\"\n             let-onCheckedChange=\"onCheckedChange\" let-onFilterTextChange=\"onFilterTextChange\">\n  <div *ngIf=\"config.hasFilter\" class=\"row row-filter\">\n    <div class=\"col-12\">\n      <input class=\"form-control\" type=\"text\" [placeholder]=\"i18n.getFilterPlaceholder()\" [(ngModel)]=\"filterText\"\n             (ngModelChange)=\"onFilterTextChange($event)\" />\n    </div>\n  </div>\n  <div *ngIf=\"config.hasAllCheckBox || config.hasCollapseExpand\" class=\"row\">\n    <div class=\"col-12\">\n      <span *ngIf=\"config.hasAllCheckBox\" (click)=\"select(item, item.value.isHidden) \">\n        <strong>{{ i18n.getAllCheckboxText() }}</strong>\n      </span>\n      <label *ngIf=\"config.hasCollapseExpand\" class=\"float-right\" (click)=\"onCollapseExpand()\">\n        <i [title]=\"i18n.getTooltipCollapseExpandText(item.collapsed)\" aria-hidden=\"true\" [ngSwitch]=\"item.collapsed\">\n          <svg *ngSwitchCase=\"true\" style=\"width: 1em;height: 1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrows-angle-expand\"\n               fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\"\n                  d=\"M1.5 10.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\" />\n            <path fill-rule=\"evenodd\"\n                  d=\"M6.354 9.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm8.5-8.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\" />\n            <path fill-rule=\"evenodd\"\n                  d=\"M10.036 1.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 1 1-1 0V2h-3.5a.5.5 0 0 1-.5-.5z\" />\n          </svg>\n          <svg *ngSwitchCase=\"false\" style=\"width: 1em;height: 1em\" viewBox=\"0 0 16 16\" class=\"bi bi-arrows-angle-contract\"\n               fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\"\n                  d=\"M9.5 2.036a.5.5 0 0 1 .5.5v3.5h3.5a.5.5 0 0 1 0 1h-4a.5.5 0 0 1-.5-.5v-4a.5.5 0 0 1 .5-.5z\" />\n            <path fill-rule=\"evenodd\"\n                  d=\"M14.354 1.646a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 1 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0zm-7.5 7.5a.5.5 0 0 1 0 .708l-4.5 4.5a.5.5 0 0 1-.708-.708l4.5-4.5a.5.5 0 0 1 .708 0z\" />\n            <path fill-rule=\"evenodd\"\n                  d=\"M2.036 9.5a.5.5 0 0 1 .5-.5h4a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-1 0V10h-3.5a.5.5 0 0 1-.5-.5z\" />\n          </svg>\n        </i>\n      </label>\n    </div>\n  </div>\n\n  <div *ngIf=\"config.hasDivider\" class=\"dropdown-divider\"></div>\n</ng-template>\n<div class=\"position-relative\" cdkDropListGroup>\n<!--  <ngx-dropdown-treeview [config]=\"config\" [headerTemplate]=\"headerTemplate\" [items]=\"items\"-->\n<!--                         [itemTemplate]=\"itemTemplate\">-->\n<!--  </ngx-dropdown-treeview>-->\n  <ngx-treeview [hasDrag]=\"hasDrag\" #treeviewComponent [config]=\"config\" [headerTemplate]=\"headerTemplate\" [items]=\"itemLocal\" [showContextMenu]=\"showContextMenu\"\n                [itemTemplate]=\"itemTemplate\" (selectedChange)=\"onSelectedChange($event)\"\n                (dropChange)=\"drop($event)\"\n                (filterChange)=\"onFilterChange($event)\" ></ngx-treeview>\n  <!--  <label title=\"Xóa\" style=\"position: absolute; right: 26px; top: 7px\" (click)=\"clearData()\" *ngIf=\"value\">x</label>-->\n</div>\n","import { Component, Input, Output, EventEmitter, SimpleChanges, OnChanges, TemplateRef } from '@angular/core';\nimport { isNil, includes } from 'lodash';\nimport { TreeviewI18n } from './treeview-i18n';\nimport { TreeviewItem, TreeviewSelection } from './treeview-item';\nimport { TreeviewConfig } from './treeview-config';\nimport { TreeviewEventParser } from './treeview-event-parser';\nimport { TreeviewHeaderTemplateContext } from './treeview-header-template-context';\nimport { TreeviewItemTemplateContext } from './treeview-item-template-context';\nimport { TreeviewHelper } from './treeview-helper';\n\nclass FilterTreeviewItem extends TreeviewItem {\n    private readonly refItem: TreeviewItem;\n    constructor(item: TreeviewItem) {\n        super({\n            text: item.text,\n            value: item.value,\n            disabled: item.disabled,\n            checked: item.checked,\n            collapsed: item.collapsed,\n            children: item.children\n        });\n        this.refItem = item;\n    }\n\n    updateRefChecked() {\n        this.children.forEach(child => {\n            if (child instanceof FilterTreeviewItem) {\n                child.updateRefChecked();\n            }\n        });\n\n        let refChecked = this.checked;\n        if (refChecked) {\n            for (const refChild of this.refItem.children) {\n                if (!refChild.checked) {\n                    refChecked = false;\n                    break;\n                }\n            }\n        }\n        this.refItem.checked = refChecked;\n    }\n}\n\n@Component({\n    selector: 'ngx-treeview',\n    templateUrl: './treeview.component.html',\n    styleUrls: ['./treeview.component.scss']\n})\nexport class TreeviewComponent implements OnChanges {\n    @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\n    @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\n    @Input() disable: boolean;\n    @Input() items: TreeviewItem[];\n    @Input() config: TreeviewConfig;\n    @Output() selectedChange = new EventEmitter<any[]>();\n    @Output() filterChange = new EventEmitter<string>();\n    @Output() dropChange = new EventEmitter<any>();\n    @Input() hasDrag: boolean;\n\n  headerTemplateContext: TreeviewHeaderTemplateContext;\n    allItem: TreeviewItem;\n    filterText = '';\n    filterItems: TreeviewItem[];\n    selection: TreeviewSelection;\n  menus: any = [{ title: 'Thêm danh mục con' }, { title: 'Lấy chỉ tiêu' }, {title: 'Xóa danh mục'}];\n    @Input() showContextMenu: boolean;\n\n    constructor(\n        public i18n: TreeviewI18n,\n        private defaultConfig: TreeviewConfig,\n        private eventParser: TreeviewEventParser\n    ) {\n        this.config = this.defaultConfig;\n        this.allItem = new TreeviewItem({ text: 'All', value: undefined });\n        this.createHeaderTemplateContext();\n    }\n\n    get hasFilterItems(): boolean {\n        return !isNil(this.filterItems) && this.filterItems.length > 0;\n    }\n\n    get maxHeight(): string {\n        return `${this.config.maxHeight || 'auto'}`;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const itemsSimpleChange = changes['items'];\n        if (!isNil(itemsSimpleChange)) {\n            if (!isNil(this.items)) {\n                this.updateFilterItems();\n                this.updateCollapsedOfAll();\n                this.raiseSelectedChange();\n            }\n        }\n        this.createHeaderTemplateContext();\n    }\n\n    onAllCollapseExpand() {\n        this.allItem.collapsed = !this.allItem.collapsed;\n        this.filterItems.forEach(item => item.setCollapsedRecursive(this.allItem.collapsed));\n    }\n\n    onFilterTextChange(text: string) {\n        this.filterText = text;\n        this.filterChange.emit(text);\n        this.updateFilterItems();\n    }\n\n    onAllCheckedChange() {\n        const checked = this.allItem.checked;\n        this.filterItems.forEach(item => {\n            item.setCheckedRecursive(checked);\n            if (item instanceof FilterTreeviewItem) {\n                item.updateRefChecked();\n            }\n        });\n\n        this.raiseSelectedChange();\n    }\n\n    onItemCheckedChange(item: TreeviewItem, checked: boolean) {\n        if (item instanceof FilterTreeviewItem) {\n            item.updateRefChecked();\n        }\n\n        this.updateCheckedOfAll();\n        this.raiseSelectedChange();\n    }\n\n    raiseSelectedChange() {\n        this.generateSelection();\n        const values = this.eventParser.getSelectedChange(this);\n        this.selectedChange.emit(values);\n    }\n\n    private createHeaderTemplateContext() {\n        this.headerTemplateContext = {\n            config: this.config,\n            item: this.allItem,\n            onCheckedChange: () => this.onAllCheckedChange(),\n            onCollapseExpand: () => this.onAllCollapseExpand(),\n            onFilterTextChange: (text) => this.onFilterTextChange(text)\n        };\n    }\n\n    private generateSelection() {\n        let checkedItems: TreeviewItem[] = [];\n        let uncheckedItems: TreeviewItem[] = [];\n        if (!isNil(this.items)) {\n            const selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\n            checkedItems = selection.checked;\n            uncheckedItems = selection.unchecked;\n        }\n\n        this.selection = {\n            checkedItems: checkedItems,\n            uncheckedItems: uncheckedItems\n        };\n    }\n\n    private updateFilterItems() {\n        if (this.filterText !== '') {\n            const filterItems: TreeviewItem[] = [];\n            const filterText = this.filterText.toLowerCase();\n            this.items.forEach(item => {\n                const newItem = this.filterItem(item, filterText);\n                if (!isNil(newItem)) {\n                    filterItems.push(newItem);\n                }\n            });\n            this.filterItems = filterItems;\n        } else {\n            this.filterItems = this.items;\n        }\n\n        this.updateCheckedOfAll();\n    }\n\n    private filterItem(item: TreeviewItem, filterText: string): TreeviewItem {\n        const isMatch = includes(item.text.toLowerCase(), filterText);\n        if (isMatch) {\n            return item;\n        } else {\n            if (!isNil(item.children)) {\n                const children: TreeviewItem[] = [];\n                item.children.forEach(child => {\n                    const newChild = this.filterItem(child, filterText);\n                    if (!isNil(newChild)) {\n                        children.push(newChild);\n                    }\n                });\n                if (children.length > 0) {\n                    const newItem = new FilterTreeviewItem(item);\n                    newItem.collapsed = false;\n                    newItem.children = children;\n                    return newItem;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    private updateCheckedOfAll() {\n        let itemChecked: boolean = null;\n        for (const filterItem of this.filterItems) {\n            if (itemChecked === null) {\n                itemChecked = filterItem.checked;\n            } else if (itemChecked !== filterItem.checked) {\n                itemChecked = undefined;\n                break;\n            }\n        }\n\n        if (itemChecked === null) {\n            itemChecked = false;\n        }\n\n        this.allItem.checked = itemChecked;\n    }\n\n    private updateCollapsedOfAll() {\n        let hasItemExpanded = false;\n        for (const filterItem of this.filterItems) {\n            if (!filterItem.collapsed) {\n                hasItemExpanded = true;\n                break;\n            }\n        }\n\n        this.allItem.collapsed = !hasItemExpanded;\n    }\n\n  drop($event: any) {\n    this.dropChange.emit($event)\n  }\n\n\n}\n","<ng-template #defaultItemTemplate let-item=\"item\" let-onCollapseExpand=\"onCollapseExpand\" let-onCheckedChange=\"onCheckedChange\">\n  <div class=\"form-inline row-item {{item.checked ? 'active' : ''}}\">\n    <i *ngIf=\"item.children\" (click)=\"onCollapseExpand()\" aria-hidden=\"true\" class=\"fa\" [class.fa-caret-right]=\"item.collapsed\"\n      [class.fa-caret-down]=\"!item.collapsed\"></i>\n    <div class=\"form-check \">\n<!--      <input type=\"checkbox\" class=\"form-check-input\" [(ngModel)]=\"item.checked\" (ngModelChange)=\"onCheckedChange()\"-->\n<!--        [disabled]=\"item.disabled\" [indeterminate]=\"item.indeterminate\" />-->\n      <label class=\"text\" (click)=\"item.checked = !item.checked; onCheckedChange()\" [nbTooltip]=\"item.text\">\n        {{item.text}}\n      </label>\n    </div>\n    <button nbButton size=\"tiny\" class=\"ml-auto\" ghost [nbContextMenu]=\"menus\" *ngIf=\"showContextMenu\">\n      <nb-icon [icon]=\"'more-vertical-outline'\"></nb-icon>\n    </button>\n  </div>\n</ng-template>\n<ng-template #defaultHeaderTemplate let-config=\"config\" let-item=\"item\" let-onCollapseExpand=\"onCollapseExpand\"\n  let-onCheckedChange=\"onCheckedChange\" let-onFilterTextChange=\"onFilterTextChange\">\n  <div *ngIf=\"config.hasFilter\" class=\"row-filter\">\n      <input class=\"form-control\" type=\"text\" [placeholder]=\"i18n.getFilterPlaceholder()\" [(ngModel)]=\"filterText\"\n        (ngModelChange)=\"onFilterTextChange($event)\" />\n  </div>\n  <div *ngIf=\"hasFilterItems\">\n    <div *ngIf=\"config.hasAllCheckBox || config.hasCollapseExpand\" class=\"row row-all\">\n      <div class=\"col-12\">\n        <div class=\"form-check form-check-inline\" *ngIf=\"config.hasAllCheckBox\">\n          <input type=\"checkbox\" class=\"form-check-input\" [(ngModel)]=\"item.checked\" (ngModelChange)=\"onCheckedChange()\"\n            [indeterminate]=\"item.indeterminate\" />\n          <span class=\"text\" (click)=\"item.checked = !item.checked; onCheckedChange()\">\n            {{i18n.getAllCheckboxText()}}\n          </span>\n        </div>\n        <label *ngIf=\"config.hasCollapseExpand\" class=\"pull-right label\" (click)=\"onCollapseExpand()\">\n          <i [title]=\"i18n.getTooltipCollapseExpandText(item.collapsed)\" aria-hidden=\"true\" class=\"fa\"\n            [class.fa-expand]=\"item.collapsed\" [class.fa-compress]=\"!item.collapsed\"></i>\n        </label>\n      </div>\n    </div>\n    <div *ngIf=\"config.hasDivider\" class=\"dropdown-divider\"></div>\n  </div>\n</ng-template>\n<div class=\"treeview-header\">\n  <ng-template [ngTemplateOutlet]=\"headerTemplate || defaultHeaderTemplate\" [ngTemplateOutletContext]=\"headerTemplateContext\">\n  </ng-template>\n</div>\n<div [ngSwitch]=\"hasFilterItems\">\n  <div *ngSwitchCase=\"true\" class=\"treeview-container example-boundary\" [style.max-height.px]=\"maxHeight\" cdkDropListGroup >\n    <ngx-treeview-item [hasDrag]=\"hasDrag\" (dropChange)=\"drop($event)\" *ngFor=\"let item of filterItems\" [config]=\"config\" [item]=\"item\" [template]=\"itemTemplate || defaultItemTemplate\"\n      (checkedChange)=\"onItemCheckedChange(item, $event)\" >\n    </ngx-treeview-item>\n  </div>\n  <div *ngSwitchCase=\"false\" class=\"treeview-text\">\n    {{i18n.getFilterNoItemsFoundText()}}\n  </div>\n</div>\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef, EventEmitter, forwardRef, Input,\n  OnInit, Output,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  NbAdjustment,\n  NbOverlayRef,\n  NbOverlayService,\n  NbPosition,\n  NbPositionBuilderService,\n  NbTemplatePortal\n} from '@nebular/theme';\nimport {TreeviewConfig, TreeviewItem} from './ngx-treeview';\n\n@Component({\n  selector: 'ngx-tree-picker',\n  templateUrl: './tree-picker.component.html',\n  styleUrls: ['./tree-picker.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TreePickerComponent),\n      multi: true\n    }\n  ]\n})\nexport class TreePickerComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n  @Input() maxHeight?: number;\n  @ViewChild('overlay', {static: false}) overlayTemplate: TemplateRef<any>;\n  @ViewChild('inputElement', {static: false}) inputElement: ElementRef<any>;\n  protected ref: NbOverlayRef;\n  @Input() items: TreeviewItem[] = [];\n  @Input() hasFilter?: boolean = true;\n  @Input() hasAllCheckBox?: boolean = false;\n  @Input() hasCollapseExpand?: boolean = true;\n  @Input() decoupleChildFromParent?: boolean = false;\n  @Output() change = new EventEmitter<any[]>();\n\n  values: any[];\n  texts: any[];\n  config: TreeviewConfig;\n  propagateChange = (_: any) => {\n  };\n\n  constructor(protected overlay: NbOverlayService,\n              protected positionBuilder: NbPositionBuilderService,\n              protected vcr: ViewContainerRef,\n              protected cd: ChangeDetectorRef) { }\n\n  ngOnInit() {\n    this.config = TreeviewConfig.create({\n      hasAllCheckBox: this.hasAllCheckBox,\n      hasFilter: this.hasFilter,\n      hasCollapseExpand: this.hasCollapseExpand,\n      decoupleChildFromParent: this.decoupleChildFromParent\n    });\n    if (this.maxHeight !== null && this.maxHeight !== undefined) {\n      this.config.maxHeight = this.maxHeight\n    }\n  }\n\n  ngAfterViewInit(): void {\n    const positionStrategy = this.positionBuilder.connectedTo(this.inputElement)\n      .position(NbPosition.BOTTOM_END)\n      .adjustment(NbAdjustment.VERTICAL)\n      .withFlexibleDimensions(true)\n      .offset(5);\n    this.ref = this.overlay.create({positionStrategy, hasBackdrop: true});\n    this.ref.backdropClick().subscribe(() => this.dismissOverlay());\n  }\n\n  createOverlay() {\n    if (this.ref.hasAttached()) {\n      return;\n    }\n\n    this.ref.attach(new NbTemplatePortal(this.overlayTemplate, this.vcr));\n  }\n  dismissOverlay() {\n    this.ref.detach();\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    // this.propagateChange = fn;\n  }\n\n  writeValue(obj: any): void {\n    this.values = obj;\n    // console.log('Gia tri writeValue:', this.values);\n    if (!this.cd['destroyed']) {\n      this.cd.detectChanges();\n    }\n  }\n\n  onFilterChange(value: string) {\n  }\n  onSelectedChange(value: any[]) {\n    this.texts = value.map(x => x['text']);\n    this.values = value.map(x => x['value']);\n    this.propagateChange(this.values);\n    if (this.change !== null && this.change !== undefined) {\n      this.change.emit(this.values);\n    }\n  }\n\n}\n","<input nbInput fullWidth\n       [(ngModel)]=\"texts\"\n       (click)=\"createOverlay()\"\n       #inputElement\n       class=\"form-control\"\n/>\n<ng-template #overlay class=\"tree-picker-area\" >\n  <nb-card >\n    <ngx-treeview\n      [config]=\"config\"\n      [items]=\"items\"\n      (selectedChange)=\"onSelectedChange($event)\"\n      (filterChange)=\"onFilterChange($event)\"\n    >\n    </ngx-treeview>\n  </nb-card>\n</ng-template>\n","import { Directive } from '@angular/core';\nimport { DropdownDirective } from './dropdown.directive';\n\n@Directive({\n    selector: '[ngxDropdownMenu]',\n    // tslint:disable-next-line:use-host-property-decorator\n    host: {\n        '[class.dropdown-menu]': 'true',\n        '[class.show]': 'dropdown.isOpen'\n    }\n})\nexport class DropdownMenuDirective {\n    constructor(\n        public dropdown: DropdownDirective\n    ) { }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  HostListener,\n  ViewChild,\n  TemplateRef,\n  ChangeDetectorRef, AfterContentChecked\n} from '@angular/core';\nimport {TreeviewI18n} from './treeview-i18n';\nimport {TreeviewItem} from './treeview-item';\nimport {TreeviewConfig} from './treeview-config';\nimport {TreeviewComponent} from './treeview.component';\nimport {DropdownDirective} from './dropdown.directive';\nimport {TreeviewHeaderTemplateContext} from './treeview-header-template-context';\nimport {TreeviewItemTemplateContext} from './treeview-item-template-context';\n\n@Component({\n  selector: 'ngx-dropdown-treeview',\n  templateUrl: './dropdown-treeview.component.html',\n  styleUrls: ['./dropdown-treeview.component.scss']\n})\nexport class DropdownTreeviewComponent implements AfterContentChecked {\n  @Input() test: any;\n  @Input() buttonClass = 'btn-outline-secondary';\n  @Input() headerTemplate: TemplateRef<TreeviewHeaderTemplateContext>;\n  @Input() itemTemplate: TemplateRef<TreeviewItemTemplateContext>;\n  @Input() items: TreeviewItem[];\n  @Input() showContextMenu: boolean;\n  @Input() disable: boolean;\n  @Input() config: TreeviewConfig;\n  @Output() selectedChange = new EventEmitter<any[]>(true);\n  @Output() filterChange = new EventEmitter<string>();\n  @ViewChild('treeviewComponent', {static: false}) treeviewComponent: TreeviewComponent;\n  @ViewChild(DropdownDirective, {static: false}) dropdownDirective: DropdownDirective;\n  ngAfterContentChecked() {\n    this.cdref.detectChanges();\n\n  }\n  constructor(\n    public i18n: TreeviewI18n,\n    private defaultConfig: TreeviewConfig,\n    private cdref: ChangeDetectorRef\n  ) {\n    this.config = this.defaultConfig;\n  }\n\n  getText(): string {\n    if (this.treeviewComponent) {\n      return this.i18n.getText(this.treeviewComponent.selection);\n    } else {\n      return `Lựa chọn`;\n    }\n  }\n\n  onSelectedChange(values: any[]) {\n    this.selectedChange.emit(values);\n  }\n\n  onFilterChange(text: string) {\n    this.filterChange.emit(text);\n  }\n}\n","<!--<div class=\"dropdown\" ngxDropdown>-->\n<!--  <button [disabled]=\"disable\" class=\"btn\" [ngClass]=\"buttonClass\" type=\"button\" role=\"button\"-->\n<!--          ngxDropdownToggle>          {{getText()}}        </button>-->\n<!--  <div ngxDropdownMenu aria-labelledby=\"dropdownMenu\" (click)=\"$event.stopPropagation()\">-->\n<!--    <div class=\"dropdown-container\">-->\n      <ngx-treeview #treeviewComponent [config]=\"config\" [headerTemplate]=\"headerTemplate\" [items]=\"items\" [showContextMenu]=\"showContextMenu\"\n                    [itemTemplate]=\"itemTemplate\" (selectedChange)=\"onSelectedChange($event)\"\n                    (filterChange)=\"onFilterChange($event)\"></ngx-treeview>\n<!--    </div>-->\n<!--  </div>-->\n<!--</div>-->\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {\n  NbButtonModule,\n  NbCalendarKitModule,\n  NbCardModule,\n  NbIconModule,\n  NbInputModule,\n  NbTooltipModule\n} from '@nebular/theme';\nimport {NgSelectModule} from '@ng-select/ng-select';\nimport {InlineMessageComponent} from './directives/inline-message/inline-message.component';\nimport {TranslateModule} from '@ngx-translate/core';\nimport {ScrollbarHelper} from '@swimlane/ngx-datatable';\nimport {ConfirmDialogComponent} from './directives/confirm-dialog/confirm-dialog.component';\nimport {TreePickerComponent} from './directives/tree-picker/tree-picker.component';\n\n@NgModule({\n  declarations: [InlineMessageComponent, ConfirmDialogComponent, TreePickerComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    NbInputModule,\n    NbCardModule,\n    NgSelectModule,\n    NbButtonModule,\n    TranslateModule,\n    NbIconModule,\n    ReactiveFormsModule,\n    NbCalendarKitModule,\n    NbTooltipModule\n  ],\n  exports: [\n    InlineMessageComponent, ConfirmDialogComponent, TreePickerComponent\n  ],\n  providers: [\n    ScrollbarHelper\n  ]\n})\nexport class SharedModule {\n}\n","export { config } from '../internal/config';\nexport { InnerSubscriber } from '../internal/InnerSubscriber';\nexport { OuterSubscriber } from '../internal/OuterSubscriber';\nexport { Scheduler } from '../internal/Scheduler';\nexport { AnonymousSubject } from '../internal/Subject';\nexport { SubjectSubscription } from '../internal/SubjectSubscription';\nexport { Subscriber } from '../internal/Subscriber';\nexport { fromPromise } from '../internal/observable/fromPromise';\nexport { fromIterable } from '../internal/observable/fromIterable';\nexport { ajax } from '../internal/observable/dom/ajax';\nexport { webSocket } from '../internal/observable/dom/webSocket';\nexport { ajaxGet, ajaxPost, ajaxDelete, ajaxPut, ajaxPatch, ajaxGetJSON, AjaxObservable, AjaxSubscriber, AjaxResponse, AjaxError, AjaxTimeoutError } from '../internal/observable/dom/AjaxObservable';\nexport { WebSocketSubject } from '../internal/observable/dom/WebSocketSubject';\nexport { CombineLatestOperator } from '../internal/observable/combineLatest';\nexport { dispatch } from '../internal/observable/range';\nexport { SubscribeOnObservable } from '../internal/observable/SubscribeOnObservable';\nexport { Timestamp } from '../internal/operators/timestamp';\nexport { TimeInterval } from '../internal/operators/timeInterval';\nexport { GroupedObservable } from '../internal/operators/groupBy';\nexport { defaultThrottleConfig } from '../internal/operators/throttle';\nexport { rxSubscriber } from '../internal/symbol/rxSubscriber';\nexport { iterator } from '../internal/symbol/iterator';\nexport { observable } from '../internal/symbol/observable';\nexport { ArgumentOutOfRangeError } from '../internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from '../internal/util/EmptyError';\nexport { Immediate } from '../internal/util/Immediate';\nexport { ObjectUnsubscribedError } from '../internal/util/ObjectUnsubscribedError';\nexport { TimeoutError } from '../internal/util/TimeoutError';\nexport { UnsubscriptionError } from '../internal/util/UnsubscriptionError';\nexport { applyMixins } from '../internal/util/applyMixins';\nexport { errorObject } from '../internal/util/errorObject';\nexport { hostReportError } from '../internal/util/hostReportError';\nexport { identity } from '../internal/util/identity';\nexport { isArray } from '../internal/util/isArray';\nexport { isArrayLike } from '../internal/util/isArrayLike';\nexport { isDate } from '../internal/util/isDate';\nexport { isFunction } from '../internal/util/isFunction';\nexport { isIterable } from '../internal/util/isIterable';\nexport { isNumeric } from '../internal/util/isNumeric';\nexport { isObject } from '../internal/util/isObject';\nexport { isInteropObservable as isObservable } from '../internal/util/isInteropObservable';\nexport { isPromise } from '../internal/util/isPromise';\nexport { isScheduler } from '../internal/util/isScheduler';\nexport { noop } from '../internal/util/noop';\nexport { not } from '../internal/util/not';\nexport { pipe } from '../internal/util/pipe';\nexport { root } from '../internal/util/root';\nexport { subscribeTo } from '../internal/util/subscribeTo';\nexport { subscribeToArray } from '../internal/util/subscribeToArray';\nexport { subscribeToIterable } from '../internal/util/subscribeToIterable';\nexport { subscribeToObservable } from '../internal/util/subscribeToObservable';\nexport { subscribeToPromise } from '../internal/util/subscribeToPromise';\nexport { subscribeToResult } from '../internal/util/subscribeToResult';\nexport { toSubscriber } from '../internal/util/toSubscriber';\nexport { tryCatch } from '../internal/util/tryCatch';\n//# sourceMappingURL=index.js.map","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: (e) => JSON.parse(e.data),\n    serializer: (value) => JSON.stringify(value),\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n    constructor(urlConfigOrSource, destination) {\n        super();\n        if (urlConfigOrSource instanceof Observable) {\n            this.destination = destination;\n            this.source = urlConfigOrSource;\n        }\n        else {\n            const config = this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG);\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (let key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    lift(operator) {\n        const sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    }\n    _resetState() {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    }\n    multiplex(subMsg, unsubMsg, messageFilter) {\n        const self = this;\n        return new Observable((observer) => {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            const subscription = self.subscribe(x => {\n                try {\n                    if (messageFilter(x)) {\n                        observer.next(x);\n                    }\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n            }, err => observer.error(err), () => observer.complete());\n            return () => {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    }\n    _connectSocket() {\n        const { WebSocketCtor, protocol, url, binaryType } = this._config;\n        const observer = this._output;\n        let socket = null;\n        try {\n            socket = protocol ?\n                new WebSocketCtor(url, protocol) :\n                new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        const subscription = new Subscription(() => {\n            this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = (e) => {\n            const { _socket } = this;\n            if (!_socket) {\n                socket.close();\n                this._resetState();\n                return;\n            }\n            const { openObserver } = this._config;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            const queue = this.destination;\n            this.destination = Subscriber.create((x) => {\n                if (socket.readyState === 1) {\n                    try {\n                        const { serializer } = this._config;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        this.destination.error(e);\n                    }\n                }\n            }, (e) => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                this._resetState();\n            }, () => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(this.destination));\n            }\n        };\n        socket.onerror = (e) => {\n            this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = (e) => {\n            this._resetState();\n            const { closeObserver } = this._config;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = (e) => {\n            try {\n                const { deserializer } = this._config;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(() => {\n            const { _socket } = this;\n            if (this._output.observers.length === 0) {\n                if (_socket && _socket.readyState === 1) {\n                    _socket.close();\n                }\n                this._resetState();\n            }\n        });\n        return subscriber;\n    }\n    unsubscribe() {\n        const { _socket } = this;\n        if (_socket && _socket.readyState === 1) {\n            _socket.close();\n        }\n        this._resetState();\n        super.unsubscribe();\n    }\n}\n//# sourceMappingURL=WebSocketSubject.js.map","import { Observable } from '../Observable';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\nimport { schedulePromise } from '../scheduled/schedulePromise';\nexport function fromPromise(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToPromise(input));\n    }\n    else {\n        return schedulePromise(input, scheduler);\n    }\n}\n//# sourceMappingURL=fromPromise.js.map","import { concat, isNil, pull } from 'lodash';\nimport { TreeviewItem } from './treeview-item';\n\nexport const TreeviewHelper = {\n    findItem: findItem,\n    findItemInList: findItemInList,\n    findParent: findParent,\n    removeItem: removeItem,\n    concatSelection: concatSelection\n};\n\nfunction findItem(root: TreeviewItem, value: any): TreeviewItem {\n    if (isNil(root)) {\n        return undefined;\n    }\n\n    if (root.value === value) {\n        return root;\n    }\n\n    if (root.children) {\n        for (const child of root.children) {\n            const foundItem = findItem(child, value);\n            if (foundItem) {\n                return foundItem;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nfunction findItemInList(list: TreeviewItem[], value: any): TreeviewItem {\n    if (isNil(list)) {\n        return undefined;\n    }\n\n    for (const item of list) {\n        const foundItem = findItem(item, value);\n        if (foundItem) {\n            return foundItem;\n        }\n    }\n\n    return undefined;\n}\n\nfunction findParent(root: TreeviewItem, item: TreeviewItem): TreeviewItem {\n    if (isNil(root) || isNil(root.children)) {\n        return undefined;\n    }\n\n    for (const child of root.children) {\n        if (child === item) {\n            return root;\n        } else {\n            const parent = findParent(child, item);\n            if (parent) {\n                return parent;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nfunction removeItem(root: TreeviewItem, item: TreeviewItem): boolean {\n    const parent = findParent(root, item);\n    if (parent) {\n        pull(parent.children, item);\n        if (parent.children.length === 0) {\n            parent.children = undefined;\n        } else {\n            parent.correctChecked();\n        }\n        return true;\n    }\n\n    return false;\n}\n\nfunction concatSelection(items: TreeviewItem[], checked: TreeviewItem[], unchecked: TreeviewItem[]): { [k: string]: TreeviewItem[] } {\n    let checkedItems = [...checked];\n    let uncheckedItems = [...unchecked];\n    for (const item of items) {\n        const selection = item.getSelection();\n        checkedItems = concat(checkedItems, selection.checkedItems);\n        uncheckedItems = concat(uncheckedItems, selection.uncheckedItems);\n    }\n    return {\n        checked: checkedItems,\n        unchecked: uncheckedItems\n    };\n}\n","const __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root = __window || __global || __self;\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\nexport { _root as root };\n//# sourceMappingURL=root.js.map"],"sourceRoot":"webpack:///"}